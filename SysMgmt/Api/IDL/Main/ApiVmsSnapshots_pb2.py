# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ApiVmsSnapshots.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import service as _service
from google.protobuf import service_reflection
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from IDL.Protos.Extensions import CustomOptions_pb2 as IDL_dot_Protos_dot_Extensions_dot_CustomOptions__pb2
from SysMgmt.Api.IDL.Main import Common_pb2 as SysMgmt_dot_Api_dot_IDL_dot_Main_dot_Common__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
    name='ApiVmsSnapshots.proto',
    package='da.api.vms.snapshots',
    syntax='proto2',
    serialized_pb=_b('\n\x15\x41piVmsSnapshots.proto\x12\x14\x64\x61.api.vms.snapshots\x1a)IDL/Protos/Extensions/CustomOptions.proto\x1a!SysMgmt/Api/IDL/Main/Common.proto\"\xaa\x05\n\x08Snapshot\x12\x30\n\x02id\x18\x01 \x02(\tB \x92?\x1d\x32\x1bVirtual machine snapshot IDR\x02id\x12\x36\n\x04name\x18\x02 \x01(\tB\"\x92?\x1f\x32\x1dVirtual machine snapshot nameR\x04name\x12I\n\ttimestamp\x18\x03 \x01(\x04\x42+\x92?(2&Timestamp when this snapshot was takenR\ttimestamp\x12G\n\x0btriggerType\x18\x04 \x01(\tB%\x92?\"2 Trigger. e.g. automatic, manual.R\x0btriggerType\x12\x33\n\x04vmId\x18\x05 \x02(\tB\x1f\x92?\x1c\x32\x1aVirtual machine identifierR\x04vmId\x12\x31\n\x06vmName\x18\x06 \x02(\tB\x19\x92?\x16\x32\x14Virtual machine nameR\x06vmName\x12#\n\x04size\x18\x07 \x01(\x01\x42\x0f\x92?\x0c\x32\nSize (GiB)R\x04size\x12<\n\npowerState\x18\x08 \x01(\tB\x1c\x92?\x19\x32\x17Snapshotted power stateR\npowerState\x12\x30\n\x0c\x65xpiryTimeNs\x18\t \x01(\x03\x42\x0c\x92?\t2\x07\x45xpiresR\x0c\x65xpiryTimeNs\x12\x32\n\x0b\x63onsistency\x18\x0c \x01(\tB\x10\x92?\r2\x0b\x43onsistencyR\x0b\x63onsistency\x12$\n\x06vmType\x18\r \x01(\tB\x0c\x92?\t2\x07VM typeR\x06vmType\x12,\n\tdatastore\x18\x0e \x01(\tB\x0e\x92?\x0b\x32\tDatastoreR\tdatastore:\x1b\x92?\x18\x42\x16\n\x14VM snapshot instance\"\x82\x03\n\nGetRequest\x12(\n\x02id\x18\x01 \x01(\tB\x18\x92?\x15*\x02\x18\x01\x32\x0fVM snapshot ID.R\x02id\x12\"\n\x04vmId\x18\x02 \x01(\tB\x0e\x92?\x0b*\x02\x10\x01\x32\x05VM IDR\x04vmId\x12t\n\tdatastore\x18\x03 \x01(\tBV\x92?S*\x02\x10\x01\x32MName of the datastore in which the VM was present when the snapshot was takenR\tdatastore\x12\x44\n\x08maxCount\x18\x04 \x01(\rB(\x92?%*\x02\x10\x01\x32\x1fMax number of snapshots to showR\x08maxCount\x12G\n\x06\x63ookie\x18\x05 \x01(\tB/\x92?,*\x02\x10\x01\x32&Cookie to use for request continuationR\x06\x63ookie:!\x92?\x1e\x42\x1c\n\x1aRequest to get VM snapshot\"\x8f\x02\n\x0bGetResponse\x12Z\n\x08snapshot\x18\x01 \x03(\x0b\x32\x1e.da.api.vms.snapshots.SnapshotB\x1e\x92?\x1b\x32\x19Virtual machine SnapshotsR\x08snapshot\x12;\n\x07hasMore\x18\x02 \x02(\x08\x42!\x92?\x1e\x32\x1cWhether there are more itemsR\x07hasMore\x12\x43\n\x06\x63ookie\x18\x03 \x01(\tB+\x92?(2&Cookie to use for request continuationR\x06\x63ookie:\"\x92?\x1f\x42\x1d\n\x1bResponse to get VM snapshot\"\xac\x02\n\x0c\x43loneRequest\x12(\n\x02id\x18\x01 \x01(\tB\x18\x92?\x15*\x02\x18\x01\x32\x0fVM snapshot ID.R\x02id\x12\x31\n\x07newName\x18\x02 \x02(\tB\x17\x92?\x14\x32\x12Name for the cloneR\x07newName\x12\x99\x01\n\x14\x64\x65stinationDatastore\x18\x03 \x01(\tBe\x92?b2`Name of the destination datastore. If unspecified, the VM will be cloned to the source datastoreR\x14\x64\x65stinationDatastore:#\x92? B\x1e\n\x1cRequest to clone VM snapshot\"\xa4\x02\n\x10ReplicateRequest\x12(\n\x02id\x18\x01 \x01(\tB\x18\x92?\x15*\x02\x18\x01\x32\x0fVM snapshot ID.R\x02id\x12G\n\x0freplicaSiteName\x18\x02 \x02(\tB\x1d\x92?\x1a\x32\x18Name of the replica siteR\x0freplicaSiteName\x12t\n\tretention\x18\x03 \x01(\tBV\x92?S2QRetention for replicated snapshot. Use \\\'forever\\\' to retain the replica forever.R\tretention:\'\x92?$B\"\n Request to replicate VM snapshot2\xb7\x08\n\x0cVmsSnapshots\x12\xa8\x01\n\x03get\x12 .da.api.vms.snapshots.GetRequest\x1a!.da.api.vms.snapshots.GetResponse\"\\\x92?Y\x12\x16\n\x14\x44\x61\x45xceptionFileNoent\"?\n\x05/{id}\x10\x00\"2Gets information about a virtual machine snapshots(\x00\x12\x87\x04\n\treplicate\x12&.da.api.vms.snapshots.ReplicateRequest\x1a\x14.da.api.TaskResponse\"\xbb\x03\x92?\xb7\x03\x12\xf8\x02\n\x14\x44\x61\x45xceptionFileNoent\n\x12\x44\x61\x45xceptionNoSpace\n\x14\x44\x61\x45xceptionFileStale\n\"DaExceptionReplDisabledReplicaSite\n\"DaExceptionReplUnpairedReplicaSite\n!DaExceptionReplRevokedReplicaSite\n%DaExceptionReplCriticalDstReplicaSite\n%DaExceptionReplCriticalSrcReplicaSite\n\x1b\x44\x61\x45xceptionReplTooManyTasks\n\x1f\x44\x61\x45xceptionSnapTooManySnapsInPg\n\x1e\x44\x61\x45xceptionReplSnapUnavailable\n\x1f\x44\x61\x45xceptionReplSnapIncompatible\":\n\x0f/{id}/replicate\x10\x02\"#Replicate virtual machine snapshots(\x01\x12\xac\x02\n\x05\x63lone\x12\".da.api.vms.snapshots.CloneRequest\x1a\x14.da.api.TaskResponse\"\xe8\x01\x92?\xe4\x01\x12\xb7\x01\n\x14\x44\x61\x45xceptionFileNoent\n\x16\x44\x61\x45xceptionNameTooLong\n\x14\x44\x61\x45xceptionFileExist\n\x12\x44\x61\x45xceptionNoSpace\n\x1c\x44\x61\x45xceptionDatastoreNotFound\n\x1e\x44\x61\x45xceptionDatastoreNotMounted\n\x1f\x44\x61\x45xceptionReplaceVSSMetaFailed\"(\n\x0b/{id}/clone\x10\x02\"\x15\x43lone from a snapshot(\x01\x1a\x43\x92?@\x1a>\n\x11/v1/vms-snapshots\x12)APIs related to virtual machine snapshotsB\x03\x90\x01\x01')
    ,
    dependencies=[IDL_dot_Protos_dot_Extensions_dot_CustomOptions__pb2.DESCRIPTOR,SysMgmt_dot_Api_dot_IDL_dot_Main_dot_Common__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_SNAPSHOT = _descriptor.Descriptor(
    name='Snapshot',
    full_name='da.api.vms.snapshots.Snapshot',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='id', full_name='da.api.vms.snapshots.Snapshot.id', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0352\033Virtual machine snapshot ID'))),
        _descriptor.FieldDescriptor(
            name='name', full_name='da.api.vms.snapshots.Snapshot.name', index=1,
            number=2, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0372\035Virtual machine snapshot name'))),
        _descriptor.FieldDescriptor(
            name='timestamp', full_name='da.api.vms.snapshots.Snapshot.timestamp', index=2,
            number=3, type=4, cpp_type=4, label=1,
            has_default_value=False, default_value=0,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?(2&Timestamp when this snapshot was taken'))),
        _descriptor.FieldDescriptor(
            name='triggerType', full_name='da.api.vms.snapshots.Snapshot.triggerType', index=3,
            number=4, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\"2 Trigger. e.g. automatic, manual.'))),
        _descriptor.FieldDescriptor(
            name='vmId', full_name='da.api.vms.snapshots.Snapshot.vmId', index=4,
            number=5, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0342\032Virtual machine identifier'))),
        _descriptor.FieldDescriptor(
            name='vmName', full_name='da.api.vms.snapshots.Snapshot.vmName', index=5,
            number=6, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0262\024Virtual machine name'))),
        _descriptor.FieldDescriptor(
            name='size', full_name='da.api.vms.snapshots.Snapshot.size', index=6,
            number=7, type=1, cpp_type=5, label=1,
            has_default_value=False, default_value=float(0),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0142\nSize (GiB)'))),
        _descriptor.FieldDescriptor(
            name='powerState', full_name='da.api.vms.snapshots.Snapshot.powerState', index=7,
            number=8, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0312\027Snapshotted power state'))),
        _descriptor.FieldDescriptor(
            name='expiryTimeNs', full_name='da.api.vms.snapshots.Snapshot.expiryTimeNs', index=8,
            number=9, type=3, cpp_type=2, label=1,
            has_default_value=False, default_value=0,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\t2\007Expires'))),
        _descriptor.FieldDescriptor(
            name='consistency', full_name='da.api.vms.snapshots.Snapshot.consistency', index=9,
            number=12, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\r2\013Consistency'))),
        _descriptor.FieldDescriptor(
            name='vmType', full_name='da.api.vms.snapshots.Snapshot.vmType', index=10,
            number=13, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\t2\007VM type'))),
        _descriptor.FieldDescriptor(
            name='datastore', full_name='da.api.vms.snapshots.Snapshot.datastore', index=11,
            number=14, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0132\tDatastore'))),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\030B\026\n\024VM snapshot instance')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=126,
    serialized_end=808,
)


_GETREQUEST = _descriptor.Descriptor(
    name='GetRequest',
    full_name='da.api.vms.snapshots.GetRequest',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='id', full_name='da.api.vms.snapshots.GetRequest.id', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\025*\002\030\0012\017VM snapshot ID.'))),
        _descriptor.FieldDescriptor(
            name='vmId', full_name='da.api.vms.snapshots.GetRequest.vmId', index=1,
            number=2, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\013*\002\020\0012\005VM ID'))),
        _descriptor.FieldDescriptor(
            name='datastore', full_name='da.api.vms.snapshots.GetRequest.datastore', index=2,
            number=3, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?S*\002\020\0012MName of the datastore in which the VM was present when the snapshot was taken'))),
        _descriptor.FieldDescriptor(
            name='maxCount', full_name='da.api.vms.snapshots.GetRequest.maxCount', index=3,
            number=4, type=13, cpp_type=3, label=1,
            has_default_value=False, default_value=0,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?%*\002\020\0012\037Max number of snapshots to show'))),
        _descriptor.FieldDescriptor(
            name='cookie', full_name='da.api.vms.snapshots.GetRequest.cookie', index=4,
            number=5, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?,*\002\020\0012&Cookie to use for request continuation'))),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\036B\034\n\032Request to get VM snapshot')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=811,
    serialized_end=1197,
)


_GETRESPONSE = _descriptor.Descriptor(
    name='GetResponse',
    full_name='da.api.vms.snapshots.GetResponse',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='snapshot', full_name='da.api.vms.snapshots.GetResponse.snapshot', index=0,
            number=1, type=11, cpp_type=10, label=3,
            has_default_value=False, default_value=[],
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0332\031Virtual machine Snapshots'))),
        _descriptor.FieldDescriptor(
            name='hasMore', full_name='da.api.vms.snapshots.GetResponse.hasMore', index=1,
            number=2, type=8, cpp_type=7, label=2,
            has_default_value=False, default_value=False,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0362\034Whether there are more items'))),
        _descriptor.FieldDescriptor(
            name='cookie', full_name='da.api.vms.snapshots.GetResponse.cookie', index=2,
            number=3, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?(2&Cookie to use for request continuation'))),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\037B\035\n\033Response to get VM snapshot')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=1200,
    serialized_end=1471,
)


_CLONEREQUEST = _descriptor.Descriptor(
    name='CloneRequest',
    full_name='da.api.vms.snapshots.CloneRequest',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='id', full_name='da.api.vms.snapshots.CloneRequest.id', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\025*\002\030\0012\017VM snapshot ID.'))),
        _descriptor.FieldDescriptor(
            name='newName', full_name='da.api.vms.snapshots.CloneRequest.newName', index=1,
            number=2, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0242\022Name for the clone'))),
        _descriptor.FieldDescriptor(
            name='destinationDatastore', full_name='da.api.vms.snapshots.CloneRequest.destinationDatastore', index=2,
            number=3, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?b2`Name of the destination datastore. If unspecified, the VM will be cloned to the source datastore'))),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222? B\036\n\034Request to clone VM snapshot')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=1474,
    serialized_end=1774,
)


_REPLICATEREQUEST = _descriptor.Descriptor(
    name='ReplicateRequest',
    full_name='da.api.vms.snapshots.ReplicateRequest',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='id', full_name='da.api.vms.snapshots.ReplicateRequest.id', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\025*\002\030\0012\017VM snapshot ID.'))),
        _descriptor.FieldDescriptor(
            name='replicaSiteName', full_name='da.api.vms.snapshots.ReplicateRequest.replicaSiteName', index=1,
            number=2, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0322\030Name of the replica site'))),
        _descriptor.FieldDescriptor(
            name='retention', full_name='da.api.vms.snapshots.ReplicateRequest.retention', index=2,
            number=3, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?S2QRetention for replicated snapshot. Use \\\'forever\\\' to retain the replica forever.'))),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?$B\"\n Request to replicate VM snapshot')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=1777,
    serialized_end=2069,
)

_GETRESPONSE.fields_by_name['snapshot'].message_type = _SNAPSHOT
DESCRIPTOR.message_types_by_name['Snapshot'] = _SNAPSHOT
DESCRIPTOR.message_types_by_name['GetRequest'] = _GETREQUEST
DESCRIPTOR.message_types_by_name['GetResponse'] = _GETRESPONSE
DESCRIPTOR.message_types_by_name['CloneRequest'] = _CLONEREQUEST
DESCRIPTOR.message_types_by_name['ReplicateRequest'] = _REPLICATEREQUEST

Snapshot = _reflection.GeneratedProtocolMessageType('Snapshot', (_message.Message,), dict(
    DESCRIPTOR = _SNAPSHOT,
    __module__ = 'ApiVmsSnapshots_pb2'
    # @@protoc_insertion_point(class_scope:da.api.vms.snapshots.Snapshot)
    ))
_sym_db.RegisterMessage(Snapshot)

GetRequest = _reflection.GeneratedProtocolMessageType('GetRequest', (_message.Message,), dict(
    DESCRIPTOR = _GETREQUEST,
    __module__ = 'ApiVmsSnapshots_pb2'
    # @@protoc_insertion_point(class_scope:da.api.vms.snapshots.GetRequest)
    ))
_sym_db.RegisterMessage(GetRequest)

GetResponse = _reflection.GeneratedProtocolMessageType('GetResponse', (_message.Message,), dict(
    DESCRIPTOR = _GETRESPONSE,
    __module__ = 'ApiVmsSnapshots_pb2'
    # @@protoc_insertion_point(class_scope:da.api.vms.snapshots.GetResponse)
    ))
_sym_db.RegisterMessage(GetResponse)

CloneRequest = _reflection.GeneratedProtocolMessageType('CloneRequest', (_message.Message,), dict(
    DESCRIPTOR = _CLONEREQUEST,
    __module__ = 'ApiVmsSnapshots_pb2'
    # @@protoc_insertion_point(class_scope:da.api.vms.snapshots.CloneRequest)
    ))
_sym_db.RegisterMessage(CloneRequest)

ReplicateRequest = _reflection.GeneratedProtocolMessageType('ReplicateRequest', (_message.Message,), dict(
    DESCRIPTOR = _REPLICATEREQUEST,
    __module__ = 'ApiVmsSnapshots_pb2'
    # @@protoc_insertion_point(class_scope:da.api.vms.snapshots.ReplicateRequest)
    ))
_sym_db.RegisterMessage(ReplicateRequest)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\220\001\001'))
_SNAPSHOT.fields_by_name['id'].has_options = True
_SNAPSHOT.fields_by_name['id']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0352\033Virtual machine snapshot ID'))
_SNAPSHOT.fields_by_name['name'].has_options = True
_SNAPSHOT.fields_by_name['name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0372\035Virtual machine snapshot name'))
_SNAPSHOT.fields_by_name['timestamp'].has_options = True
_SNAPSHOT.fields_by_name['timestamp']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?(2&Timestamp when this snapshot was taken'))
_SNAPSHOT.fields_by_name['triggerType'].has_options = True
_SNAPSHOT.fields_by_name['triggerType']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\"2 Trigger. e.g. automatic, manual.'))
_SNAPSHOT.fields_by_name['vmId'].has_options = True
_SNAPSHOT.fields_by_name['vmId']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0342\032Virtual machine identifier'))
_SNAPSHOT.fields_by_name['vmName'].has_options = True
_SNAPSHOT.fields_by_name['vmName']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0262\024Virtual machine name'))
_SNAPSHOT.fields_by_name['size'].has_options = True
_SNAPSHOT.fields_by_name['size']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0142\nSize (GiB)'))
_SNAPSHOT.fields_by_name['powerState'].has_options = True
_SNAPSHOT.fields_by_name['powerState']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0312\027Snapshotted power state'))
_SNAPSHOT.fields_by_name['expiryTimeNs'].has_options = True
_SNAPSHOT.fields_by_name['expiryTimeNs']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\t2\007Expires'))
_SNAPSHOT.fields_by_name['consistency'].has_options = True
_SNAPSHOT.fields_by_name['consistency']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\r2\013Consistency'))
_SNAPSHOT.fields_by_name['vmType'].has_options = True
_SNAPSHOT.fields_by_name['vmType']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\t2\007VM type'))
_SNAPSHOT.fields_by_name['datastore'].has_options = True
_SNAPSHOT.fields_by_name['datastore']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0132\tDatastore'))
_SNAPSHOT.has_options = True
_SNAPSHOT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\030B\026\n\024VM snapshot instance'))
_GETREQUEST.fields_by_name['id'].has_options = True
_GETREQUEST.fields_by_name['id']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\025*\002\030\0012\017VM snapshot ID.'))
_GETREQUEST.fields_by_name['vmId'].has_options = True
_GETREQUEST.fields_by_name['vmId']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\013*\002\020\0012\005VM ID'))
_GETREQUEST.fields_by_name['datastore'].has_options = True
_GETREQUEST.fields_by_name['datastore']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?S*\002\020\0012MName of the datastore in which the VM was present when the snapshot was taken'))
_GETREQUEST.fields_by_name['maxCount'].has_options = True
_GETREQUEST.fields_by_name['maxCount']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?%*\002\020\0012\037Max number of snapshots to show'))
_GETREQUEST.fields_by_name['cookie'].has_options = True
_GETREQUEST.fields_by_name['cookie']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?,*\002\020\0012&Cookie to use for request continuation'))
_GETREQUEST.has_options = True
_GETREQUEST._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\036B\034\n\032Request to get VM snapshot'))
_GETRESPONSE.fields_by_name['snapshot'].has_options = True
_GETRESPONSE.fields_by_name['snapshot']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0332\031Virtual machine Snapshots'))
_GETRESPONSE.fields_by_name['hasMore'].has_options = True
_GETRESPONSE.fields_by_name['hasMore']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0362\034Whether there are more items'))
_GETRESPONSE.fields_by_name['cookie'].has_options = True
_GETRESPONSE.fields_by_name['cookie']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?(2&Cookie to use for request continuation'))
_GETRESPONSE.has_options = True
_GETRESPONSE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\037B\035\n\033Response to get VM snapshot'))
_CLONEREQUEST.fields_by_name['id'].has_options = True
_CLONEREQUEST.fields_by_name['id']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\025*\002\030\0012\017VM snapshot ID.'))
_CLONEREQUEST.fields_by_name['newName'].has_options = True
_CLONEREQUEST.fields_by_name['newName']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0242\022Name for the clone'))
_CLONEREQUEST.fields_by_name['destinationDatastore'].has_options = True
_CLONEREQUEST.fields_by_name['destinationDatastore']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?b2`Name of the destination datastore. If unspecified, the VM will be cloned to the source datastore'))
_CLONEREQUEST.has_options = True
_CLONEREQUEST._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222? B\036\n\034Request to clone VM snapshot'))
_REPLICATEREQUEST.fields_by_name['id'].has_options = True
_REPLICATEREQUEST.fields_by_name['id']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\025*\002\030\0012\017VM snapshot ID.'))
_REPLICATEREQUEST.fields_by_name['replicaSiteName'].has_options = True
_REPLICATEREQUEST.fields_by_name['replicaSiteName']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0322\030Name of the replica site'))
_REPLICATEREQUEST.fields_by_name['retention'].has_options = True
_REPLICATEREQUEST.fields_by_name['retention']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?S2QRetention for replicated snapshot. Use \\\'forever\\\' to retain the replica forever.'))
_REPLICATEREQUEST.has_options = True
_REPLICATEREQUEST._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?$B\"\n Request to replicate VM snapshot'))

_VMSSNAPSHOTS = _descriptor.ServiceDescriptor(
    name='VmsSnapshots',
    full_name='da.api.vms.snapshots.VmsSnapshots',
    file=DESCRIPTOR,
    index=0,
    options=_descriptor._ParseOptions(descriptor_pb2.ServiceOptions(), _b('\222?@\032>\n\021/v1/vms-snapshots\022)APIs related to virtual machine snapshots')),
    serialized_start=2072,
    serialized_end=3151,
    methods=[
    _descriptor.MethodDescriptor(
        name='get',
        full_name='da.api.vms.snapshots.VmsSnapshots.get',
        index=0,
        containing_service=None,
        input_type=_GETREQUEST,
        output_type=_GETRESPONSE,
        options=_descriptor._ParseOptions(descriptor_pb2.MethodOptions(), _b('\222?Y\022\026\n\024DaExceptionFileNoent\"?\n\005/{id}\020\000\"2Gets information about a virtual machine snapshots(\000')),
    ),
    _descriptor.MethodDescriptor(
        name='replicate',
        full_name='da.api.vms.snapshots.VmsSnapshots.replicate',
        index=1,
        containing_service=None,
        input_type=_REPLICATEREQUEST,
        output_type=SysMgmt_dot_Api_dot_IDL_dot_Main_dot_Common__pb2._TASKRESPONSE,
        options=_descriptor._ParseOptions(descriptor_pb2.MethodOptions(), _b('\222?\267\003\022\370\002\n\024DaExceptionFileNoent\n\022DaExceptionNoSpace\n\024DaExceptionFileStale\n\"DaExceptionReplDisabledReplicaSite\n\"DaExceptionReplUnpairedReplicaSite\n!DaExceptionReplRevokedReplicaSite\n%DaExceptionReplCriticalDstReplicaSite\n%DaExceptionReplCriticalSrcReplicaSite\n\033DaExceptionReplTooManyTasks\n\037DaExceptionSnapTooManySnapsInPg\n\036DaExceptionReplSnapUnavailable\n\037DaExceptionReplSnapIncompatible\":\n\017/{id}/replicate\020\002\"#Replicate virtual machine snapshots(\001')),
    ),
    _descriptor.MethodDescriptor(
        name='clone',
        full_name='da.api.vms.snapshots.VmsSnapshots.clone',
        index=2,
        containing_service=None,
        input_type=_CLONEREQUEST,
        output_type=SysMgmt_dot_Api_dot_IDL_dot_Main_dot_Common__pb2._TASKRESPONSE,
        options=_descriptor._ParseOptions(descriptor_pb2.MethodOptions(), _b('\222?\344\001\022\267\001\n\024DaExceptionFileNoent\n\026DaExceptionNameTooLong\n\024DaExceptionFileExist\n\022DaExceptionNoSpace\n\034DaExceptionDatastoreNotFound\n\036DaExceptionDatastoreNotMounted\n\037DaExceptionReplaceVSSMetaFailed\"(\n\013/{id}/clone\020\002\"\025Clone from a snapshot(\001')),
    ),
])

VmsSnapshots = service_reflection.GeneratedServiceType('VmsSnapshots', (_service.Service,), dict(
    DESCRIPTOR = _VMSSNAPSHOTS,
    __module__ = 'ApiVmsSnapshots_pb2'
    ))

VmsSnapshots_Stub = service_reflection.GeneratedServiceStubType('VmsSnapshots_Stub', (VmsSnapshots,), dict(
    DESCRIPTOR = _VMSSNAPSHOTS,
    __module__ = 'ApiVmsSnapshots_pb2'
    ))


# @@protoc_insertion_point(module_scope)
