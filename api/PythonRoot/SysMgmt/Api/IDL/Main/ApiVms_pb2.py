# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ApiVms.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import service as _service
from google.protobuf import service_reflection
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from IDL.Protos.Extensions import CustomOptions_pb2 as IDL_dot_Protos_dot_Extensions_dot_CustomOptions__pb2
from SysMgmt.Api.IDL.Main import Common_pb2 as SysMgmt_dot_Api_dot_IDL_dot_Main_dot_Common__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
    name='ApiVms.proto',
    package='da.api.vms',
    syntax='proto2',
    serialized_pb=_b('\n\x0c\x41piVms.proto\x12\nda.api.vms\x1a)IDL/Protos/Extensions/CustomOptions.proto\x1a!SysMgmt/Api/IDL/Main/Common.proto\"\x8a\x07\n\nGetRequest\x12\x1f\n\x02id\x18\x01 \x01(\tB\x0f\x92?\x0c*\x02\x18\x01\x32\x06VM ID.R\x02id\x12\xb1\x03\n\x04path\x18\x02 \x01(\tB\x9c\x03\x92?\x98\x03*\x02\x10\x01\x32\x91\x03\x44VX datastore path to the virtual machine configuration file. \\nFor vSphere ESXi, the path includes the vmx file name and extension. The path does not include the ESXi mount point prefix (/vmfs/volumes/<dvx-datastore-label>); it begins with the slash (/) following the DVX datastore label. \\nFor example, the DVX datastore path for \\\'/vmfs/volumes/dvx-Datastore1/vm01/vm01.vmx\\\' is \\\'/vm01/vm01.vmx\\\'.R\x04path\x12Y\n\tdatastore\x18\x03 \x01(\tB;\x92?8*\x02\x10\x01\x32\x32Name of datastore from which VMs are to be listed.R\tdatastore\x12O\n\x0bnamePattern\x18\x04 \x03(\tB-\x92?**\x02\x10\x01\x32$VM name patterns. Use * as wildcard.R\x0bnamePattern\x12W\n\x0binSnapstore\x18\x05 \x01(\x08\x42\x35\x92?2*\x02\x10\x01\x32,Show VMs in the Snapstore. Default is False.R\x0binSnapstore\x12>\n\x08maxCount\x18\x06 \x01(\rB\"\x92?\x1f*\x02\x10\x01\x32\x19Max number of VMs to get.R\x08maxCount\x12H\n\x06\x63ookie\x18\x07 \x01(\tB0\x92?-*\x02\x10\x01\x32\'Cookie to use for request continuation.R\x06\x63ookie:\x18\x92?\x15\x42\x13\n\x11Request to get VM\"\xc4\x04\n\x02VM\x12\x30\n\x02id\x18\x01 \x02(\tB \x92?\x1d\x32\x1bVirtual machine identifier.R\x02id\x12\x35\n\x04name\x18\x02 \x02(\tB!\x92?\x1e\x32\x1cName of the virtual machine.R\x04name\x12\x35\n\x04path\x18\x03 \x02(\tB!\x92?\x1e\x32\x1cPath to the virtual machine.R\x04path\x12-\n\tdatastore\x18\x04 \x03(\tB\x0f\x92?\x0c\x32\nDatastoresR\tdatastore\x12:\n\x04size\x18\x05 \x01(\x01\x42&\x92?#2!Size of the virtual machine (GiB)R\x04size\x12:\n\x04type\x18\x06 \x01(\tB&\x92?#2!VM type. eg: VMWARE, KVM, DOCKER.R\x04type\x12\x44\n\x04live\x18\x07 \x01(\x08\x42\x30\x92?-2+Virtual machine is present in the datastoreR\x04live\x12G\n\npowerState\x18\x08 \x01(\tB\'\x92?$2\"Power state of the virtual machineR\npowerState\x12T\n\x11vmIsDvxCompatible\x18\t \x01(\x08\x42&\x92?#2!Virtual machine DVX compatibilityR\x11vmIsDvxCompatible:\x12\x92?\x0f\x42\r\n\x0bVM instance\"\xdb\x01\n\x0bGetResponse\x12-\n\x02vm\x18\x01 \x03(\x0b\x32\x0e.da.api.vms.VMB\r\x92?\n2\x08VM list.R\x02vm\x12<\n\x07hasMore\x18\x02 \x02(\x08\x42\"\x92?\x1f\x32\x1dWhether there are more items.R\x07hasMore\x12\x44\n\x06\x63ookie\x18\x03 \x01(\tB,\x92?)2\'Cookie to use for request continuation.R\x06\x63ookie:\x19\x92?\x16\x42\x14\n\x12Response to get VM\"\x93\x06\n\x13TakeSnapshotRequest\x12\x1f\n\x02id\x18\x01 \x01(\tB\x0f\x92?\x0c*\x02\x18\x01\x32\x06VM ID.R\x02id\x12?\n\x0csnapshotName\x18\x02 \x02(\tB\x1b\x92?\x18\x32\x16Name for the snapshot.R\x0csnapshotName\x12\xad\x01\n\tretention\x18\x03 \x02(\tB\x8e\x01\x92?\x8a\x01\x32\x87\x01Retain this snapshot for the specified amount of time (in seconds) from current time. \\nUse \\\'forever\\\' to retain the snapshot forever.R\tretention\x12\xe1\x02\n\nexpiration\x18\x04 \x01(\tB\xc0\x02\x92?\xbc\x02\x32\xb9\x02\x45xpiration for this snapshot \\nYou can specify the time value in 24 hour date-time format (yyyy-MM-ddTHH:mm:ss) up to a second precision. \\nSome examples are: 2014-02-08, 2014-02-08T13:11:37\\nUnspecified time units are interpreted as zeros, so a day specification of 2014-02-08 indicates the beginning of the day.R\nexpiration\x12]\n\rappConsistent\x18\x05 \x01(\x08\x42\x37\x92?422Application consistent snapshot. Default is False.R\rappConsistent:\'\x92?$B\"\n Request to take snapshot of a VM\"\xf9\x02\n\x0c\x43loneRequest\x12\x1f\n\x02id\x18\x01 \x01(\tB\x0f\x92?\x0c*\x02\x18\x01\x32\x06VM ID.R\x02id\x12\x31\n\x07newName\x18\x02 \x02(\tB\x17\x92?\x14\x32\x12Name for the cloneR\x07newName\x12Z\n\rappConsistent\x18\x03 \x01(\x08\x42\x34\x92?12/Application consistent clone. Default is False.R\rappConsistent\x12\x9a\x01\n\x14\x64\x65stinationDatastore\x18\x04 \x01(\tBf\x92?c2aName of the destination datastore. If unspecified, the VM will be cloned to the source datastore.R\x14\x64\x65stinationDatastore:\x1c\x92?\x19\x42\x17\n\x15Request to clone a VM2\xd7\x06\n\x03Vms\x12\x95\x02\n\x03get\x12\x16.da.api.vms.GetRequest\x1a\x17.da.api.vms.GetResponse\"\xdc\x01\x92?\xd8\x01\x12\x9e\x01\n\x1c\x44\x61\x45xceptionDatastoreDisabled\n\x1c\x44\x61\x45xceptionDatastoreNotFound\n\x14\x44\x61\x45xceptionFileNoent\n\x1b\x44\x61\x45xceptionVmParsingFailure\n\x14\x44\x61\x45xceptionFileStale\n\x17\x44\x61\x45xceptionShuttingDown\"5\n\x05/{id}\x10\x00\"(Gets information about a virtual machine(\x00\x12\xe6\x01\n\rtake_snapshot\x12\x1f.da.api.vms.TakeSnapshotRequest\x1a\x14.da.api.TaskResponse\"\x9d\x01\x92?\x99\x01\x12\x61\n\x14\x44\x61\x45xceptionFileNoent\n\x12\x44\x61\x45xceptionNoSpace\n\x1a\x44\x61\x45xceptionInvalidArgument\n\x19\x44\x61\x45xceptionVmDoesNotExist\"4\n\x13/{id}/take-snapshot\x10\x02\"\x19Take a snapshot of the VM(\x01\x12\x9c\x02\n\x05\x63lone\x12\x18.da.api.vms.CloneRequest\x1a\x14.da.api.TaskResponse\"\xe2\x01\x92?\xde\x01\x12\xbc\x01\n\x14\x44\x61\x45xceptionFileNoent\n\x16\x44\x61\x45xceptionNameTooLong\n\x12\x44\x61\x45xceptionNoSpace\n\x19\x44\x61\x45xceptionVmDoesNotExist\n\x1c\x44\x61\x45xceptionDatastoreNotFound\n\x1e\x44\x61\x45xceptionDatastoreNotMounted\n\x1f\x44\x61\x45xceptionReplaceVSSMetaFailed\"\x1d\n\x0b/{id}/clone\x10\x02\"\nClone a VM(\x01\x1a\x30\x92?-\x1a+\n\x07/v1/vms\x12 APIs related to virtual machinesB\x03\x90\x01\x01')
    ,
    dependencies=[IDL_dot_Protos_dot_Extensions_dot_CustomOptions__pb2.DESCRIPTOR,SysMgmt_dot_Api_dot_IDL_dot_Main_dot_Common__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_GETREQUEST = _descriptor.Descriptor(
    name='GetRequest',
    full_name='da.api.vms.GetRequest',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='id', full_name='da.api.vms.GetRequest.id', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\014*\002\030\0012\006VM ID.'))),
        _descriptor.FieldDescriptor(
            name='path', full_name='da.api.vms.GetRequest.path', index=1,
            number=2, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\230\003*\002\020\0012\221\003DVX datastore path to the virtual machine configuration file. \\nFor vSphere ESXi, the path includes the vmx file name and extension. The path does not include the ESXi mount point prefix (/vmfs/volumes/<dvx-datastore-label>); it begins with the slash (/) following the DVX datastore label. \\nFor example, the DVX datastore path for \\\'/vmfs/volumes/dvx-Datastore1/vm01/vm01.vmx\\\' is \\\'/vm01/vm01.vmx\\\'.'))),
        _descriptor.FieldDescriptor(
            name='datastore', full_name='da.api.vms.GetRequest.datastore', index=2,
            number=3, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?8*\002\020\00122Name of datastore from which VMs are to be listed.'))),
        _descriptor.FieldDescriptor(
            name='namePattern', full_name='da.api.vms.GetRequest.namePattern', index=3,
            number=4, type=9, cpp_type=9, label=3,
            has_default_value=False, default_value=[],
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?**\002\020\0012$VM name patterns. Use * as wildcard.'))),
        _descriptor.FieldDescriptor(
            name='inSnapstore', full_name='da.api.vms.GetRequest.inSnapstore', index=4,
            number=5, type=8, cpp_type=7, label=1,
            has_default_value=False, default_value=False,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?2*\002\020\0012,Show VMs in the Snapstore. Default is False.'))),
        _descriptor.FieldDescriptor(
            name='maxCount', full_name='da.api.vms.GetRequest.maxCount', index=5,
            number=6, type=13, cpp_type=3, label=1,
            has_default_value=False, default_value=0,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\037*\002\020\0012\031Max number of VMs to get.'))),
        _descriptor.FieldDescriptor(
            name='cookie', full_name='da.api.vms.GetRequest.cookie', index=6,
            number=7, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?-*\002\020\0012\'Cookie to use for request continuation.'))),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\025B\023\n\021Request to get VM')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=107,
    serialized_end=1013,
)


_VM = _descriptor.Descriptor(
    name='VM',
    full_name='da.api.vms.VM',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='id', full_name='da.api.vms.VM.id', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0352\033Virtual machine identifier.'))),
        _descriptor.FieldDescriptor(
            name='name', full_name='da.api.vms.VM.name', index=1,
            number=2, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0362\034Name of the virtual machine.'))),
        _descriptor.FieldDescriptor(
            name='path', full_name='da.api.vms.VM.path', index=2,
            number=3, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0362\034Path to the virtual machine.'))),
        _descriptor.FieldDescriptor(
            name='datastore', full_name='da.api.vms.VM.datastore', index=3,
            number=4, type=9, cpp_type=9, label=3,
            has_default_value=False, default_value=[],
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0142\nDatastores'))),
        _descriptor.FieldDescriptor(
            name='size', full_name='da.api.vms.VM.size', index=4,
            number=5, type=1, cpp_type=5, label=1,
            has_default_value=False, default_value=float(0),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?#2!Size of the virtual machine (GiB)'))),
        _descriptor.FieldDescriptor(
            name='type', full_name='da.api.vms.VM.type', index=5,
            number=6, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?#2!VM type. eg: VMWARE, KVM, DOCKER.'))),
        _descriptor.FieldDescriptor(
            name='live', full_name='da.api.vms.VM.live', index=6,
            number=7, type=8, cpp_type=7, label=1,
            has_default_value=False, default_value=False,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?-2+Virtual machine is present in the datastore'))),
        _descriptor.FieldDescriptor(
            name='powerState', full_name='da.api.vms.VM.powerState', index=7,
            number=8, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?$2\"Power state of the virtual machine'))),
        _descriptor.FieldDescriptor(
            name='vmIsDvxCompatible', full_name='da.api.vms.VM.vmIsDvxCompatible', index=8,
            number=9, type=8, cpp_type=7, label=1,
            has_default_value=False, default_value=False,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?#2!Virtual machine DVX compatibility'))),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\017B\r\n\013VM instance')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=1016,
    serialized_end=1596,
)


_GETRESPONSE = _descriptor.Descriptor(
    name='GetResponse',
    full_name='da.api.vms.GetResponse',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='vm', full_name='da.api.vms.GetResponse.vm', index=0,
            number=1, type=11, cpp_type=10, label=3,
            has_default_value=False, default_value=[],
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\n2\010VM list.'))),
        _descriptor.FieldDescriptor(
            name='hasMore', full_name='da.api.vms.GetResponse.hasMore', index=1,
            number=2, type=8, cpp_type=7, label=2,
            has_default_value=False, default_value=False,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0372\035Whether there are more items.'))),
        _descriptor.FieldDescriptor(
            name='cookie', full_name='da.api.vms.GetResponse.cookie', index=2,
            number=3, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?)2\'Cookie to use for request continuation.'))),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\026B\024\n\022Response to get VM')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=1599,
    serialized_end=1818,
)


_TAKESNAPSHOTREQUEST = _descriptor.Descriptor(
    name='TakeSnapshotRequest',
    full_name='da.api.vms.TakeSnapshotRequest',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='id', full_name='da.api.vms.TakeSnapshotRequest.id', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\014*\002\030\0012\006VM ID.'))),
        _descriptor.FieldDescriptor(
            name='snapshotName', full_name='da.api.vms.TakeSnapshotRequest.snapshotName', index=1,
            number=2, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0302\026Name for the snapshot.'))),
        _descriptor.FieldDescriptor(
            name='retention', full_name='da.api.vms.TakeSnapshotRequest.retention', index=2,
            number=3, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\212\0012\207\001Retain this snapshot for the specified amount of time (in seconds) from current time. \\nUse \\\'forever\\\' to retain the snapshot forever.'))),
        _descriptor.FieldDescriptor(
            name='expiration', full_name='da.api.vms.TakeSnapshotRequest.expiration', index=3,
            number=4, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\274\0022\271\002Expiration for this snapshot \\nYou can specify the time value in 24 hour date-time format (yyyy-MM-ddTHH:mm:ss) up to a second precision. \\nSome examples are: 2014-02-08, 2014-02-08T13:11:37\\nUnspecified time units are interpreted as zeros, so a day specification of 2014-02-08 indicates the beginning of the day.'))),
        _descriptor.FieldDescriptor(
            name='appConsistent', full_name='da.api.vms.TakeSnapshotRequest.appConsistent', index=4,
            number=5, type=8, cpp_type=7, label=1,
            has_default_value=False, default_value=False,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?422Application consistent snapshot. Default is False.'))),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?$B\"\n Request to take snapshot of a VM')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=1821,
    serialized_end=2608,
)


_CLONEREQUEST = _descriptor.Descriptor(
    name='CloneRequest',
    full_name='da.api.vms.CloneRequest',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='id', full_name='da.api.vms.CloneRequest.id', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\014*\002\030\0012\006VM ID.'))),
        _descriptor.FieldDescriptor(
            name='newName', full_name='da.api.vms.CloneRequest.newName', index=1,
            number=2, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0242\022Name for the clone'))),
        _descriptor.FieldDescriptor(
            name='appConsistent', full_name='da.api.vms.CloneRequest.appConsistent', index=2,
            number=3, type=8, cpp_type=7, label=1,
            has_default_value=False, default_value=False,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?12/Application consistent clone. Default is False.'))),
        _descriptor.FieldDescriptor(
            name='destinationDatastore', full_name='da.api.vms.CloneRequest.destinationDatastore', index=3,
            number=4, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?c2aName of the destination datastore. If unspecified, the VM will be cloned to the source datastore.'))),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\031B\027\n\025Request to clone a VM')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=2611,
    serialized_end=2988,
)

_GETRESPONSE.fields_by_name['vm'].message_type = _VM
DESCRIPTOR.message_types_by_name['GetRequest'] = _GETREQUEST
DESCRIPTOR.message_types_by_name['VM'] = _VM
DESCRIPTOR.message_types_by_name['GetResponse'] = _GETRESPONSE
DESCRIPTOR.message_types_by_name['TakeSnapshotRequest'] = _TAKESNAPSHOTREQUEST
DESCRIPTOR.message_types_by_name['CloneRequest'] = _CLONEREQUEST

GetRequest = _reflection.GeneratedProtocolMessageType('GetRequest', (_message.Message,), dict(
    DESCRIPTOR = _GETREQUEST,
    __module__ = 'ApiVms_pb2'
    # @@protoc_insertion_point(class_scope:da.api.vms.GetRequest)
    ))
_sym_db.RegisterMessage(GetRequest)

VM = _reflection.GeneratedProtocolMessageType('VM', (_message.Message,), dict(
    DESCRIPTOR = _VM,
    __module__ = 'ApiVms_pb2'
    # @@protoc_insertion_point(class_scope:da.api.vms.VM)
    ))
_sym_db.RegisterMessage(VM)

GetResponse = _reflection.GeneratedProtocolMessageType('GetResponse', (_message.Message,), dict(
    DESCRIPTOR = _GETRESPONSE,
    __module__ = 'ApiVms_pb2'
    # @@protoc_insertion_point(class_scope:da.api.vms.GetResponse)
    ))
_sym_db.RegisterMessage(GetResponse)

TakeSnapshotRequest = _reflection.GeneratedProtocolMessageType('TakeSnapshotRequest', (_message.Message,), dict(
    DESCRIPTOR = _TAKESNAPSHOTREQUEST,
    __module__ = 'ApiVms_pb2'
    # @@protoc_insertion_point(class_scope:da.api.vms.TakeSnapshotRequest)
    ))
_sym_db.RegisterMessage(TakeSnapshotRequest)

CloneRequest = _reflection.GeneratedProtocolMessageType('CloneRequest', (_message.Message,), dict(
    DESCRIPTOR = _CLONEREQUEST,
    __module__ = 'ApiVms_pb2'
    # @@protoc_insertion_point(class_scope:da.api.vms.CloneRequest)
    ))
_sym_db.RegisterMessage(CloneRequest)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\220\001\001'))
_GETREQUEST.fields_by_name['id'].has_options = True
_GETREQUEST.fields_by_name['id']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\014*\002\030\0012\006VM ID.'))
_GETREQUEST.fields_by_name['path'].has_options = True
_GETREQUEST.fields_by_name['path']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\230\003*\002\020\0012\221\003DVX datastore path to the virtual machine configuration file. \\nFor vSphere ESXi, the path includes the vmx file name and extension. The path does not include the ESXi mount point prefix (/vmfs/volumes/<dvx-datastore-label>); it begins with the slash (/) following the DVX datastore label. \\nFor example, the DVX datastore path for \\\'/vmfs/volumes/dvx-Datastore1/vm01/vm01.vmx\\\' is \\\'/vm01/vm01.vmx\\\'.'))
_GETREQUEST.fields_by_name['datastore'].has_options = True
_GETREQUEST.fields_by_name['datastore']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?8*\002\020\00122Name of datastore from which VMs are to be listed.'))
_GETREQUEST.fields_by_name['namePattern'].has_options = True
_GETREQUEST.fields_by_name['namePattern']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?**\002\020\0012$VM name patterns. Use * as wildcard.'))
_GETREQUEST.fields_by_name['inSnapstore'].has_options = True
_GETREQUEST.fields_by_name['inSnapstore']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?2*\002\020\0012,Show VMs in the Snapstore. Default is False.'))
_GETREQUEST.fields_by_name['maxCount'].has_options = True
_GETREQUEST.fields_by_name['maxCount']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\037*\002\020\0012\031Max number of VMs to get.'))
_GETREQUEST.fields_by_name['cookie'].has_options = True
_GETREQUEST.fields_by_name['cookie']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?-*\002\020\0012\'Cookie to use for request continuation.'))
_GETREQUEST.has_options = True
_GETREQUEST._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\025B\023\n\021Request to get VM'))
_VM.fields_by_name['id'].has_options = True
_VM.fields_by_name['id']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0352\033Virtual machine identifier.'))
_VM.fields_by_name['name'].has_options = True
_VM.fields_by_name['name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0362\034Name of the virtual machine.'))
_VM.fields_by_name['path'].has_options = True
_VM.fields_by_name['path']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0362\034Path to the virtual machine.'))
_VM.fields_by_name['datastore'].has_options = True
_VM.fields_by_name['datastore']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0142\nDatastores'))
_VM.fields_by_name['size'].has_options = True
_VM.fields_by_name['size']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?#2!Size of the virtual machine (GiB)'))
_VM.fields_by_name['type'].has_options = True
_VM.fields_by_name['type']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?#2!VM type. eg: VMWARE, KVM, DOCKER.'))
_VM.fields_by_name['live'].has_options = True
_VM.fields_by_name['live']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?-2+Virtual machine is present in the datastore'))
_VM.fields_by_name['powerState'].has_options = True
_VM.fields_by_name['powerState']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?$2\"Power state of the virtual machine'))
_VM.fields_by_name['vmIsDvxCompatible'].has_options = True
_VM.fields_by_name['vmIsDvxCompatible']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?#2!Virtual machine DVX compatibility'))
_VM.has_options = True
_VM._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\017B\r\n\013VM instance'))
_GETRESPONSE.fields_by_name['vm'].has_options = True
_GETRESPONSE.fields_by_name['vm']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\n2\010VM list.'))
_GETRESPONSE.fields_by_name['hasMore'].has_options = True
_GETRESPONSE.fields_by_name['hasMore']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0372\035Whether there are more items.'))
_GETRESPONSE.fields_by_name['cookie'].has_options = True
_GETRESPONSE.fields_by_name['cookie']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?)2\'Cookie to use for request continuation.'))
_GETRESPONSE.has_options = True
_GETRESPONSE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\026B\024\n\022Response to get VM'))
_TAKESNAPSHOTREQUEST.fields_by_name['id'].has_options = True
_TAKESNAPSHOTREQUEST.fields_by_name['id']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\014*\002\030\0012\006VM ID.'))
_TAKESNAPSHOTREQUEST.fields_by_name['snapshotName'].has_options = True
_TAKESNAPSHOTREQUEST.fields_by_name['snapshotName']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0302\026Name for the snapshot.'))
_TAKESNAPSHOTREQUEST.fields_by_name['retention'].has_options = True
_TAKESNAPSHOTREQUEST.fields_by_name['retention']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\212\0012\207\001Retain this snapshot for the specified amount of time (in seconds) from current time. \\nUse \\\'forever\\\' to retain the snapshot forever.'))
_TAKESNAPSHOTREQUEST.fields_by_name['expiration'].has_options = True
_TAKESNAPSHOTREQUEST.fields_by_name['expiration']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\274\0022\271\002Expiration for this snapshot \\nYou can specify the time value in 24 hour date-time format (yyyy-MM-ddTHH:mm:ss) up to a second precision. \\nSome examples are: 2014-02-08, 2014-02-08T13:11:37\\nUnspecified time units are interpreted as zeros, so a day specification of 2014-02-08 indicates the beginning of the day.'))
_TAKESNAPSHOTREQUEST.fields_by_name['appConsistent'].has_options = True
_TAKESNAPSHOTREQUEST.fields_by_name['appConsistent']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?422Application consistent snapshot. Default is False.'))
_TAKESNAPSHOTREQUEST.has_options = True
_TAKESNAPSHOTREQUEST._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?$B\"\n Request to take snapshot of a VM'))
_CLONEREQUEST.fields_by_name['id'].has_options = True
_CLONEREQUEST.fields_by_name['id']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\014*\002\030\0012\006VM ID.'))
_CLONEREQUEST.fields_by_name['newName'].has_options = True
_CLONEREQUEST.fields_by_name['newName']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?\0242\022Name for the clone'))
_CLONEREQUEST.fields_by_name['appConsistent'].has_options = True
_CLONEREQUEST.fields_by_name['appConsistent']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?12/Application consistent clone. Default is False.'))
_CLONEREQUEST.fields_by_name['destinationDatastore'].has_options = True
_CLONEREQUEST.fields_by_name['destinationDatastore']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\222?c2aName of the destination datastore. If unspecified, the VM will be cloned to the source datastore.'))
_CLONEREQUEST.has_options = True
_CLONEREQUEST._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\031B\027\n\025Request to clone a VM'))

_VMS = _descriptor.ServiceDescriptor(
    name='Vms',
    full_name='da.api.vms.Vms',
    file=DESCRIPTOR,
    index=0,
    options=_descriptor._ParseOptions(descriptor_pb2.ServiceOptions(), _b('\222?-\032+\n\007/v1/vms\022 APIs related to virtual machines')),
    serialized_start=2991,
    serialized_end=3846,
    methods=[
    _descriptor.MethodDescriptor(
        name='get',
        full_name='da.api.vms.Vms.get',
        index=0,
        containing_service=None,
        input_type=_GETREQUEST,
        output_type=_GETRESPONSE,
        options=_descriptor._ParseOptions(descriptor_pb2.MethodOptions(), _b('\222?\330\001\022\236\001\n\034DaExceptionDatastoreDisabled\n\034DaExceptionDatastoreNotFound\n\024DaExceptionFileNoent\n\033DaExceptionVmParsingFailure\n\024DaExceptionFileStale\n\027DaExceptionShuttingDown\"5\n\005/{id}\020\000\"(Gets information about a virtual machine(\000')),
    ),
    _descriptor.MethodDescriptor(
        name='take_snapshot',
        full_name='da.api.vms.Vms.take_snapshot',
        index=1,
        containing_service=None,
        input_type=_TAKESNAPSHOTREQUEST,
        output_type=SysMgmt_dot_Api_dot_IDL_dot_Main_dot_Common__pb2._TASKRESPONSE,
        options=_descriptor._ParseOptions(descriptor_pb2.MethodOptions(), _b('\222?\231\001\022a\n\024DaExceptionFileNoent\n\022DaExceptionNoSpace\n\032DaExceptionInvalidArgument\n\031DaExceptionVmDoesNotExist\"4\n\023/{id}/take-snapshot\020\002\"\031Take a snapshot of the VM(\001')),
    ),
    _descriptor.MethodDescriptor(
        name='clone',
        full_name='da.api.vms.Vms.clone',
        index=2,
        containing_service=None,
        input_type=_CLONEREQUEST,
        output_type=SysMgmt_dot_Api_dot_IDL_dot_Main_dot_Common__pb2._TASKRESPONSE,
        options=_descriptor._ParseOptions(descriptor_pb2.MethodOptions(), _b('\222?\336\001\022\274\001\n\024DaExceptionFileNoent\n\026DaExceptionNameTooLong\n\022DaExceptionNoSpace\n\031DaExceptionVmDoesNotExist\n\034DaExceptionDatastoreNotFound\n\036DaExceptionDatastoreNotMounted\n\037DaExceptionReplaceVSSMetaFailed\"\035\n\013/{id}/clone\020\002\"\nClone a VM(\001')),
    ),
])

Vms = service_reflection.GeneratedServiceType('Vms', (_service.Service,), dict(
    DESCRIPTOR = _VMS,
    __module__ = 'ApiVms_pb2'
    ))

Vms_Stub = service_reflection.GeneratedServiceStubType('Vms_Stub', (Vms,), dict(
    DESCRIPTOR = _VMS,
    __module__ = 'ApiVms_pb2'
    ))


# @@protoc_insertion_point(module_scope)
