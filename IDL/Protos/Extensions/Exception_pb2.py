# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Exception.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from datrium.exception import DaException
EXCEPTIONS_BY_ERROR_CODE = {}
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from IDL.Protos.Extensions import CustomOptions_pb2 as IDL_dot_Protos_dot_Extensions_dot_CustomOptions__pb2
from IDL.Protos.Extensions import KeyValueTypes_pb2 as IDL_dot_Protos_dot_Extensions_dot_KeyValueTypes__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
    name='Exception.proto',
    package='da.core',
    syntax='proto2',
    serialized_pb=_b('\n\x0f\x45xception.proto\x12\x07\x64\x61.core\x1a)IDL/Protos/Extensions/CustomOptions.proto\x1a)IDL/Protos/Extensions/KeyValueTypes.proto\"\xc6\x01\n\x0f\x44\x61\x45xceptionBase\x12\"\n\nerrorCodes\x18\x01 \x03(\rB\x02\x10\x01R\nerrorCodes\x12\x1a\n\x08\x66ileName\x18\x02 \x01(\tR\x08\x66ileName\x12\x18\n\x07lineNum\x18\x03 \x01(\rR\x07lineNum\x12\x1a\n\x08\x65rrorMsg\x18\x04 \x01(\tR\x08\x65rrorMsg\x12\x31\n\nattributes\x18\x05 \x03(\x0b\x32\x11.da.core.KeyValueR\nattributes:\n\x92?\x07\x12\x05\n\x00\x10\xe8\x07\">\n\x12\x44\x61\x45xceptionChecked:(\x92?%\x12#\n\x0f\x44\x61\x45xceptionBase\x10\xe9\x07\x1a\rChecked Error\"B\n\x14\x44\x61\x45xceptionUnchecked:*\x92?\'\x12%\n\x0f\x44\x61\x45xceptionBase\x10\xea\x07\x1a\x0fUnchecked Error\"C\n\x14\x44\x61\x45xceptionLocalOnly:+\x92?(\x12&\n\x0f\x44\x61\x45xceptionBase\x10\xeb\x07\x1a\x10Local Only Error\"B\n\x13\x44\x61\x45xceptionNotFound:+\x92?(\x12&\n\x14\x44\x61\x45xceptionUnchecked\x10\xcc\x08\x1a\tNot found0\x01\"}\n\x19\x44\x61\x45xceptionObjectNotFound\x12\x1e\n\nnotFoundId\x18\x01 \x02(\tR\nnotFoundId:@\x92?=\x12;\n\x13\x44\x61\x45xceptionNotFound\x10\xcd\x08\x1a\x1dObject {notFoundId} not found(\x01\x30\x01\"S\n\x16\x44\x61\x45xceptionInterrupted:9\x92?6\x12\x34\n\x14\x44\x61\x45xceptionLocalOnly\x10\xce\x08\x1a\x19Operation was interrupted\"7\n\rDaExceptionIo:&\x92?#\x12!\n\x12\x44\x61\x45xceptionChecked\x10\xcf\x08\x1a\x08IO error\"P\n\x15\x44\x61\x45xceptionWouldBlock:7\x92?4\x12\x32\n\x14\x44\x61\x45xceptionLocalOnly\x10\xd0\x08\x1a\x15Operation would block \x01\"G\n\x16\x44\x61\x45xceptionOutOfMemory:-\x92?*\x12(\n\x14\x44\x61\x45xceptionLocalOnly\x10\xd1\x08\x1a\rOut of Memory\"@\n\x0f\x44\x61\x45xceptionBusy:-\x92?*\x12(\n\x14\x44\x61\x45xceptionUnchecked\x10\xd2\x08\x1a\rResource busy\"K\n\x18\x44\x61\x45xceptionAlreadyExists:/\x92?,\x12*\n\x14\x44\x61\x45xceptionUnchecked\x10\xd3\x08\x1a\rObject exists0\x01\"\x89\x01\n\x1a\x44\x61\x45xceptionInvalidArgument\x12\x1a\n\x08\x61rgument\x18\x01 \x01(\tR\x08\x61rgument:O\x92?L\x12J\n\x14\x44\x61\x45xceptionUnchecked\x10\xd4\x08\x1a+An invalid argument {argument} was supplied0\x01\x38\x01\"D\n\x12\x44\x61\x45xceptionNoSpace:.\x92?+\x12)\n\x14\x44\x61\x45xceptionUnchecked\x10\xd5\x08\x1a\x0cOut of space0\x01\"G\n\x14\x44\x61\x45xceptionUnderflow:/\x92?,\x12*\n\x14\x44\x61\x45xceptionUnchecked\x10\xd6\x08\x1a\x0fValue too small\"F\n\x13\x44\x61\x45xceptionOverflow:/\x92?,\x12*\n\x14\x44\x61\x45xceptionUnchecked\x10\xd7\x08\x1a\x0fValue too large\"Q\n\x17\x44\x61\x45xceptionAddressInUse:6\x92?3\x12\x31\n\x14\x44\x61\x45xceptionLocalOnly\x10\xd8\x08\x1a\x16\x41\x64\x64ress already in use\"m\n\x1e\x44\x61\x45xceptionAddressNotAvailable:K\x92?H\x12\x46\n\x14\x44\x61\x45xceptionLocalOnly\x10\xd9\x08\x1a+Non-existent interface or address not local\"S\n\x19\x44\x61\x45xceptionConnectionDown:6\x92?3\x12\x31\n\x14\x44\x61\x45xceptionLocalOnly\x10\xda\x08\x1a\x16\x43onnection was dropped\"U\n\x1d\x44\x61\x45xceptionTooManyConnections:4\x92?1\x12/\n\x14\x44\x61\x45xceptionLocalOnly\x10\xdb\x08\x1a\x14Too many connections\"U\n\x18\x44\x61\x45xceptionConnectFailed:9\x92?6\x12\x34\n\x14\x44\x61\x45xceptionLocalOnly\x10\xdc\x08\x1a\x19\x43onnection request failed\"G\n\x12\x44\x61\x45xceptionTimeout:1\x92?.\x12,\n\x12\x44\x61\x45xceptionChecked\x10\xdd\x08\x1a\x13Operation timed out\"G\n\x13\x44\x61\x45xceptionInternal:0\x92?-\x12+\n\x14\x44\x61\x45xceptionUnchecked\x10\xde\x08\x1a\x0eInternal error0\x01\"M\n\x15\x44\x61\x45xceptionCorruption:4\x92?1\x12/\n\x12\x44\x61\x45xceptionChecked\x10\xdf\x08\x1a\x16\x43orruption encountered\"O\n\x1a\x44\x61\x45xceptionFileOpenFailure:1\x92?.\x12,\n\x14\x44\x61\x45xceptionLocalOnly\x10\xe0\x08\x1a\x11\x46ile open failure\"\\\n\x18\x44\x61\x45xceptionTooManyPinned:@\x92?=\x12;\n\x14\x44\x61\x45xceptionLocalOnly\x10\xe1\x08\x1a Too many pinned mobs in mobcache\"H\n\x12\x44\x61\x45xceptionFailure:2\x92?/\x12-\n\x14\x44\x61\x45xceptionUnchecked\x10\xe2\x08\x1a\x10Operation failed0\x01\"R\n\x1b\x44\x61\x45xceptionInvalidOperation:3\x92?0\x12.\n\x14\x44\x61\x45xceptionUnchecked\x10\xe3\x08\x1a\x11Invalid operation0\x01\"\xce\x01\n\x1d\x44\x61\x45xceptionArgumentOutOfRange\x12\x1a\n\x08\x61rgument\x18\x01 \x02(\tR\x08\x61rgument\x12\x10\n\x03min\x18\x02 \x02(\tR\x03min\x12\x10\n\x03max\x18\x03 \x02(\tR\x03max:m\x92?j\x12h\n\x1a\x44\x61\x45xceptionInvalidArgument\x10\xe4\x08\x1a\x45Value of argument {argument} must be between min {min} and max {max}.0\x01\"M\n\x13\x44\x61\x45xceptionTryAgain:6\x92?3\x12\x31\n\x12\x44\x61\x45xceptionChecked\x10\xe5\x08\x1a\x18Resource busy, try again\"z\n\x1d\x44\x61\x45xceptionVersionUnsupported\x12\x18\n\x07version\x18\x01 \x02(\tR\x07version:?\x92?<\x12:\n\x12\x44\x61\x45xceptionChecked\x10\xe6\x08\x1a!Version {version} is unsupported.\"H\n\x17\x44\x61\x45xceptionIhdrMismatch:-\x92?*\x12(\n\x14\x44\x61\x45xceptionLocalOnly\x10\xe7\x08\x1a\rIHdr mismatch\"\x8b\x01\n\x19\x44\x61\x45xceptionHostRpcFailure\x12\x12\n\x04host\x18\x01 \x02(\tR\x04host\x12\x16\n\x06method\x18\x02 \x02(\tR\x06method:B\x92??\x12=\n\x14\x44\x61\x45xceptionUnchecked\x10\xe8\x08\x1a\"Host {host} method {method} failed\"G\n\x17\x44\x61\x45xceptionShuttingDown:,\x92?)\x12\'\n\x12\x44\x61\x45xceptionChecked\x10\xe9\x08\x1a\x0eShutting down.\"M\n\x1a\x44\x61\x45xceptionUnexpectedError:/\x92?,\x12*\n\x12\x44\x61\x45xceptionChecked\x10\xea\x08\x1a\x11Unexpected error.\"D\n\x15\x44\x61\x45xceptionFPMismatch:+\x92?(\x12&\n\x14\x44\x61\x45xceptionLocalOnly\x10\xeb\x08\x1a\x0b\x46P mismatch\"i\n DaExceptionBindToInterfaceFailed:E\x92?B\x12@\n\x14\x44\x61\x45xceptionLocalOnly\x10\xec\x08\x1a%Failed to bind to a network interface\"J\n\x16\x44\x61\x45xceptionNameTooLong:0\x92?-\x12+\n\x14\x44\x61\x45xceptionUnchecked\x10\xed\x08\x1a\x10Name is too long\"N\n\x13\x44\x61\x45xceptionIterDone:7\x92?4\x12\x32\n\x12\x44\x61\x45xceptionChecked\x10\xee\x08\x1a\x17Iterator is at the end. \x01\"]\n\x17\x44\x61\x45xceptionNoIndirectFn:B\x92??\x12=\n\x14\x44\x61\x45xceptionLocalOnly\x10\xef\x08\x1a\"No indirect function is available.\"K\n\x15\x44\x61\x45xceptionOpCanceled:2\x92?/\x12-\n\x14\x44\x61\x45xceptionUnchecked\x10\xf0\x08\x1a\x12Operation canceled\"\\\n\x1f\x44\x61\x45xceptionOperationUnsupported:9\x92?6\x12\x34\n\x14\x44\x61\x45xceptionLocalOnly\x10\xf1\x08\x1a\x19Operation is unsupported.\"Z\n\x19\x44\x61\x45xceptionSendWouldBlock:=\x92?:\x12\x38\n\x15\x44\x61\x45xceptionWouldBlock\x10\xf2\x08\x1a\x1aSend operation would block \x01\"Z\n\x19\x44\x61\x45xceptionRecvWouldBlock:=\x92?:\x12\x38\n\x15\x44\x61\x45xceptionWouldBlock\x10\xf3\x08\x1a\x1aRecv operation would block \x01\"L\n\x1a\x44\x61\x45xceptionCompressFailure:.\x92?+\x12)\n\x12\x44\x61\x45xceptionChecked\x10\xb0\t\x1a\x10\x43ompress failure\"P\n\x1c\x44\x61\x45xceptionUncompressFailure:0\x92?-\x12+\n\x12\x44\x61\x45xceptionChecked\x10\xb1\t\x1a\x12Uncompress failure\"S\n\x1d\x44\x61\x45xceptionRegistryNodeExists:2\x92?/\x12-\n\x12\x44\x61\x45xceptionChecked\x10\x94\n\x1a\x14Registry node exists\"V\n\x19\x44\x61\x45xceptionRegistryNoNode:9\x92?6\x12\x34\n\x12\x44\x61\x45xceptionChecked\x10\x95\n\x1a\x1bRegistry node doesn\'t exist\"[\n!DaExceptionRegistryConnectionLoss:6\x92?3\x12\x31\n\x12\x44\x61\x45xceptionChecked\x10\x96\n\x1a\x18Registry connection loss\"[\n!DaExceptionRegistrySessionExpired:6\x92?3\x12\x31\n\x12\x44\x61\x45xceptionChecked\x10\x97\n\x1a\x18Registry session expired\"a\n$DaExceptionRegistryConnectionTimeout:9\x92?6\x12\x34\n\x12\x44\x61\x45xceptionChecked\x10\x98\n\x1a\x1bRegistry connection timeout\"_\n#DaExceptionRegistryOperationTimeout:8\x92?5\x12\x33\n\x12\x44\x61\x45xceptionChecked\x10\x99\n\x1a\x1aRegistry operation timeout\"S\n\x1d\x44\x61\x45xceptionRegistryBadVersion:2\x92?/\x12-\n\x12\x44\x61\x45xceptionChecked\x10\x9a\n\x1a\x14Registry bad version\"V\n\x1c\x44\x61\x45xceptionRegistryEmptyNode:6\x92?3\x12\x31\n\x12\x44\x61\x45xceptionChecked\x10\x9c\n\x1a\x16Registry node is empty \x01\"a\n\x1d\x44\x61\x45xceptionRegistryIpMismatch:@\x92?=\x12;\n\x12\x44\x61\x45xceptionChecked\x10\x9d\n\x1a\"Failed to validate the floating ip\"_\n DaExceptionRegistryDvxidMismatch:;\x92?8\x12\x36\n\x12\x44\x61\x45xceptionChecked\x10\x9e\n\x1a\x1d\x46\x61iled to validate the dvx id\"`\n\x19\x44\x61\x45xceptionRpcClientPanic:C\x92?@\x12>\n\x14\x44\x61\x45xceptionUnchecked\x10\xf8\n\x1a#Rpc server requests client to panic\"q\n\x1a\x44\x61\x45xceptionRpcDecodeFailed\x12 \n\x0b\x64\x65\x63odeField\x18\x01 \x01(\tR\x0b\x64\x65\x63odeField:1\x92?.\x12,\n\x14\x44\x61\x45xceptionUnchecked\x10\xf9\n\x1a\x11Rpc decode failed\"\x86\x01\n\x1c\x44\x61\x45xceptionRpcServiceNotHere\x12 \n\x0bserviceName\x18\x01 \x01(\tR\x0bserviceName:D\x92?A\x12?\n\x14\x44\x61\x45xceptionUnchecked\x10\xfa\n\x1a\"Rpc service {serviceName} not here(\x01\"S\n\x1c\x44\x61\x45xceptionRpcServiceUnknown:3\x92?0\x12.\n\x14\x44\x61\x45xceptionLocalOnly\x10\xfb\n\x1a\x13Rpc service unknown\"\x80\x01\n\x1b\x44\x61\x45xceptionRpcMethodUnknown\x12\x1e\n\nmethodName\x18\x01 \x01(\tR\nmethodName:A\x92?>\x12<\n\x14\x44\x61\x45xceptionUnchecked\x10\xfc\n\x1a\x1fRpc method {methodName} unknown(\x01\"Z\n\x1b\x44\x61\x45xceptionRpcAsyncResponse:;\x92?8\x12\x36\n\x14\x44\x61\x45xceptionLocalOnly\x10\xfd\n\x1a\x19Rpc asynchronous response \x01\"P\n\x17\x44\x61\x45xceptionRpcQueueFull:5\x92?2\x12\x30\n\x14\x44\x61\x45xceptionUnchecked\x10\xfe\n\x1a\x15Rpc server queue full\"\\\n\x1b\x44\x61\x45xceptionRpcRequestFenced:=\x92?:\x12\x38\n\x14\x44\x61\x45xceptionUnchecked\x10\xff\n\x1a\x1dRpc server request fenced out\"f\n\x1e\x44\x61\x45xceptionRpcInvalidHandshake:D\x92?A\x12?\n\x14\x44\x61\x45xceptionLocalOnly\x10\x80\x0b\x1a$Rpc connection handshake was invalid\"o\n\x1d\x44\x61\x45xceptionRpcVersionMismatch:N\x92?K\x12I\n\x14\x44\x61\x45xceptionUnchecked\x10\x81\x0b\x1a.Rpc to server with mismatched software version\"b\n!DaExceptionRpcProtocolUnsupported:=\x92?:\x12\x38\n\x14\x44\x61\x45xceptionLocalOnly\x10\x82\x0b\x1a\x1dProtocol type is unsupported.\"d\n\"DaExceptionRpcTransportUnsupported:>\x92?;\x12\x39\n\x14\x44\x61\x45xceptionLocalOnly\x10\x83\x0b\x1a\x1eTransport type is unsupported.\"e\n\x1d\x44\x61\x45xceptionRpcRequestRejected:D\x92?A\x12?\n\x14\x44\x61\x45xceptionUnchecked\x10\x84\x0b\x1a$Rpc request rejected during receive.\"k\n\x19\x44\x61\x45xceptionRpcClientRetry:N\x92?K\x12I\n\x14\x44\x61\x45xceptionUnchecked\x10\x85\x0b\x1a.Service indicates client should retry request.\"\x93\x01\n!DaExceptionRpcClientChecksumRetry:n\x92?k\x12i\n\x14\x44\x61\x45xceptionUnchecked\x10\x86\x0b\x1aNService indicates client should retry request that failed checksum validation.\"x\n\x1e\x44\x61\x45xceptionRpcTopologyMismatch:V\x92?S\x12Q\n\x14\x44\x61\x45xceptionUnchecked\x10\x87\x0b\x1a\x36\x43lient/Server notions of topology number do not match.\"\\\n\x15\x44\x61\x45xceptionRpcTimeout:C\x92?@\x12>\n\x14\x44\x61\x45xceptionLocalOnly\x10\x88\x0b\x1a#Rpc timeout waiting for a response.\"k\n\x1b\x44\x61\x45xceptionRpcDvxIdMismatch:L\x92?I\x12G\n\x14\x44\x61\x45xceptionUnchecked\x10\x89\x0b\x1a,Client/Server notions of dvxId do not match.\"B\n\x11\x44\x61\x45xceptionIoOpen:-\x92?*\x12(\n\x12\x44\x61\x45xceptionChecked\x10\xdc\x0b\x1a\x0fIO open failure\"D\n\x12\x44\x61\x45xceptionIoClose:.\x92?+\x12)\n\x12\x44\x61\x45xceptionChecked\x10\xdd\x0b\x1a\x10IO close failure\"T\n\x19\x44\x61\x45xceptionIoCreateIoctxt:7\x92?4\x12\x32\n\x12\x44\x61\x45xceptionChecked\x10\xde\x0b\x1a\x19IO context create failure\"V\n\x1a\x44\x61\x45xceptionIoDestroyIoctxt:8\x92?5\x12\x33\n\x12\x44\x61\x45xceptionChecked\x10\xdf\x0b\x1a\x1aIO context destroy failure\"\\\n\x17\x44\x61\x45xceptionIoCreateIocb:A\x92?>\x12<\n\x12\x44\x61\x45xceptionChecked\x10\xe0\x0b\x1a#IO control structure create failure\"F\n\x13\x44\x61\x45xceptionIoSubmit:/\x92?,\x12*\n\x12\x44\x61\x45xceptionChecked\x10\xe1\x0b\x1a\x11IO submit failure\"O\n\x1e\x44\x61\x45xceptionIoWaitForCompletion:-\x92?*\x12(\n\x12\x44\x61\x45xceptionChecked\x10\xe2\x0b\x1a\x0fNo IO completed\"I\n\x18\x44\x61\x45xceptionIoNoResources:-\x92?*\x12(\n\x12\x44\x61\x45xceptionChecked\x10\xe3\x0b\x1a\x0fNo IO resources\"G\n\x17\x44\x61\x45xceptionIoEmptyQueue:,\x92?)\x12\'\n\x12\x44\x61\x45xceptionChecked\x10\xe4\x0b\x1a\x0e\x45mpty IO queue\"F\n\x17\x44\x61\x45xceptionIoIncomplete:+\x92?(\x12&\n\x12\x44\x61\x45xceptionChecked\x10\xe5\x0b\x1a\rIO incomplete\"@\n\x14\x44\x61\x45xceptionIoTimeout:(\x92?%\x12#\n\x12\x44\x61\x45xceptionChecked\x10\xe6\x0b\x1a\nIO timeout\"]\n\x1a\x44\x61\x45xceptionIoCreateCtrlBlk:?\x92?<\x12:\n\x12\x44\x61\x45xceptionChecked\x10\xe7\x0b\x1a!Creating IO control block failure\"F\n\x13\x44\x61\x45xceptionIoDevice:/\x92?,\x12*\n\x12\x44\x61\x45xceptionChecked\x10\xe8\x0b\x1a\x11IO device failure\"N\n\x1d\x44\x61\x45xceptionChunkstoreNotFound:-\x92?*\x12(\n\x12\x44\x61\x45xceptionChecked\x10\xc0\x0c\x1a\x0f\x43hunk not found\"h\n\x1e\x44\x61\x45xceptionChunkstoreCollision:F\x92?C\x12\x41\n\x12\x44\x61\x45xceptionChecked\x10\xc1\x0c\x1a(Chunk already exists with different data\"`\n&DaExceptionChunkstoreIterationComplete:6\x92?3\x12\x31\n\x12\x44\x61\x45xceptionChecked\x10\xc2\x0c\x1a\x18\x43hunk iteration complete\"J\n\x1e\x44\x61\x45xceptionChunkstoreNullChunk:(\x92?%\x12#\n\x12\x44\x61\x45xceptionChecked\x10\xc3\x0c\x1a\nNull chunk\"P\n\x1e\x44\x61\x45xceptionChunkstoreIndexFull:.\x92?+\x12)\n\x12\x44\x61\x45xceptionChecked\x10\xc4\x0c\x1a\x10\x43hunk index full\"[\n\x1f\x44\x61\x45xceptionChunkstoreOutOfSpace:8\x92?5\x12\x33\n\x12\x44\x61\x45xceptionChecked\x10\xc5\x0c\x1a\x1a\x43hunkStore is out of space\"V\n\"DaExceptionChunkstoreChunkTooLarge:0\x92?-\x12+\n\x12\x44\x61\x45xceptionChecked\x10\xc6\x0c\x1a\x12\x43hunk is too large\"X\n\"DaExceptionChunkstoreInvalidOffset:2\x92?/\x12-\n\x12\x44\x61\x45xceptionChecked\x10\xc7\x0c\x1a\x14Invalid chunk offset\"V\n\x1f\x44\x61\x45xceptionChunkstoreCorruption:3\x92?0\x12.\n\x12\x44\x61\x45xceptionChecked\x10\xc8\x0c\x1a\x15\x43hunkStore corruption\"]\n\"DaExceptionChunkstoreInvalidDevice:7\x92?4\x12\x32\n\x12\x44\x61\x45xceptionChecked\x10\xc9\x0c\x1a\x19Invalid ChunkStore device\"c\n&DaExceptionChunkstoreInvalidChksumType:9\x92?6\x12\x34\n\x12\x44\x61\x45xceptionChecked\x10\xca\x0c\x1a\x1bInvalid chunk checksum type\"M\n\x1e\x44\x61\x45xceptionChunkstoreChunkBusy:+\x92?(\x12&\n\x12\x44\x61\x45xceptionChecked\x10\xcb\x0c\x1a\rChunk is busy\"R\n\x1f\x44\x61\x45xceptionChunkstoreInvalidKey:/\x92?,\x12*\n\x12\x44\x61\x45xceptionChecked\x10\xcc\x0c\x1a\x11Invalid chunk key\"]\n\"DaExceptionChunkstoreForeignDevice:7\x92?4\x12\x32\n\x12\x44\x61\x45xceptionChecked\x10\xcd\x0c\x1a\x19\x46oreign ChunkStore device\"P\n\x1c\x44\x61\x45xceptionChunkstoreCrashed:0\x92?-\x12+\n\x12\x44\x61\x45xceptionChecked\x10\xce\x0c\x1a\x12\x43hunkStore crashed\"u\n\"DaExceptionChunkstoreSuffixTooLong:O\x92?L\x12J\n\x12\x44\x61\x45xceptionChecked\x10\xcf\x0c\x1a\x31Unexpected suffix while deleting chunks by prefix\"}\n\x1f\x44\x61\x45xceptionChunkstoreRetryWrite:Z\x92?W\x12U\n\x12\x44\x61\x45xceptionChecked\x10\xd0\x0c\x1a<Write verification failed and the write needs to be retried.\"j\n*DaExceptionChunkstoreEnableSyntheticChunks:<\x92?9\x12\x37\n\x12\x44\x61\x45xceptionChecked\x10\xd1\x0c\x1a\x1e\x45nable synthetic chunks first.\"P\n\x1e\x44\x61\x45xceptionChunkstoreUnmanaged:.\x92?+\x12)\n\x12\x44\x61\x45xceptionChecked\x10\xd2\x0c\x1a\x10No Disk Manager.\"]\n#DaExceptionChunkstoreChunkRepairing:6\x92?3\x12\x31\n\x12\x44\x61\x45xceptionChecked\x10\xd3\x0c\x1a\x18\x43hunk is being repaired.\"U\n\x1c\x44\x61\x45xceptionFstoreNoFreeSpace:5\x92?2\x12\x30\n\x12\x44\x61\x45xceptionChecked\x10\xa4\r\x1a\x17\x46lashStore out of space\"c\n\x1a\x44\x61\x45xceptionFstoreVebSealed:E\x92?B\x12@\n\x12\x44\x61\x45xceptionChecked\x10\xa5\r\x1a\'Failed to seal FlashStore VEB for write\"d\n\x1c\x44\x61\x45xceptionFstoreVebUnsealed:D\x92?A\x12?\n\x12\x44\x61\x45xceptionChecked\x10\xa6\r\x1a&Failed to read unsealed FlashStore VEB\"S\n\x1b\x44\x61\x45xceptionFstoreInvalidVeb:4\x92?1\x12/\n\x12\x44\x61\x45xceptionChecked\x10\xa7\r\x1a\x16Invalid FlashStore VEB\"^\n!DaExceptionFstoreInvalidArguments:9\x92?6\x12\x34\n\x12\x44\x61\x45xceptionChecked\x10\xa8\r\x1a\x1bInvalid FlashStore argument\"Y\n\x1c\x44\x61\x45xceptionFstoreNoResources:9\x92?6\x12\x34\n\x12\x44\x61\x45xceptionChecked\x10\xa9\r\x1a\x1bOut of FlashStore resources\"U\n\x1c\x44\x61\x45xceptionFstoreWriteFailed:5\x92?2\x12\x30\n\x12\x44\x61\x45xceptionChecked\x10\xaa\r\x1a\x17\x46lashStore write failed\"P\n\x1a\x44\x61\x45xceptionStoragePoolDown:2\x92?/\x12-\n\x12\x44\x61\x45xceptionChecked\x10\x89\x0e\x1a\x14Storage pool is down\"^\n DaExceptionStoragePoolOutOfSpace::\x92?7\x12\x35\n\x12\x44\x61\x45xceptionChecked\x10\x8a\x0e\x1a\x1cStorage pool is out of space\"Z\n DaExceptionStorageStripeNotFound:6\x92?3\x12\x31\n\x12\x44\x61\x45xceptionChecked\x10\x8b\x0e\x1a\x18Storage stripe not found\"W\n\x1f\x44\x61\x45xceptionStorageStripeCorrupt:4\x92?1\x12/\n\x12\x44\x61\x45xceptionChecked\x10\x8d\x0e\x1a\x16Storage stripe corrupt\"m\n)DaExceptionStorageStripeRebuildJobFailure:@\x92?=\x12;\n\x12\x44\x61\x45xceptionChecked\x10\x8e\x0e\x1a\"Storage stripe rebuild job failure\"Y\n#DaExceptionStorageStripeSetNotFound:2\x92?/\x12-\n\x12\x44\x61\x45xceptionChecked\x10\x8f\x0e\x1a\x14Stripe Set not found\"i\n\'DaExceptionStorageStripeScrubJobFailure:>\x92?;\x12\x39\n\x12\x44\x61\x45xceptionChecked\x10\x90\x0e\x1a Storage stripe scrub job failure\"\x84\x01\n\x1f\x44\x61\x45xceptionStoragePoolDriveBusy\x12\x16\n\x06\x64iskId\x18\x01 \x01(\tR\x06\x64iskId:I\x92?F\x12\x44\n\x12\x44\x61\x45xceptionChecked\x10\x91\x0e\x1a)Cannot remove drive {diskId} at this time(\x01\"|\n)DaExceptionStorageStripeReconstMoreNeeded:O\x92?L\x12J\n\x14\x44\x61\x45xceptionLocalOnly\x10\x92\x0e\x1a-Storage stripe reconstruct, more tiles needed \x01\"\x99\x01\n\x17\x44\x61\x45xceptionTooFewDrives\x12\x16\n\x06\x64iskId\x18\x01 \x01(\tR\x06\x64iskId:f\x92?c\x12\x61\n\x1f\x44\x61\x45xceptionStoragePoolDriveBusy\x10\x93\x0e\x1a\x39Too few drives would remain, cannot remove drive {diskId}(\x01\"\xa7\x01\n DaExceptionSpareCapacityExceeded\x12\x16\n\x06\x64iskId\x18\x01 \x01(\tR\x06\x64iskId:k\x92?h\x12\x66\n\x1f\x44\x61\x45xceptionStoragePoolDriveBusy\x10\x94\x0e\x1a>Spare capacity would be exceeded, cannot remove drive {diskId}(\x01\"Z\n\x1b\x44\x61\x45xceptionStoragePoolNotOK:;\x92?8\x12\x36\n\x12\x44\x61\x45xceptionChecked\x10\x95\x0e\x1a\x1dStorage pool status is not ok\"]\n\x1e\x44\x61\x45xceptionVdiskRdonlySnapshot:;\x92?8\x12\x36\n\x12\x44\x61\x45xceptionChecked\x10\xec\x0e\x1a\x1dVDisk is a read-only snapshot\"g\n\x1f\x44\x61\x45xceptionVdiskMaxOpenSessions:D\x92?A\x12?\n\x12\x44\x61\x45xceptionChecked\x10\xed\x0e\x1a&Maximum open session reached for VDisk\"R\n\x1b\x44\x61\x45xceptionVdiskInvalidArgs:3\x92?0\x12.\n\x12\x44\x61\x45xceptionChecked\x10\xee\x0e\x1a\x15Invalid XMap argument\"l\n\x1e\x44\x61\x45xceptionVdiskSnapidMismatch:J\x92?G\x12\x45\n\x12\x44\x61\x45xceptionChecked\x10\xef\x0e\x1a,SnapId from DMap is <= snapId from NameSpace\"`\n DaExceptionVdiskBlockKeyMismatch:<\x92?9\x12\x37\n\x12\x44\x61\x45xceptionChecked\x10\xf0\x0e\x1a\x1e\x44map block value size mismatch\"d\n#DaExceptionVdiskBlockOffsetMismatch:=\x92?:\x12\x38\n\x12\x44\x61\x45xceptionChecked\x10\xf1\x0e\x1a\x1f\x44map block value offset invalid\"\\\n$DaExceptionVdiskXmapChecksumMismatch:4\x92?1\x12/\n\x12\x44\x61\x45xceptionChecked\x10\xf2\x0e\x1a\x16XMap checksum mismatch\"t\n(DaExceptionVdiskClumprefChecksumMismatch:H\x92?E\x12\x43\n\x12\x44\x61\x45xceptionChecked\x10\xf3\x0e\x1a*Checksums for SR enumeration did not match\"k\n!DaExceptionVdiskMaxOpenedExceeded:F\x92?C\x12\x41\n\x12\x44\x61\x45xceptionChecked\x10\xf4\x0e\x1a(More VDisks are open than the array size\"i\n\'DaExceptionVdiskLeaseTokenAlreadyExists:>\x92?;\x12\x39\n\x12\x44\x61\x45xceptionChecked\x10\xf5\x0e\x1a VDisk lease token already exists\"V\n\x18\x44\x61\x45xceptionLeaseMismatch::\x92?7\x12\x35\n\x12\x44\x61\x45xceptionChecked\x10\xf6\x0e\x1a\x1cLease mismatch or expiration\"[\n\x19\x44\x61\x45xceptionVdiskCpTimeout:>\x92?;\x12\x39\n\x12\x44\x61\x45xceptionChecked\x10\xf7\x0e\x1a CP Request to FMgr was timed-out\"c\n\x1c\x44\x61\x45xceptionVdiskRepackFailed:C\x92?@\x12>\n\x12\x44\x61\x45xceptionChecked\x10\xf8\x0e\x1a%VDisk repack recipe generation failed\"\x90\x01\n\x1b\x44\x61\x45xceptionVdiskRecipeStale:q\x92?n\x12l\n\x12\x44\x61\x45xceptionChecked\x10\xf9\x0e\x1aSVDisk cannot return repack recipe because new snaps are created and recipe is stale\"_\n\x1e\x44\x61\x45xceptionVdiskRecipeNotFound:=\x92?:\x12\x38\n\x12\x44\x61\x45xceptionChecked\x10\xfa\x0e\x1a\x1fVDisk cannot find repack recipe\"p\n\x1f\x44\x61\x45xceptionVdiskStaleServerUuid:M\x92?J\x12H\n\x12\x44\x61\x45xceptionChecked\x10\xfb\x0e\x1a/VDiskCtrlrServer\'s UUID in the request is stale\"h\n\x1c\x44\x61\x45xceptionVdiskNoWriteLease:H\x92?E\x12\x43\n\x12\x44\x61\x45xceptionChecked\x10\xfc\x0e\x1a*VDiskCtrlrServer does not have write lease\"y\n\"DaExceptionVdiskDumpMissingFpFound:S\x92?P\x12N\n\x12\x44\x61\x45xceptionChecked\x10\xfd\x0e\x1a\x35VDiskDump found an FP matching a missing FP provided.\"a\n\x1b\x44\x61\x45xceptionVdiskJobCanceled:B\x92??\x12=\n\x12\x44\x61\x45xceptionChecked\x10\xfe\x0e\x1a$VDisk library job has been canceled.\"]\n\x1d\x44\x61\x45xceptionVdiskHasWriteLease:<\x92?9\x12\x37\n\x12\x44\x61\x45xceptionChecked\x10\xff\x0e\x1a\x1eVDisk has a valid write lease.\"h\n$DaExceptionVdiskReplChecksumMismatch:@\x92?=\x12;\n\x12\x44\x61\x45xceptionChecked\x10\x80\x0f\x1a\"Checksum mismatch after ApplyDiff.\"k\n!DaExceptionVdiskSetLiveInvalidArg:F\x92?C\x12\x41\n\x12\x44\x61\x45xceptionChecked\x10\x81\x0f\x1a(SetLiveSnaps received invalid arguments.\">\n\x13\x44\x61\x45xceptionFilePerm:\'\x92?$\x12\"\n\x12\x44\x61\x45xceptionChecked\x10\xd0\x0f\x1a\tNot owner\"O\n\x14\x44\x61\x45xceptionFileNoent:7\x92?4\x12\x32\n\x12\x44\x61\x45xceptionChecked\x10\xd1\x0f\x1a\x19No such file or directory\"<\n\x11\x44\x61\x45xceptionFileIo:\'\x92?$\x12\"\n\x12\x44\x61\x45xceptionChecked\x10\xd2\x0f\x1a\tI/O error\"O\n\x13\x44\x61\x45xceptionFileNxio:8\x92?5\x12\x33\n\x12\x44\x61\x45xceptionChecked\x10\xd3\x0f\x1a\x1aI/O error - no such device\"G\n\x14\x44\x61\x45xceptionFileAcces:/\x92?,\x12*\n\x12\x44\x61\x45xceptionChecked\x10\xd4\x0f\x1a\x11Permission denied\"I\n\x14\x44\x61\x45xceptionFileExist:1\x92?.\x12,\n\x12\x44\x61\x45xceptionChecked\x10\xd5\x0f\x1a\x13\x46ile already exists\"N\n\x13\x44\x61\x45xceptionFileXdev:7\x92?4\x12\x32\n\x12\x44\x61\x45xceptionChecked\x10\xd6\x0f\x1a\x19Invalid cross device link\"D\n\x14\x44\x61\x45xceptionFileNodev:,\x92?)\x12\'\n\x12\x44\x61\x45xceptionChecked\x10\xd7\x0f\x1a\x0eNo such device\"F\n\x15\x44\x61\x45xceptionFileNotdir:-\x92?*\x12(\n\x12\x44\x61\x45xceptionChecked\x10\xd8\x0f\x1a\x0fNot a directory\"D\n\x14\x44\x61\x45xceptionFileIsdir:,\x92?)\x12\'\n\x12\x44\x61\x45xceptionChecked\x10\xd9\x0f\x1a\x0eIs a directory\"F\n\x14\x44\x61\x45xceptionFileInval:.\x92?+\x12)\n\x12\x44\x61\x45xceptionChecked\x10\xda\x0f\x1a\x10Invalid argument\"C\n\x13\x44\x61\x45xceptionFileFbig:,\x92?)\x12\'\n\x12\x44\x61\x45xceptionChecked\x10\xdb\x0f\x1a\x0e\x46ile too large\"K\n\x13\x44\x61\x45xceptionFileRofs:4\x92?1\x12/\n\x14\x44\x61\x45xceptionUnchecked\x10\xdd\x0f\x1a\x14Read-only filesystem\"I\n\x14\x44\x61\x45xceptionFileMlink:1\x92?.\x12,\n\x12\x44\x61\x45xceptionChecked\x10\xde\x0f\x1a\x13Too many hard links\"P\n\x1a\x44\x61\x45xceptionFileNametoolong:2\x92?/\x12-\n\x12\x44\x61\x45xceptionChecked\x10\xdf\x0f\x1a\x14\x46ilename is too long\"O\n\x17\x44\x61\x45xceptionFileNotempty:4\x92?1\x12/\n\x12\x44\x61\x45xceptionChecked\x10\xe0\x0f\x1a\x16\x44irectory is not empty\"M\n\x14\x44\x61\x45xceptionFileDquot:5\x92?2\x12\x30\n\x12\x44\x61\x45xceptionChecked\x10\xe1\x0f\x1a\x17Resource quota exceeded\"J\n\x14\x44\x61\x45xceptionFileStale:2\x92?/\x12-\n\x14\x44\x61\x45xceptionUnchecked\x10\xe2\x0f\x1a\x12Illegal filehandle\"U\n\x15\x44\x61\x45xceptionFileRemote:<\x92?9\x12\x37\n\x12\x44\x61\x45xceptionChecked\x10\xe3\x0f\x1a\x1e\x46ilehandle is not server local\"P\n\x18\x44\x61\x45xceptionFileBadhandle:4\x92?1\x12/\n\x12\x44\x61\x45xceptionChecked\x10\xe4\x0f\x1a\x16Illegal NFS filehandle\"N\n\x16\x44\x61\x45xceptionFileNotSync:4\x92?1\x12/\n\x12\x44\x61\x45xceptionChecked\x10\xe5\x0f\x1a\x16Setattr update problem\"L\n\x18\x44\x61\x45xceptionFileBadCookie:0\x92?-\x12+\n\x12\x44\x61\x45xceptionChecked\x10\xe6\x0f\x1a\x12\x42\x61\x64 readdir cookie\"O\n\x16\x44\x61\x45xceptionFileNotsupp:5\x92?2\x12\x30\n\x12\x44\x61\x45xceptionChecked\x10\xe7\x0f\x1a\x17Operation not supported\"L\n\x17\x44\x61\x45xceptionFileToosmall:1\x92?.\x12,\n\x12\x44\x61\x45xceptionChecked\x10\xe8\x0f\x1a\x13\x42uffer is too small\"P\n\x1a\x44\x61\x45xceptionFileServerfault:2\x92?/\x12-\n\x12\x44\x61\x45xceptionChecked\x10\xe9\x0f\x1a\x14Unknown server error\"H\n\x16\x44\x61\x45xceptionFileBadtype:.\x92?+\x12)\n\x12\x44\x61\x45xceptionChecked\x10\xea\x0f\x1a\x10Invalid filetype\"P\n\x16\x44\x61\x45xceptionFileJukebox:6\x92?3\x12\x31\n\x12\x44\x61\x45xceptionChecked\x10\xeb\x0f\x1a\x18Server operation pending\"T\n\x1d\x44\x61\x45xceptionFileFprintnotfound:3\x92?0\x12.\n\x12\x44\x61\x45xceptionChecked\x10\xec\x0f\x1a\x15\x46ingerprint not found\"I\n\x16\x44\x61\x45xceptionFileAborted:/\x92?,\x12*\n\x12\x44\x61\x45xceptionChecked\x10\xed\x0f\x1a\x11Operation aborted\"[\n\x1d\x44\x61\x45xceptionFileBadDatastoreId::\x92?7\x12\x35\n\x12\x44\x61\x45xceptionChecked\x10\xee\x0f\x1a\x1c\x44\x61tastore id hasn\'t been set\"Z\n\x18\x44\x61\x45xceptionFileStaleData:>\x92?;\x12\x39\n\x12\x44\x61\x45xceptionChecked\x10\xef\x0f\x1a Fingerprint for data has changed\"M\n\x15\x44\x61\x45xceptionFileFrozen:4\x92?1\x12/\n\x12\x44\x61\x45xceptionChecked\x10\xf0\x0f\x1a\x16\x46ile is already frozen\"W\n\x17\x44\x61\x45xceptionFileBadSnode:<\x92?9\x12\x37\n\x12\x44\x61\x45xceptionChecked\x10\xf1\x0f\x1a\x1eUnable to get shared node info\"a\n DaExceptionFileNamespaceBadState:=\x92?:\x12\x38\n\x12\x44\x61\x45xceptionChecked\x10\xf2\x0f\x1a\x1fNamespace not in expected state\"a\n\x1f\x44\x61\x45xceptionFileWrongFmgrHandler:>\x92?;\x12\x39\n\x12\x44\x61\x45xceptionChecked\x10\xf3\x0f\x1a Wrong FMgr handle for given file\"S\n\x14\x44\x61\x45xceptionFileRange:;\x92?8\x12\x36\n\x12\x44\x61\x45xceptionChecked\x10\xf4\x0f\x1a\x1d\x45xtended attribute is too big\"U\n\x1c\x44\x61\x45xceptionFileIntSystemCall:5\x92?2\x12\x30\n\x12\x44\x61\x45xceptionChecked\x10\xf5\x0f\x1a\x17Interrupted system call\"F\n\x19\x44\x61\x45xceptionFileBrokenPipe:)\x92?&\x12$\n\x12\x44\x61\x45xceptionChecked\x10\xf6\x0f\x1a\x0b\x42roken Pipe\"H\n\x1a\x44\x61\x45xceptionFileWrongFormat:*\x92?\'\x12%\n\x12\x44\x61\x45xceptionChecked\x10\xf7\x0f\x1a\x0cWrong format\"T\n\x1b\x44\x61\x45xceptionFileTooManySnaps:5\x92?2\x12\x30\n\x12\x44\x61\x45xceptionChecked\x10\xf8\x0f\x1a\x17\x46ile has too many snaps\"J\n\x1b\x44\x61\x45xceptionFileStaleSession:+\x92?(\x12&\n\x12\x44\x61\x45xceptionChecked\x10\xf9\x0f\x1a\rStale Session\"N\n\x1d\x44\x61\x45xceptionFileExpiredSession:-\x92?*\x12(\n\x12\x44\x61\x45xceptionChecked\x10\xfa\x0f\x1a\x0fSession Expired\"T\n\x19\x44\x61\x45xceptionFileNameIsNull:7\x92?4\x12\x32\n\x14\x44\x61\x45xceptionUnchecked\x10\xfb\x0f\x1a\x17\x46ile/Path name is NULL.\"V\n\x1a\x44\x61\x45xceptionFileNameIsEmpty:8\x92?5\x12\x33\n\x14\x44\x61\x45xceptionUnchecked\x10\xfc\x0f\x1a\x18\x46ile/Path name is Empty.\"u\n\"DaExceptionFileNameHasIllegalChars:O\x92?L\x12J\n\x14\x44\x61\x45xceptionUnchecked\x10\xfd\x0f\x1a/File/Path name has illegal characters. / .. ? *\"T\n\x1c\x44\x61\x45xceptionDatastoreDisabled:4\x92?1\x12/\n\x12\x44\x61\x45xceptionChecked\x10\xfe\x0f\x1a\x16\x44\x61tastore is disabled.\"j\n\x1f\x44\x61\x45xceptionMaxDatastoresCreated:G\x92?D\x12\x42\n\x12\x44\x61\x45xceptionChecked\x10\xff\x0f\x1a)Max supported datastores already created.\"R\n\x1c\x44\x61\x45xceptionDatastoreNotFound:2\x92?/\x12-\n\x12\x44\x61\x45xceptionChecked\x10\x80\x10\x1a\x14\x44\x61tastore not found.\"m\n\x1e\x44\x61\x45xceptionDatastoreMaxExports:K\x92?H\x12\x46\n\x12\x44\x61\x45xceptionChecked\x10\x81\x10\x1a-Max number of exports for datastore exceeded.\"\xec\x02\n\x18\x44\x61\x45xceptionDatastoreBusy\x12\x1a\n\x08protGrps\x18\x01 \x03(\tR\x08protGrps\x12\"\n\x0cmountedHosts\x18\x02 \x03(\tR\x0cmountedHosts\x12 \n\x0bsrmProtGrps\x18\x03 \x03(\tR\x0bsrmProtGrps:\xed\x01\x92?\xe9\x01\x12\xe6\x01\n\x12\x44\x61\x45xceptionChecked\x10\x82\x10\x1a\xcc\x01\x44\x61tastore is busy.\nDemote or delete the following protection groups: {protGrps}\nUsed in following srmEnabled protection groups: {srmProtGrps}\nUnmount the datastore from the following hosts: {mountedHosts}\"Y\n\x1c\x44\x61\x45xceptionRcacheNoResources:9\x92?6\x12\x34\n\x12\x44\x61\x45xceptionChecked\x10\xb4\x10\x1a\x1bRead cache out of resources\"Y\n\x1e\x44\x61\x45xceptionRcacheRescueAborted:7\x92?4\x12\x32\n\x12\x44\x61\x45xceptionChecked\x10\xb5\x10\x1a\x19Read cache rescue aborted\"b\n\x1c\x44\x61\x45xceptionRcacheInvalHandle:B\x92??\x12=\n\x12\x44\x61\x45xceptionChecked\x10\xb6\x10\x1a$Read cache invalid vdisk snap handle\"a\n DaExceptionRcacheRemoteClumpMiss:=\x92?:\x12\x38\n\x14\x44\x61\x45xceptionUnchecked\x10\xb7\x10\x1a\x1dMissed clump in remote RCache\"a\n\x1f\x44\x61\x45xceptionGfpindexNeedRecovery:>\x92?;\x12\x39\n\x12\x44\x61\x45xceptionChecked\x10\x98\x11\x1a Fingerprint index needs recovery\"q\n\'DaExceptionGfpindexInsertOldContainerid:F\x92?C\x12\x41\n\x12\x44\x61\x45xceptionChecked\x10\x99\x11\x1a(Fingerprint index inserted old container\"q\n&DaExceptionGfpindexInsertSpanContainer:G\x92?D\x12\x42\n\x12\x44\x61\x45xceptionChecked\x10\x9a\x11\x1a)Fingerprint index insert spans containers\"a\n\x1f\x44\x61\x45xceptionGfpindexStillRunning:>\x92?;\x12\x39\n\x12\x44\x61\x45xceptionChecked\x10\x9b\x11\x1a Fingerprint server still running\"b\n\x1d\x44\x61\x45xceptionGfpindexOutOfRange:A\x92?>\x12<\n\x12\x44\x61\x45xceptionChecked\x10\x9c\x11\x1a#Fingerprint is out of service range\"h\n#DaExceptionGfpindexInMigrationRange:A\x92?>\x12<\n\x14\x44\x61\x45xceptionLocalOnly\x10\x9d\x11\x1a!Fingerprint is in migration range\"^\n\x1e\x44\x61\x45xceptionGfpindexStaleHandle:<\x92?9\x12\x37\n\x12\x44\x61\x45xceptionChecked\x10\x9e\x11\x1a\x1eScroll content handle is stale\"E\n\x18\x44\x61\x45xceptionLeasemgrRetry:)\x92?&\x12$\n\x12\x44\x61\x45xceptionChecked\x10\xfc\x11\x1a\x0bLease retry\"Z\n\x1d\x44\x61\x45xceptionLeasePendingRevoke:9\x92?6\x12\x34\n\x12\x44\x61\x45xceptionChecked\x10\xfd\x11\x1a\x1bLease is pending revocation\"`\n\x1d\x44\x61\x45xceptionFmgrObjectReadOnly:?\x92?<\x12:\n\x12\x44\x61\x45xceptionChecked\x10\xe0\x12\x1a!Attempt to modify readonly object\"d\n\x1a\x44\x61\x45xceptionFmgrFileClosing:F\x92?C\x12\x41\n\x14\x44\x61\x45xceptionLocalOnly\x10\xe2\x12\x1a&Frontend write buffer log out of space\"R\n\x1c\x44\x61\x45xceptionFmgrObjectNotFile:2\x92?/\x12-\n\x12\x44\x61\x45xceptionChecked\x10\xe3\x12\x1a\x14Object is not a file\"W\n\x1a\x44\x61\x45xceptionFmgrFileNotOpen:9\x92?6\x12\x34\n\x12\x44\x61\x45xceptionChecked\x10\xe5\x12\x1a\x1b\x46ile not open on this FMgr.\"X\n!DaExceptionFmgrDuplicateCpRequest:3\x92?0\x12.\n\x12\x44\x61\x45xceptionChecked\x10\xe6\x12\x1a\x15\x44uplicate CP request.\"b\n\x1e\x44\x61\x45xceptionStressLeaseMismatch:@\x92?=\x12;\n\x14\x44\x61\x45xceptionLocalOnly\x10\xe7\x12\x1a Stress: Simulated Lease Mismatch\"d\n\x1c\x44\x61\x45xceptionFileStateMismatch:D\x92?A\x12?\n\x14\x44\x61\x45xceptionLocalOnly\x10\xe8\x12\x1a$File state changed on lease reaquire\"M\n\x16\x44\x61\x45xceptionLeaseRevoke:3\x92?0\x12.\n\x14\x44\x61\x45xceptionLocalOnly\x10\xe9\x12\x1a\x13Lease being revoked\"d\n\x1d\x44\x61\x45xceptionLeaseUpgradeNeeded:C\x92?@\x12>\n\x14\x44\x61\x45xceptionLocalOnly\x10\xea\x12\x1a#Have a read lease, need write lease\"V\n\x1b\x44\x61\x45xceptionLeaseTimeExpired:7\x92?4\x12\x32\n\x14\x44\x61\x45xceptionLocalOnly\x10\xeb\x12\x1a\x17Lease timecheck expired\"n\n\x1e\x44\x61\x45xceptionLeaseReacquireForCP:L\x92?I\x12G\n\x14\x44\x61\x45xceptionLocalOnly\x10\xed\x12\x1a,Need to reacquire lease to create precise CP\"\x99\x01\n\x1f\x44\x61\x45xceptionFmgrStreamNeedsFlush:v\x92?s\x12q\n\x14\x44\x61\x45xceptionLocalOnly\x10\xee\x12\x1aVClumpStoreStream underlying the file needs to be flushed for putXMap to make progress.\"r\n#DaExceptionFmgrWaitForXmapStability:K\x92?H\x12\x46\n\x14\x44\x61\x45xceptionLocalOnly\x10\xef\x12\x1a+Caller must wait for XMap to be stabilized.\"A\n\x16\x44\x61\x45xceptionFmgrStaleIO:\'\x92?$\x12\"\n\x12\x44\x61\x45xceptionChecked\x10\xf0\x12\x1a\tStale IO.\"\\\n\x1d\x44\x61\x45xceptionFmgrOlderSyncForSr:;\x92?8\x12\x36\n\x14\x44\x61\x45xceptionLocalOnly\x10\xf1\x12\x1a\x1bSyncForSR with older SRGen.\"\x8f\x01\n$DaExceptionFmgrFileNeedsCloseAfterCP:g\x92?d\x12\x62\n\x14\x44\x61\x45xceptionLocalOnly\x10\xf2\x12\x1aGFile needs to be closed and reopened because of CP during NVLog replay.\"\x8b\x01\n\x1b\x44\x61\x45xceptionFileHasLimboCmds:l\x92?i\x12g\n\x14\x44\x61\x45xceptionLocalOnly\x10\xf3\x12\x1aLFile needs to be closed because it has limbo commands & we need a precise CP\"|\n\x1d\x44\x61\x45xceptionFmgrNoFlsResources:[\x92?X\x12V\n\x12\x44\x61\x45xceptionChecked\x10\xf4\x12\x1a=No resources available for serving flash less server request.\"s\n\x18\x44\x61\x45xceptionFmgrNoFlsHost:W\x92?T\x12R\n\x14\x44\x61\x45xceptionLocalOnly\x10\xf5\x12\x1a\x37No hosts available to serve flash less client requests.\"k\n!DaExceptionFmgrCannotServeFlsReqs:F\x92?C\x12\x41\n\x12\x44\x61\x45xceptionChecked\x10\xf6\x12\x1a(Cannot serve any requests from NFH hosts\"\x82\x01\n\"DaExceptionNvlogWriteNeedSnapFirst\x12 \n\x0b\x63pCookieStr\x18\x01 \x01(\tR\x0b\x63pCookieStr::\x92?7\x12\x35\n\x12\x44\x61\x45xceptionChecked\x10\xf7\x12\x1a\x1aNeed to take a snap first.(\x01\"t\n\x1b\x44\x61\x45xceptionFileAcquireLease:U\x92?R\x12P\n\x12\x44\x61\x45xceptionChecked\x10\xf8\x12\x1a\x37Remote host needs to acquire lease (open file locally).\"C\n\x13\x44\x61\x45xceptionPlatform:,\x92?)\x12\'\n\x12\x44\x61\x45xceptionChecked\x10\xa8\x14\x1a\x0ePlatform error\"U\n\x1a\x44\x61\x45xceptionPlatformRunTime:7\x92?4\x12\x32\n\x14\x44\x61\x45xceptionUnchecked\x10\xa9\x14\x1a\x17Platform internal error\"c\n\x1d\x44\x61\x45xceptionPlatformRPCTimeout:B\x92??\x12=\n\x1a\x44\x61\x45xceptionPlatformRunTime\x10\xaa\x14\x1a\x1cPlatform manager RPC timeout\"l\n\"DaExceptionPlatformShutdownRequest:F\x92?C\x12\x41\n\x1a\x44\x61\x45xceptionPlatformRunTime\x10\xab\x14\x1a Platform shutdown request failed\"h\n DaExceptionPlatformReinitRequest:D\x92?A\x12?\n\x1a\x44\x61\x45xceptionPlatformRunTime\x10\xac\x14\x1a\x1ePlatform reinit request failed\"h\n DaExceptionPlatformBeaconRequest:D\x92?A\x12?\n\x1a\x44\x61\x45xceptionPlatformRunTime\x10\xad\x14\x1a\x1ePlatform beacon request failed\"\xca\x01\n*DaExceptionPlatformBatteryDischargeRequest:\x9b\x01\x92?\x97\x01\x12\x94\x01\n\x1a\x44\x61\x45xceptionPlatformRunTime\x10\xae\x14\x1asPlatform battery discharge request failed, discharge is not allowed when there\'s any battery is already discharging\"\xda\x01\n0DaExceptionPlatformCancelBatteryDischargeRequest:\xa5\x01\x92?\xa1\x01\x12\x9e\x01\n\x1a\x44\x61\x45xceptionPlatformRunTime\x10\xaf\x14\x1a}Cancel platform battery discharge request failed, you can only cancel the discharge when battery is in ready to ship status. \"h\n%DaExceptionPlatformDiskPowerOnRequest:?\x92?<\x12:\n\x1a\x44\x61\x45xceptionPlatformRunTime\x10\xb0\x14\x1a\x19Power on the disk failed.\"j\n&DaExceptionPlatformDiskPowerOffRequest:@\x92?=\x12;\n\x1a\x44\x61\x45xceptionPlatformRunTime\x10\xb1\x14\x1a\x1aPower off the disk failed.\"N\n\x12\x44\x61\x45xceptionDiskMgr:8\x92?5\x12\x33\n\x1a\x44\x61\x45xceptionPlatformRunTime\x10\xb2\x14\x1a\x12\x44isk manager error\"G\n\x17\x44\x61\x45xceptionNotDataDrive:,\x92?)\x12\'\n\x12\x44\x61\x45xceptionDiskMgr\x10\xb3\x14\x1a\x0eNot data drive\"Q\n\x1c\x44\x61\x45xceptionInvalidDriveState:1\x92?.\x12,\n\x12\x44\x61\x45xceptionDiskMgr\x10\xb4\x14\x1a\x13Invalid drive state\"K\n\x16\x44\x61\x45xceptionDriveReinit:1\x92?.\x12,\n\x12\x44\x61\x45xceptionDiskMgr\x10\xb5\x14\x1a\x13\x44rive reinit failed\"M\n\x1a\x44\x61\x45xceptionDriveNotStarted:/\x92?,\x12*\n\x12\x44\x61\x45xceptionDiskMgr\x10\xb6\x14\x1a\x11\x44rive not started\"F\n\x17\x44\x61\x45xceptionForeignDrive:+\x92?(\x12&\n\x12\x44\x61\x45xceptionDiskMgr\x10\xb7\x14\x1a\rForeign drive\"V\n\x1b\x44\x61\x45xceptionUpdateDriveState:7\x92?4\x12\x32\n\x12\x44\x61\x45xceptionDiskMgr\x10\xb8\x14\x1a\x19\x44rive state update failed\"M\n\x1a\x44\x61\x45xceptionDriveNotStopped:/\x92?,\x12*\n\x12\x44\x61\x45xceptionDiskMgr\x10\xb9\x14\x1a\x11\x44rive not stopped\"M\n\x17\x44\x61\x45xceptionDriveUnmount:2\x92?/\x12-\n\x12\x44\x61\x45xceptionDiskMgr\x10\xba\x14\x1a\x14\x44rive unmount failed\"I\n\x18\x44\x61\x45xceptionDriveNotFound:-\x92?*\x12(\n\x12\x44\x61\x45xceptionDiskMgr\x10\xbb\x14\x1a\x0f\x44rive not found\"}\n\x1a\x44\x61\x45xceptionInvalidUsername\x12\x1a\n\x08username\x18\x01 \x01(\tR\x08username:C\x92?@\x12>\n\x12\x44\x61\x45xceptionChecked\x10\xc6\x14\x1a#User name {username} does not exist(\x01\"X\n DaExceptionAuthenticationFailure:4\x92?1\x12/\n\x12\x44\x61\x45xceptionChecked\x10\xc7\x14\x1a\x16\x41uthentication failure\"R\n\x18\x44\x61\x45xceptionEmptyPassword:6\x92?3\x12\x31\n\x12\x44\x61\x45xceptionChecked\x10\xc8\x14\x1a\x18Password cannot be empty\"\x86\x01\n#DaExceptionInvalidEntriesInPassword\x12\x16\n\x06valerr\x18\x01 \x01(\tR\x06valerr:G\x92?D\x12\x42\n\x12\x44\x61\x45xceptionChecked\x10\xc9\x14\x1a)Some invalid entries in password {valerr}\"T\n\x15\x44\x61\x45xceptionClusterMgr:;\x92?8\x12\x36\n\x1a\x44\x61\x45xceptionPlatformRunTime\x10\xd0\x14\x1a\x15\x43luster manager error\"t\n\x1c\x44\x61\x45xceptionIncompatibleModel\x12\x14\n\x05model\x18\x01 \x02(\tR\x05model:>\x92?;\x12\x39\n\x15\x44\x61\x45xceptionClusterMgr\x10\xd1\x14\x1a\x1dModel {model} is incompatible\"_\n\x16\x44\x61\x45xceptionNodeNotStem:E\x92?B\x12@\n\x15\x44\x61\x45xceptionClusterMgr\x10\xd2\x14\x1a$This node is already in a DVX system\"r\n\x18\x44\x61\x45xceptionNodeNotMaster:V\x92?S\x12Q\n\x15\x44\x61\x45xceptionClusterMgr\x10\xd3\x14\x1a\x35Node is not in expected state, please contact support\"s\n\x18\x44\x61\x45xceptionNoDataFloatIp:W\x92?T\x12R\n\x15\x44\x61\x45xceptionClusterMgr\x10\xd4\x14\x1a\x36\x44\x61ta floating IP address is not configured on this DVX\"o\n\x1a\x44\x61\x45xceptionNodeUnreachable\x12\x12\n\x04node\x18\x01 \x02(\tR\x04node:=\x92?:\x12\x38\n\x15\x44\x61\x45xceptionClusterMgr\x10\xd5\x14\x1a\x1cNode {node} is not reachable\"_\n\x1b\x44\x61\x45xceptionPlatformSyncFile:@\x92?=\x12;\n\x13\x44\x61\x45xceptionPlatform\x10\xd6\x14\x1a!Platform sync file request failed\"l\n\x1b\x44\x61\x45xceptionPlatformDiagPing:M\x92?J\x12H\n\x13\x44\x61\x45xceptionPlatform\x10\xd7\x14\x1a.Platform network diagostic ping request failed\"b\n\x1e\x44\x61\x45xceptionControllerNotActive:@\x92?=\x12;\n\x13\x44\x61\x45xceptionPlatform\x10\xd8\x14\x1a!Current controller is not Active.\"x\n\x1e\x44\x61\x45xceptionNetworkConfigExists\x12\x14\n\x05\x63onId\x18\x01 \x01(\tR\x05\x63onId:@\x92?=\x12;\n\x13\x44\x61\x45xceptionPlatform\x10\xd9\x14\x1a!Network config exists for {conId}\"\xa2\x01\n DaExceptionNoLinkOnAnyMgmtIfaces\x12\x18\n\x07mifaces\x18\x01 \x01(\tR\x07mifaces:d\x92?a\x12_\n\x13\x44\x61\x45xceptionPlatform\x10\xda\x14\x1a\x45No link found on any the mgmt ifaces {mifaces}, please check cables. \"\xa7\x01\n\x1c\x44\x61\x45xceptionNodesLimitReached\x12\x1e\n\nnodesLimit\x18\x01 \x02(\rR\nnodesLimit:g\x92?d\x12\x62\n\x15\x44\x61\x45xceptionClusterMgr\x10\xdb\x14\x1a\x46\x44VX is at the maximum ({nodesLimit}) number of supported nodes already\"\x9b\x01\n\x1e\x44\x61\x45xceptionNodeExistsInCluster\x12\x16\n\x06serial\x18\x01 \x02(\tR\x06serial:a\x92?^\x12\\\n\x15\x44\x61\x45xceptionClusterMgr\x10\xdc\x14\x1a@The node with serial number {serial} is already part of this DVX\"\x96\x01\n\x1f\x44\x61\x45xceptionNodeMayBeUnreachable\x12\x12\n\x04node\x18\x01 \x02(\tR\x04node:_\x92?\\\x12Z\n\x15\x44\x61\x45xceptionClusterMgr\x10\xdd\x14\x1a>Node {node} is not reachable OR may be already part of the DVX\"\x87\x01\n&DaExceptionLeaseUpgradeForRepackFailed:]\x92?Z\x12X\n\x12\x44\x61\x45xceptionChecked\x10\x8c\x15\x1a?Lease upgrade for repack failed, since other readers are active\"\x89\x01\n\x1d\x44\x61\x45xceptionServiceUnavailable\x12 \n\x0bserviceName\x18\x01 \x02(\tR\x0bserviceName:F\x92?C\x12\x41\n\x14\x44\x61\x45xceptionUnchecked\x10\xf0\x15\x1a$Service {serviceName} is unavailable0\x01\"\x8b\x01\n\x1e\x44\x61\x45xceptionServiceUnresponsive\x12 \n\x0bserviceName\x18\x01 \x02(\tR\x0bserviceName:G\x92?D\x12\x42\n\x14\x44\x61\x45xceptionUnchecked\x10\xf1\x15\x1a%Service {serviceName} is unresponsive0\x01\"\xca\x01\n$DaExceptionvCenterRegistrationFailed\x12\x14\n\x05\x65rror\x18\x01 \x01(\tR\x05\x65rror\x12\x12\n\x04user\x18\x02 \x02(\tR\x04user:x\x92?u\x12s\n\x14\x44\x61\x45xceptionUnchecked\x10\xf2\x15\x1aVvCenter registration failed for the user: \'{user}\' with the following error: \'{error}\'(\x01\"\xce\x02\n&DaExceptionvCenterUnregistrationFailed\x12\x14\n\x05\x65rror\x18\x01 \x01(\tR\x05\x65rror:\x8d\x02\x92?\x89\x02\x12\x86\x02\n\x14\x44\x61\x45xceptionUnchecked\x10\xf3\x15\x1a\xe8\x01vCenter unregister operation failed: \'{error}\'.\nIf the vCenter server is permanently unavailable or if this DVX is already unregistered from the vCenter server, use --force option to remove the registration information from the DVX.(\x01\"\xcf\x01\n$DaExceptionvCenterRegistrationExists\x12\x18\n\x07vCenter\x18\x01 \x02(\tR\x07vCenter:\x8c\x01\x92?\x88\x01\x12\x85\x01\n\x18\x44\x61\x45xceptionAlreadyExists\x10\xf4\x15\x1a\x66vCenter {vCenter} is currently registered. Run \'config vcenter unregister {vCenter}\' to unregister it.\"\x83\x01\n\x19\x44\x61\x45xceptionvCenterUnknown\x12\x18\n\x07vCenter\x18\x01 \x02(\tR\x07vCenter:L\x92?I\x12G\n\x14\x44\x61\x45xceptionUnchecked\x10\xf5\x15\x1a,vCenter \'{vCenter}\' is not known to this DVX\"\xfa\x01\n\x1a\x44\x61\x45xceptionSupportNotFound\x12\x1c\n\tsupportId\x18\x01 \x02(\tR\tsupportId:\xbd\x01\x92?\xb9\x01\x12\xb6\x01\n\x14\x44\x61\x45xceptionUnchecked\x10\xf6\x15\x1a\x9a\x01Support ID {supportId} was not found on the server. Either the support has completed or never existed.\nPlease run \'support submit\' to submit a new support\"Y\n\x1b\x44\x61\x45xceptionNotAuthenticated::\x92?7\x12\x35\n\x14\x44\x61\x45xceptionUnchecked\x10\xf7\x15\x1a\x18\x43lient not authenticated0\x01\"\x99\x01\n(DaExceptionMailserverConfigurationFailed\x12\x14\n\x05\x65rror\x18\x01 \x02(\tR\x05\x65rror:W\x92?T\x12R\n\x14\x44\x61\x45xceptionUnchecked\x10\xf8\x15\x1a\x37Mailserver configuration test failed with error {error}\"\xa1\x01\n\x14\x44\x61\x45xceptionHostInUse:\x88\x01\x92?\x84\x01\x12\x81\x01\n\x14\x44\x61\x45xceptionUnchecked\x10\xf9\x15\x1a\x66\x43\x61nnot remove the host. It is currently using the DVX. Make sure it is safe to remove and use --force.\"l\n\x16\x44\x61\x45xceptionHostUnknown\x12\x12\n\x04host\x18\x01 \x02(\tR\x04host:>\x92?;\x12\x39\n\x14\x44\x61\x45xceptionUnchecked\x10\xfa\x15\x1a\x1e\x45rror - Unknown host \'{host}\'.\"\xd1\x01\n(DaExceptionInvalidEventFilterCombination\x12\x12\n\x04host\x18\x01 \x02(\tR\x04host:\x90\x01\x92?\x8c\x01\x12\x89\x01\n\x14\x44\x61\x45xceptionUnchecked\x10\xfb\x15\x1anThe specified filter combination is invalid. Specify only one of --severity, --event-type or --component-name.\"^\n\x14\x44\x61\x45xceptionNovCenter:F\x92?C\x12\x41\n\x14\x44\x61\x45xceptionUnchecked\x10\xfc\x15\x1a&DVX is not registered with any vCenter\"~\n\x17\x44\x61\x45xceptionvCenterError\x12\"\n\x0cvCenterError\x18\x01 \x02(\tR\x0cvCenterError:?\x92?<\x12:\n\x14\x44\x61\x45xceptionUnchecked\x10\xfd\x15\x1a\x1fvCenter responded with an error\"\x86\x01\n DaExceptionAtLeastOneArgRequired\x12\x1a\n\x08\x61rgument\x18\x01 \x02(\tR\x08\x61rgument:F\x92?C\x12\x41\n\x14\x44\x61\x45xceptionUnchecked\x10\xfe\x15\x1a$Specify at least one of \'{argument}\'0\x01\"\x8b\x01\n DaExceptionMutuallyExclusiveArgs\x12\x1a\n\x08\x61rgument\x18\x01 \x02(\tR\x08\x61rgument:K\x92?H\x12\x46\n\x14\x44\x61\x45xceptionUnchecked\x10\xff\x15\x1a)Only one of \'{argument}\' can be specified0\x01\"{\n DaExceptionExactlyOneArgRequired\x12\x1a\n\x08\x61rgument\x18\x01 \x02(\tR\x08\x61rgument:;\x92?8\x12\x36\n\x14\x44\x61\x45xceptionUnchecked\x10\x80\x16\x1a\x19Specify one of {argument}0\x01\"\xb7\x01\n\x1c\x44\x61\x45xceptionSupportNotRunning:\x96\x01\x92?\x92\x01\x12\x8f\x01\n\x14\x44\x61\x45xceptionUnchecked\x10\x81\x16\x1atThere is no currently running or recent \'support submit\' task.  Run \'support submit\' to submit a new support bundle.\"\x8c\x01\n DaExceptionInvalidCronExpression\x12\x1e\n\nexpression\x18\x01 \x01(\tR\nexpression:H\x92?E\x12\x43\n\x14\x44\x61\x45xceptionUnchecked\x10\x82\x16\x1a&Invalid cron expression \"{expression}\"(\x01\"\xe1\x01\n\x1e\x44\x61\x45xceptionInvalidIPSubnetMask\x12\x10\n\x03ip1\x18\x01 \x02(\tR\x03ip1\x12\x10\n\x03ip2\x18\x02 \x02(\tR\x03ip2\x12\x18\n\x07netmask\x18\x03 \x02(\tR\x07netmask:\x80\x01\x92?}\x12{\n\x14\x44\x61\x45xceptionUnchecked\x10\x83\x16\x1a`{ip2} is in a different subnet than the floating IP address {ip1}. The subnet mask is {netmask}.\"T\n\x16\x44\x61\x45xceptionDropToShell::\x92?7\x12\x35\n\x14\x44\x61\x45xceptionUnchecked\x10\x84\x16\x1a\x1a\x45nabling root login failed\"\x99\x01\n\x1a\x44\x61\x45xceptionAllArgsRequired\x12\x1a\n\x08\x61rgument\x18\x01 \x02(\tR\x08\x61rgument:_\x92?\\\x12Z\n\x14\x44\x61\x45xceptionUnchecked\x10\x85\x16\x1a?If you specify one of {argument}, you must specify all of them.\"\xd3\x01\n\x16\x44\x61\x45xceptionDuplicateIP\x12\x0e\n\x02ip\x18\x01 \x02(\tR\x02ip\x12\x14\n\x05port1\x18\x02 \x02(\tR\x05port1\x12\x14\n\x05port2\x18\x03 \x02(\tR\x05port2:}\x92?z\x12x\n\x14\x44\x61\x45xceptionUnchecked\x10\x86\x16\x1a]IP {ip} provided in network configuration for {port1} is already used for {port2} in this DVX\"a\n\x1e\x44\x61\x45xceptionCliOperationAborted:?\x92?<\x12:\n\x14\x44\x61\x45xceptionUnchecked\x10\x87\x16\x1a\x1fThis operation has been aborted\"c\n\x1e\x44\x61\x45xceptionRegistrationFailure:A\x92?>\x12<\n\x14\x44\x61\x45xceptionUnchecked\x10\x88\x16\x1a!Failed to register the extension.\"o\n#DaExceptionvCenterConnectionFailure:H\x92?E\x12\x43\n\x14\x44\x61\x45xceptionUnchecked\x10\x89\x16\x1a(Failed to connect to the vCenter server.\"\x8c\x01\n(DaExceptionvCenterConnectionMalformedUrl\x12\x10\n\x03url\x18\x01 \x02(\tR\x03url:N\x92?K\x12I\n#DaExceptionvCenterConnectionFailure\x10\x8a\x16\x1a\x1fMalformed vim SDK URL argument.\"{\n\x1e\x44\x61\x45xceptionvCenterLoginFailure:Y\x92?V\x12T\n#DaExceptionvCenterConnectionFailure\x10\x8b\x16\x1a*Failed to perform login to vCenter server.\"\x7f\n\x1f\x44\x61\x45xceptionvCenterLogoutFailure:\\\x92?Y\x12W\n#DaExceptionvCenterConnectionFailure\x10\x8c\x16\x1a-Failed to perform logout from vCenter server.\"\x84\x01\n#DaExceptionvCenterSSLInitialization:]\x92?Z\x12X\n#DaExceptionvCenterConnectionFailure\x10\x8d\x16\x1a.Error doing SSL handshake with vCenter server.\"\xbf\x01\n%DaExceptionQualifyingArgumentNotFound\x12\x1c\n\targument1\x18\x01 \x02(\tR\targument1\x12\x1c\n\targument2\x18\x02 \x02(\tR\targument2:Z\x92?W\x12U\n\x14\x44\x61\x45xceptionUnchecked\x10\x8e\x16\x1a\x38If you specify {argument1}, you must specify {argument2}0\x01\"q\n\'DaExceptionCloudViewRegistrationFailure:F\x92?C\x12\x41\n\x14\x44\x61\x45xceptionUnchecked\x10\x8f\x16\x1a&Failed to register DVX with cloudview.\"n\n)DaExceptionClumpstoreCancelWriterRecovery:A\x92?>\x12<\n\x12\x44\x61\x45xceptionChecked\x10\xd4\x16\x1a#Cancel a ClumpStore writer recovery\"Z\n\x1f\x44\x61\x45xceptionClumpstoreNotEnabled:7\x92?4\x12\x32\n\x12\x44\x61\x45xceptionChecked\x10\xd5\x16\x1a\x19\x43lumpStore is not enabled\"i\n$DaExceptionDaggerSubmissionsDisabled:A\x92?>\x12<\n\x12\x44\x61\x45xceptionChecked\x10\xb8\x17\x1a#Dagger job submissions are disabled\"V\n\x1c\x44\x61\x45xceptionDaggerJobCanceled:6\x92?3\x12\x31\n\x14\x44\x61\x45xceptionLocalOnly\x10\xb9\x17\x1a\x16\x44\x61gger job is canceled\"i\n\x1a\x44\x61\x45xceptionDaggerQueueFull:K\x92?H\x12\x46\n\x12\x44\x61\x45xceptionChecked\x10\xba\x17\x1a-Exceeded the number of concurrent Dagger jobs\"\\\n\x1b\x44\x61\x45xceptionDaggerJobRunning:=\x92?:\x12\x38\n\x12\x44\x61\x45xceptionChecked\x10\xbb\x17\x1a\x1f\x41ttempt to retire a running job\"\x90\x01\n$DaExceptionAutoSupportDownloadFailed\x12\x16\n\x06reason\x18\x01 \x01(\tR\x06reason:P\x92?M\x12K\n\x14\x44\x61\x45xceptionUnchecked\x10\x9c\x18\x1a.Support bundle download failed due to {reason}(\x01\"\x92\x01\n(DaExceptionAutoSupportBundleUploadFailed\x12\x16\n\x06reason\x18\x01 \x01(\tR\x06reason:N\x92?K\x12I\n\x14\x44\x61\x45xceptionUnchecked\x10\x9d\x18\x1a,Support bundle upload failed due to {reason}(\x01\"\xa2\x01\n,DaExceptionAutoSupportServerConnectionFailed\x12\x16\n\x06reason\x18\x01 \x01(\tR\x06reason:Z\x92?W\x12U\n\x14\x44\x61\x45xceptionUnchecked\x10\x9e\x18\x1a\x38HTTP connection to support server failed due to {reason}(\x01\"\x81\x01\n\x1f\x44\x61\x45xceptionTriggerSupportFailed\x12\x16\n\x06reason\x18\x01 \x01(\tR\x06reason:F\x92?C\x12\x41\n\x12\x44\x61\x45xceptionChecked\x10\x9f\x18\x1a&Trigger support failed due to {reason}(\x01\"\x9e\x01\n(DaExceptionDebugSupportAlreadyInProgress\x12\x1c\n\tsupportId\x18\x01 \x02(\tR\tsupportId:T\x92?Q\x12O\n\x14\x44\x61\x45xceptionUnchecked\x10\xa0\x18\x1a\x32\x41 debug support {supportId} is already in progress(\x01\"\x9f\x01\n-DaExceptionDebugSupportBundleCollectionFailed\x12\x16\n\x06reason\x18\x01 \x01(\tR\x06reason:V\x92?S\x12Q\n\x12\x44\x61\x45xceptionChecked\x10\xa1\x18\x1a\x36\x44\x65\x62ug support bundle collection failed due to {reason}(\x01\"h\n\x1e\x44\x61\x45xceptionAutoSupportDisabled:F\x92?C\x12\x41\n\x14\x44\x61\x45xceptionUnchecked\x10\xa2\x18\x1a&Autosupport is disabled on this system\"]\n DaExceptionMonitoringInterrupted:9\x92?6\x12\x34\n\x14\x44\x61\x45xceptionUnchecked\x10\xa3\x18\x1a\x19Monitoring is interrupted\"o\n\x15\x44\x61\x45xceptionSRDisabled\x12&\n\x0e\x64\x61tastoreIdStr\x18\x01 \x02(\tR\x0e\x64\x61tastoreIdStr:.\x92?+\x12)\n\x12\x44\x61\x45xceptionChecked\x10\x80\x19\x1a\x0eSR is disabled(\x01\"p\n\x17\x44\x61\x45xceptionSRInProgress\x12&\n\x0e\x64\x61tastoreIdStr\x18\x01 \x02(\tR\x0e\x64\x61tastoreIdStr:-\x92?*\x12(\n\x12\x44\x61\x45xceptionChecked\x10\x81\x19\x1a\rSR is running(\x01\"P\n\x19\x44\x61\x45xceptionRepackDisabled:3\x92?0\x12.\n\x12\x44\x61\x45xceptionChecked\x10\xe4\x19\x1a\x15RepackSvc is disabled\"Y\n\x1a\x44\x61\x45xceptionRepackJobFailed:;\x92?8\x12\x36\n\x12\x44\x61\x45xceptionChecked\x10\xe5\x19\x1a\x1dRepackSvc\'s dagger job failed\"l\n$DaExceptionMaxRepackJobsLimitReached:D\x92?A\x12?\n\x12\x44\x61\x45xceptionChecked\x10\xe6\x19\x1a&RepackSvc\'s max jobs limit is reached.\"U\n\x1f\x44\x61\x45xceptionOncRpcGarbageCallhdr:2\x92?/\x12-\n\x14\x44\x61\x45xceptionUnchecked\x10\xac\x1b\x1a\x12\x43\x61llhdr is garbage\"\\\n\x1c\x44\x61\x45xceptionOncRpcGarbageArgs:<\x92?9\x12\x37\n\x14\x44\x61\x45xceptionUnchecked\x10\xad\x1b\x1a\x1cInput argruments are garbage\"X\n\x1c\x44\x61\x45xceptionOncRpcProgUnavail:8\x92?5\x12\x33\n\x14\x44\x61\x45xceptionUnchecked\x10\xae\x1b\x1a\x18Program is not available\"a\n\x1d\x44\x61\x45xceptionOncRpcProgMismatch:@\x92?=\x12;\n\x14\x44\x61\x45xceptionUnchecked\x10\xaf\x1b\x1a Program version is not available\"Z\n\x1c\x44\x61\x45xceptionOncRpcProcUnavail::\x92?7\x12\x35\n\x14\x44\x61\x45xceptionUnchecked\x10\xb0\x1b\x1a\x1aProcedure is not available\"U\n\x1f\x44\x61\x45xceptionOncRpcGarbageResphdr:2\x92?/\x12-\n\x14\x44\x61\x45xceptionUnchecked\x10\xb1\x1b\x1a\x12Resphdr is garbage\"`\n\x1d\x44\x61\x45xceptionOncRpcCallRejected:?\x92?<\x12:\n\x14\x44\x61\x45xceptionUnchecked\x10\xb2\x1b\x1a\x1f\x43\x61ll was rejected by the server\"J\n\x1a\x44\x61\x45xceptionOncRpcSystemErr:,\x92?)\x12\'\n\x14\x44\x61\x45xceptionUnchecked\x10\xb3\x1b\x1a\x0cSystem error\"^\n\x10\x44\x61\x45xceptionPyExc:J\x92?G\x12\x45\n\x14\x44\x61\x45xceptionLocalOnly\x10\x90\x1c\x1a*A Python function set the error indicator.\"\xbc\x01\n\x0f\x44\x61\x45xceptionSgIo\x12\"\n\x0cmaskedStatus\x18\x01 \x02(\rR\x0cmaskedStatus\x12\"\n\x0c\x64riverStatus\x18\x02 \x02(\rR\x0c\x64riverStatus\x12\x1e\n\nhostStatus\x18\x03 \x02(\rR\nhostStatus\x12\x14\n\x05sense\x18\x04 \x02(\tR\x05sense:+\x92?(\x12&\n\rDaExceptionIo\x10\xf4\x1c\x1a\x12SgIo returns error\"`\n!DaExceptionScsiDeviceDisconnected:;\x92?8\x12\x36\n\x0f\x44\x61\x45xceptionSgIo\x10\xf5\x1c\x1a SgIo returns Device disconnected\"O\n\x16\x44\x61\x45xceptionUnknownSgIo:5\x92?2\x12\x30\n\x0f\x44\x61\x45xceptionSgIo\x10\xf6\x1c\x1a\x1aSgIo returns unknown error\"[\n\x1b\x44\x61\x45xceptionScsiResvConflict:<\x92?9\x12\x37\n\x0f\x44\x61\x45xceptionSgIo\x10\xf7\x1c\x1a!SgIo returns reservation conflict\"M\n\x19\x44\x61\x45xceptionVmDoesNotExist:0\x92?-\x12+\n\x12\x44\x61\x45xceptionChecked\x10\xd8\x1d\x1a\x12VM does not exist.\"f\n\x1b\x44\x61\x45xceptionVmParsingFailure:G\x92?D\x12\x42\n\x12\x44\x61\x45xceptionChecked\x10\xd9\x1d\x1a)Failure in parsing VM configuration file.\"Z\n\x18\x44\x61\x45xceptionVmParsingNoKv:>\x92?;\x12\x39\n\x12\x44\x61\x45xceptionChecked\x10\xda\x1d\x1a Line does not contain key-value.\"a\n\"DaExceptionVmParsingBufferTooSmall:;\x92?8\x12\x36\n\x12\x44\x61\x45xceptionChecked\x10\xdb\x1d\x1a\x1dProvided buffer is too small.\"Y\n\x19\x44\x61\x45xceptionVmFileHasOwner:<\x92?9\x12\x37\n\x12\x44\x61\x45xceptionChecked\x10\xdc\x1d\x1a\x1e\x46ile is already owned by a VM.\"i\n\x1a\x44\x61\x45xceptionTooManyTotalVms:K\x92?H\x12\x46\n\x14\x44\x61\x45xceptionUnchecked\x10\xdd\x1d\x1a+There are too many total VMs in the system.\"o\n\x16\x44\x61\x45xceptionBadDiskFile:U\x92?R\x12P\n\x12\x44\x61\x45xceptionChecked\x10\xde\x1d\x1a\x37Virtual disk file(s) have unexpected content/structure.\"{\n+DaExceptionUnsupportedVirtualDiskFileFormat:L\x92?I\x12G\n\x12\x44\x61\x45xceptionChecked\x10\xdf\x1d\x1a.The virtual disk file format is not supported.\"X\n\x1e\x44\x61\x45xceptionControllerNotSynced:6\x92?3\x12\x31\n\x12\x44\x61\x45xceptionChecked\x10\xbc\x1e\x1a\x18\x43ontroller is not synced\"^\n\x1d\x44\x61\x45xceptionFailoverInProgress:=\x92?:\x12\x38\n\x12\x44\x61\x45xceptionChecked\x10\xbd\x1e\x1a\x1f\x46\x61ilover is already in progress\"T\n\x1c\x44\x61\x45xceptionUpgradeInProgress:4\x92?1\x12/\n\x12\x44\x61\x45xceptionChecked\x10\xbe\x1e\x1a\x16Upgrade is in progress\"}\n/DaExceptionPeerControllerBadNetworkConnectivity:J\x92?G\x12\x45\n\x12\x44\x61\x45xceptionChecked\x10\xbf\x1e\x1a,Peer controller has bad network connectivity\"\x86\x01\n(DaExceptionNetworkSetupAlreadyInProgress\x12\x12\n\x04uuid\x18\x01 \x02(\tR\x04uuid:F\x92?C\x12\x41\n\x14\x44\x61\x45xceptionUnchecked\x10\x84 \x1a&A network setup is already in progress\"h\n!DaExceptionNoNetworkSetupToCommit:C\x92?@\x12>\n\x14\x44\x61\x45xceptionUnchecked\x10\x85 \x1a#There is no network setup to commit\"\x7f\n\x1d\x44\x61\x45xceptionNetworkSetupFailed\x12\x16\n\x06reason\x18\x01 \x01(\tR\x06reason:F\x92?C\x12\x41\n\x14\x44\x61\x45xceptionUnchecked\x10\x86 \x1a$Network setup failed due to {reason}(\x01\"\x8d\x01\n%DaExceptionNetworkSetupRequiresCommit\x12\x12\n\x04uuid\x18\x01 \x02(\tR\x04uuid:P\x92?M\x12K\n\x14\x44\x61\x45xceptionUnchecked\x10\x87 \x1a\x30There is a pending network setup to be committed\"g\n DaExceptionNvramChecksumMismatch:C\x92?@\x12>\n\x14\x44\x61\x45xceptionLocalOnly\x10\xe8 \x1a#There is checksum mismatch in NVRam\"\x87\x01\n\x1d\x44\x61\x45xceptionConfEntryIsInvalid:f\x92?c\x12\x61\n\x14\x44\x61\x45xceptionLocalOnly\x10\xcc!\x1a\x46This conf entry does not exist. Please check moduleName and optionName\"r\n\x1c\x44\x61\x45xceptionConfEntryIsLocked:R\x92?O\x12M\n\x14\x44\x61\x45xceptionLocalOnly\x10\xcd!\x1a\x32This conf entry is locked and can not be modified.\"k\n DaExceptionConfEntryOutsideRange:G\x92?D\x12\x42\n\x14\x44\x61\x45xceptionLocalOnly\x10\xce!\x1a\'The conf value is outside of the range.\"}\n(DaExceptionConfModuleCookieAlreadyExists:Q\x92?N\x12L\n\x14\x44\x61\x45xceptionLocalOnly\x10\xcf!\x1a\x31The module cookie for this entity already exists.\"_\n DaExceptionConfigVersionMismatch:;\x92?8\x12\x36\n\x14\x44\x61\x45xceptionUnchecked\x10\x88\'\x1a\x1bVersion numbers don\'t match\"\xc2\x01\n0DaExceptionRemoteDataRetrievalVersionUnsupported\x12\x18\n\x07version\x18\x01 \x02(\tR\x07version:t\x92?q\x12o\n\x14\x44\x61\x45xceptionUnchecked\x10\x89\'\x1aTCan only retrieve data from destination DVX systems with version {version} or higher\"\xc7\x01\n,DaExceptionRemoteOperationVersionUnsupported\x12\x18\n\x07version\x18\x01 \x02(\tR\x07version:}\x92?z\x12x\n\x14\x44\x61\x45xceptionUnchecked\x10\x8a\'\x1a]Can only invoke remote operations on destination DVX systems with version {version} or higher\"L\n\x15\x44\x61\x45xceptionEonRunning:3\x92?0\x12.\n\x12\x44\x61\x45xceptionChecked\x10\xec\'\x1a\x15\x45on is still running.\"F\n\x16\x44\x61\x45xceptionEonNotFound:,\x92?)\x12\'\n\x12\x44\x61\x45xceptionChecked\x10\xed\'\x1a\x0e\x45on not found.\"I\n\x14\x44\x61\x45xceptionEonExists:1\x92?.\x12,\n\x12\x44\x61\x45xceptionChecked\x10\xee\'\x1a\x13\x45on already exists.\"Y\n\x1d\x44\x61\x45xceptionEonLocationUnknown:8\x92?5\x12\x33\n\x14\x44\x61\x45xceptionLocalOnly\x10\xef\'\x1a\x18\x45on location is unknown.\"N\n\x16\x44\x61\x45xceptionEonCanceled:4\x92?1\x12/\n\x12\x44\x61\x45xceptionChecked\x10\xf0\'\x1a\x16\x45on has been canceled.\"P\n\x15\x44\x61\x45xceptionEonRetried:7\x92?4\x12\x32\n\x14\x44\x61\x45xceptionLocalOnly\x10\xf1\'\x1a\x17The Eon rpc is a retry.\"T\n\x17\x44\x61\x45xceptionEonTestError:9\x92?6\x12\x34\n\x12\x44\x61\x45xceptionChecked\x10\xf2\'\x1a\x1b\x41n test eon-specific error.\"g\n\x12\x44\x61\x45xceptionEonBusy:Q\x92?N\x12L\n\x14\x44\x61\x45xceptionLocalOnly\x10\xf3\'\x1a\x31Max in-flight eons have reached in the EonClient.\"p\n\x1e\x44\x61\x45xceptionEonGenCountRejected:N\x92?K\x12I\n\x12\x44\x61\x45xceptionChecked\x10\xf4\'\x1a\x30Submit is rejected due to unacceptable genCount.\"^\n!DaExceptionContainersetNotEnabled:9\x92?6\x12\x34\n\x12\x44\x61\x45xceptionChecked\x10\xd0(\x1a\x1b\x43ontainerSet is not enabled\"[\n\"DaExceptionReplTooManyReplicaSites:5\x92?2\x12\x30\n\x12\x44\x61\x45xceptionChecked\x10\xb4)\x1a\x17Too many replica sites.\"Z\n!DaExceptionReplInvalidReplicaSite:5\x92?2\x12\x30\n\x12\x44\x61\x45xceptionChecked\x10\xb5)\x1a\x17Replica site is invalid\"^\n\"DaExceptionReplUnpairedReplicaSite:8\x92?5\x12\x33\n\x12\x44\x61\x45xceptionChecked\x10\xb6)\x1a\x1aReplica site is not paired\"\\\n\"DaExceptionReplDisabledReplicaSite:6\x92?3\x12\x31\n\x12\x44\x61\x45xceptionChecked\x10\xb7)\x1a\x18Replica site is disabled\"Z\n!DaExceptionReplRevokedReplicaSite:5\x92?2\x12\x30\n\x12\x44\x61\x45xceptionChecked\x10\xb8)\x1a\x17Replica site is revoked\"d\n%DaExceptionReplUnavailableReplicaSite:;\x92?8\x12\x36\n\x12\x44\x61\x45xceptionChecked\x10\xb9)\x1a\x1dReplica site is not available\"X\n$DaExceptionReplLocalNameAlreadyInUse:0\x92?-\x12+\n\x12\x44\x61\x45xceptionChecked\x10\xba)\x1a\x12Illegal local name\"r\n$DaExceptionReplIpAddressAlreadyInUse:J\x92?G\x12\x45\n\x12\x44\x61\x45xceptionChecked\x10\xbb)\x1a,IP address already in use by some other site\"m\n%DaExceptionReplIpAddressChangeFailure:D\x92?A\x12?\n\x12\x44\x61\x45xceptionChecked\x10\xbc)\x1a&Replica-site IP address change failure\"V\n\x1f\x44\x61\x45xceptionReplSrcFeUnavailable:3\x92?0\x12.\n\x12\x44\x61\x45xceptionChecked\x10\xbd)\x1a\x15Source FE unavailable\"[\n\x1f\x44\x61\x45xceptionReplDstFeUnavailable:8\x92?5\x12\x33\n\x12\x44\x61\x45xceptionChecked\x10\xbe)\x1a\x1a\x44\x65stination FE unavailable\"l\n)DaExceptionReplRemoteScrollSvcUnavailable:?\x92?<\x12:\n\x12\x44\x61\x45xceptionChecked\x10\xbf)\x1a!Remote scroll service unavailable\"e\n\"DaExceptionReplRemoteScrollStopped:?\x92?<\x12:\n\x12\x44\x61\x45xceptionChecked\x10\xc0)\x1a!Remote scroll replication stopped\"_\n\x19\x44\x61\x45xceptionReplInShutdown:B\x92??\x12=\n\x12\x44\x61\x45xceptionChecked\x10\xc1)\x1a$Replication service is shutting down\"r\n\x1d\x44\x61\x45xceptionReplDstUnknownTask:Q\x92?N\x12L\n\x12\x44\x61\x45xceptionChecked\x10\xc2)\x1a\x33Replication destination doesn\'t recognize the task.\"k\n\x19\x44\x61\x45xceptionReplDstHasSnap:N\x92?K\x12I\n\x12\x44\x61\x45xceptionChecked\x10\xc3)\x1a\x30Replication destination already has the PG snap.\"j\n\"DaExceptionReplRemoteScrollDropped:D\x92?A\x12?\n\x12\x44\x61\x45xceptionChecked\x10\xc4)\x1a&Remote scroll expired from scroll svc.\"u\n!DaExceptionReplNetworkCheckFailed:P\x92?M\x12K\n\x12\x44\x61\x45xceptionChecked\x10\xc5)\x1a\x32Initial replication network check returned errors.\"{\n\x1e\x44\x61\x45xceptionReplVersionMismatch:Y\x92?V\x12T\n\x12\x44\x61\x45xceptionChecked\x10\xc6)\x1a;Source and destination have incompatible software versions.\"T\n\x1e\x44\x61\x45xceptionReplBusyReplicaSite:2\x92?/\x12-\n\x12\x44\x61\x45xceptionChecked\x10\xc7)\x1a\x14Replica site is busy\"_\n\x1d\x44\x61\x45xceptionReplTaskUserCancel:>\x92?;\x12\x39\n\x12\x44\x61\x45xceptionChecked\x10\xc8)\x1a Replication was canceled by user\"h\n\x1e\x44\x61\x45xceptionReplSnapUnavailable:F\x92?C\x12\x41\n\x12\x44\x61\x45xceptionChecked\x10\xc9)\x1a(Replication stopped due to missing snap.\"o\n!DaExceptionReplInvalidSiteAddress:J\x92?G\x12\x45\n\x12\x44\x61\x45xceptionChecked\x10\xca)\x1a,Invalid network address for the replica site\"\xe4\x01\n&DaExceptionReplRemoveReplicaSiteFailed:\xb9\x01\x92?\xb5\x01\x12\xb2\x01\n\x12\x44\x61\x45xceptionChecked\x10\xcb)\x1a\x98\x01Replica site remove failed. To remove anyway, try again with --force; you might have to log in to destination DVX and revoke access from this source DVX\"W\n\x13\x44\x61\x45xceptionReplRofs:@\x92?=\x12;\n\x14\x44\x61\x45xceptionUnchecked\x10\xcc)\x1a\x1eReplica site in read-only mode0\x01\"x\n&DaExceptionReplRetryFromDstReplicaSite:N\x92?K\x12I\n\x12\x44\x61\x45xceptionChecked\x10\xcd)\x1a\x30Task retry must be done from source replica site\"\x8d\x01\n%DaExceptionReplCriticalSrcReplicaSite:d\x92?a\x12_\n\x12\x44\x61\x45xceptionChecked\x10\xce)\x1a\x46Source replica site has a critical health status. Replication Stopped.\"\x92\x01\n%DaExceptionReplCriticalDstReplicaSite:i\x92?f\x12\x64\n\x12\x44\x61\x45xceptionChecked\x10\xcf)\x1aKDestination replica site has a critical health status. Replication Stopped.\"\x99\x01\n,DaExceptionReplEncryptionChangeRollbackError:i\x92?f\x12\x64\n\x12\x44\x61\x45xceptionChecked\x10\xd0)\x1aKEnabling or disabling encryption failed with potentially inconsistent state\"T\n\x1a\x44\x61\x45xceptionReplTaskFailure:6\x92?3\x12\x31\n\x12\x44\x61\x45xceptionChecked\x10\xd1)\x1a\x18Replication task failed.\"c\n\x19\x44\x61\x45xceptionReplDstNoSpace:F\x92?C\x12\x41\n\x12\x44\x61\x45xceptionChecked\x10\xd2)\x1a(Destination replica site is out of space\"\x80\x01\n)DaExceptionReplSelfReplicationUnsupported:S\x92?P\x12N\n\x12\x44\x61\x45xceptionChecked\x10\xd3)\x1a\x35Source and destination replica sites must be distinct\"u\n\x1e\x44\x61\x45xceptionReplApplyDiffFailed:S\x92?P\x12N\n\x12\x44\x61\x45xceptionChecked\x10\xd4)\x1a\x35Generating file snap on destination from diff failed.\"a\n\x1a\x44\x61\x45xceptionReplTaskRemoved:C\x92?@\x12>\n\x12\x44\x61\x45xceptionChecked\x10\xd5)\x1a%Task has been removed from Snapstore.\"{\n(DaExceptionReplBandwidthLimitChangeError:O\x92?L\x12J\n\x12\x44\x61\x45xceptionChecked\x10\xd6)\x1a\x31\x43hanging bandwidth limit failed. Try again later.\"g\n!DaExceptionReplSourceSwitchedTask:B\x92??\x12=\n\x12\x44\x61\x45xceptionChecked\x10\xd8)\x1a$Source switched to a different task.\"\x83\x01\n2DaExceptionReplAuthenticationFailureDstReplicaSite:M\x92?J\x12H\n\x12\x44\x61\x45xceptionChecked\x10\xd9)\x1a/Destination replica site authentication failure\"f\n\x16\x44\x61\x45xceptionReplDstRofs:L\x92?I\x12G\n\x14\x44\x61\x45xceptionUnchecked\x10\xda)\x1a*Destination replica site in read-only mode0\x01\"~\n0DaExceptionReplRegistrationFailureDstReplicaSite:J\x92?G\x12\x45\n\x12\x44\x61\x45xceptionChecked\x10\xdb)\x1a,Destination replica site registation failure\"g\n\x1c\x44\x61\x45xceptionReplShelveTimeout:G\x92?D\x12\x42\n\x12\x44\x61\x45xceptionChecked\x10\xdc)\x1a)Failed to shelve a previous task in-time.\"q\n\x1f\x44\x61\x45xceptionReplSnapIncompatible:N\x92?K\x12I\n\x12\x44\x61\x45xceptionChecked\x10\xdd)\x1a\x30Snapshot is not compatible with the destination.\"~\n\x1b\x44\x61\x45xceptionReplTooManyTasks:_\x92?\\\x12Z\n\x12\x44\x61\x45xceptionChecked\x10\xde)\x1a\x41Too many replication tasks; try again later or cancel some tasks.\"^\n\x1c\x44\x61\x45xceptionReplGenericStress:>\x92?;\x12\x39\n\x12\x44\x61\x45xceptionChecked\x10\x97*\x1a Generic stress error for testing\"\x8b\x01\n\x19\x44\x61\x45xceptionSnapTooManyPgs:n\x92?k\x12i\n\x12\x44\x61\x45xceptionChecked\x10\x98*\x1aPCannot create more protection groups. The DVX system reached the maximum number.\"\xd5\x01\n\x1f\x44\x61\x45xceptionSnapTooManySnapsInPg:\xb1\x01\x92?\xad\x01\x12\xaa\x01\n\x14\x44\x61\x45xceptionUnchecked\x10\x99*\x1a\x8e\x01The schedule frequency and retention will lead to more snapshots than the DVX system can support at a time. Reduce the frequency or retention.\"`\n\"DaExceptionSnapsTooManyFilesInSnap::\x92?7\x12\x35\n\x12\x44\x61\x45xceptionChecked\x10\x9a*\x1a\x1cToo many files in a snapshot\"O\n\x17\x44\x61\x45xceptionSnapIsSealed:4\x92?1\x12/\n\x12\x44\x61\x45xceptionChecked\x10\x9b*\x1a\x16Snap is already sealed\"K\n\x16\x44\x61\x45xceptionSnapIsEmpty:1\x92?.\x12,\n\x12\x44\x61\x45xceptionChecked\x10\x9c*\x1a\x13Snap has no members\"d\n\x18\x44\x61\x45xceptionSnapstoreRofs:H\x92?E\x12\x43\n\x14\x44\x61\x45xceptionUnchecked\x10\x9d*\x1a&Snapstore is running in read-only mode0\x01\"u\n\x1f\x44\x61\x45xceptionPGPolicyTooManyElems:R\x92?O\x12M\n\x14\x44\x61\x45xceptionUnchecked\x10\x9e*\x1a\x32PG policy has too many member or schedule elements\"Q\n\x19\x44\x61\x45xceptionPGPolicyTooBig:4\x92?1\x12/\n\x14\x44\x61\x45xceptionUnchecked\x10\x9f*\x1a\x14PG policy is too big\"\x81\x01\n\x17\x44\x61\x45xceptionTooManyTasks:f\x92?c\x12\x61\n\x14\x44\x61\x45xceptionUnchecked\x10\xa0*\x1a\x44\x43\x61nnot create more tasks. The DVX system reached the maximum number.0\x01\"e\n\x17\x44\x61\x45xceptionPGSnapFailed:J\x92?G\x12\x45\n\x14\x44\x61\x45xceptionUnchecked\x10\xa1*\x1a*Failed to take a protection group snapshot\"h\n\x1d\x44\x61\x45xceptionTooManyACVmsInSnap:G\x92?D\x12\x42\n\x12\x44\x61\x45xceptionChecked\x10\xa2*\x1a)Too many app consistent VMs in a snapshot\"t\n\x1c\x44\x61\x45xceptionACVMAgentNotFound:T\x92?Q\x12O\n\x12\x44\x61\x45xceptionChecked\x10\xa3*\x1a\x36Guest agent was not found for app-consistent snapshot.\"~\n\x1f\x44\x61\x45xceptionACVMAgentUnreachable:[\x92?X\x12V\n\x12\x44\x61\x45xceptionChecked\x10\xa4*\x1a=Could not connect to guest agent for app-consistent snapshot.\"`\n\x1d\x44\x61\x45xceptionACVMQuiesceTimeout:?\x92?<\x12:\n\x12\x44\x61\x45xceptionChecked\x10\xa5*\x1a!Quiesce to guest agent timed out.\"c\n\x1b\x44\x61\x45xceptionACVMQuiesceError:D\x92?A\x12?\n\x12\x44\x61\x45xceptionChecked\x10\xa6*\x1a&Quiesce to guest agent returned error.\"s\n!DaExceptionPGPolicyTooManyACElems:N\x92?K\x12I\n\x14\x44\x61\x45xceptionUnchecked\x10\xa7*\x1a.PG Policy has too many app consistent members.\"h\n\x1f\x44\x61\x45xceptionSnapNotAppConsistent:E\x92?B\x12@\n\x14\x44\x61\x45xceptionUnchecked\x10\xa8*\x1a%VM Snap taken was not app-consistent.\"h\n DaExceptionSnapNotCreatedLocally:D\x92?A\x12?\n\x14\x44\x61\x45xceptionUnchecked\x10\xa9*\x1a$ProtGrpSnap was not created locally.\"q\n&DaExceptionPGPolicyScheduleNameTooLong:G\x92?D\x12\x42\n\x14\x44\x61\x45xceptionUnchecked\x10\xaa*\x1a\'Schedule name of PG policy is too long.\"p\n\x1e\x44\x61\x45xceptionDatastoreNotMounted:N\x92?K\x12I\n\x14\x44\x61\x45xceptionUnchecked\x10\xab*\x1a.Datastore was not mounted on any of the hosts.\"|\n\x1f\x44\x61\x45xceptionReplaceVSSMetaFailed:Y\x92?V\x12T\n\x14\x44\x61\x45xceptionUnchecked\x10\xac*\x1a\x39\x46\x61iled to replace VSS metadata on all/some of the vdisks.\"U\n\x19\x44\x61\x45xceptionBasicdbNotOpen:8\x92?5\x12\x33\n\x12\x44\x61\x45xceptionChecked\x10\xfc*\x1a\x1a\x42\x61sic Database is not open\"b\n\x1d\x44\x61\x45xceptionBasicdbRequiresXid:A\x92?>\x12<\n\x12\x44\x61\x45xceptionChecked\x10\xfd*\x1a#Operation requires a transaction id\"W\n\x1c\x44\x61\x45xceptionBasicdbInvalidXid:7\x92?4\x12\x32\n\x12\x44\x61\x45xceptionChecked\x10\xfe*\x1a\x19Transaction id is invalid\"R\n DaExceptionBasicdbRecordNotFound:.\x92?+\x12)\n\x12\x44\x61\x45xceptionChecked\x10\xff*\x1a\x10Record not found\"M\n\x1e\x44\x61\x45xceptionBasicdbRecordExists:+\x92?(\x12&\n\x12\x44\x61\x45xceptionChecked\x10\x80+\x1a\rRecord exists\"\x8e\x01\n\x1e\x44\x61\x45xceptionBasicdbXactionInuse:l\x92?i\x12g\n\x12\x44\x61\x45xceptionChecked\x10\x81+\x1aNBasicDB only supports one transaction at a time and is is currenlty being used\"e\n\x1f\x44\x61\x45xceptionEncryptionIsDisabled:B\x92??\x12=\n\x12\x44\x61\x45xceptionChecked\x10\xe0+\x1a$Encryption is disabled on datastore.\"c\n\x1e\x44\x61\x45xceptionEncryptionIsEnabled:A\x92?>\x12<\n\x12\x44\x61\x45xceptionChecked\x10\xe1+\x1a#Encryption is enabled on datastore.\"a\n#DaExceptionEncryptionSystemIsLocked::\x92?7\x12\x35\n\x12\x44\x61\x45xceptionChecked\x10\xe2+\x1a\x1c\x45ncryption system is locked.\"e\n%DaExceptionEncryptionSystemIsUnlocked:<\x92?9\x12\x37\n\x12\x44\x61\x45xceptionChecked\x10\xe3+\x1a\x1e\x45ncryption system is unlocked.\"\xab\x01\n7DaExceptionEncryptionSetStartupModeFailedToDeleteOldKey:p\x92?m\x12k\n\x12\x44\x61\x45xceptionChecked\x10\xe4+\x1aRSetting startup mode to LOCKED failed to forget saved password. Retry again later.\"\xa7\x01\n5DaExceptionEncryptionSetStartupModeFailedToSaveNewKey:n\x92?k\x12i\n\x12\x44\x61\x45xceptionChecked\x10\xe5+\x1aPSetting startup mode to UNLOCKED failed to save the password. Retry again later.\"i\n%DaExceptionEncryptionPasswordMismatch:@\x92?=\x12;\n\x12\x44\x61\x45xceptionChecked\x10\xe6+\x1a\"Encryption passwords do not match.\"\x8c\x03\n)DaExceptionEncryptionPasswordNotCompliant:\xde\x02\x92?\xda\x02\x12\xd7\x02\n\x12\x44\x61\x45xceptionChecked\x10\xe7+\x1a\xbd\x02\x45ncryption password contains invalid characters.\nThe password is a minimum of eight characters. The password can contain letters, numbers, and special characters from the ASCII 7-bit character set within the decimal character code range of 032..126. The password cannot start or end with space characters (ASCII 032).\"\x8f\x03\n%DaExceptionEncryptionPasswordTooShort:\xe5\x02\x92?\xe1\x02\x12\xde\x02\n\x12\x44\x61\x45xceptionChecked\x10\xe8+\x1a\xc4\x02\x45ncryption password must be at least 8 characters long.\nThe password is a minimum of eight characters. The password can contain letters, numbers, and special characters from the ASCII 7-bit character set within the decimal character code range of 032..126. The password cannot start or end with space characters (ASCII 032).\"\x91\x03\n*DaExceptionEncryptionPasswordIllegalSpaces:\xe2\x02\x92?\xde\x02\x12\xdb\x02\n\x12\x44\x61\x45xceptionChecked\x10\xe9+\x1a\xc1\x02\x45ncryption password cannot start or end with spaces.\nThe password is a minimum of eight characters. The password can contain letters, numbers, and special characters from the ASCII 7-bit character set within the decimal character code range of 032..126. The password cannot start or end with space characters (ASCII 032).\"\xef\x02\n-DaExceptionEncryptionEnabledStartupModeLocked:\xbd\x02\x92?\xb9\x02\x12\xb6\x02\n\x12\x44\x61\x45xceptionChecked\x10\xea+\x1a\x9c\x02\x45ncryption has been enabled successfully. However, an error occurred when the password was saved, so the DVX System set the startup mode to locked. When the Data Node starts in locked startup mode, you must provide the encryption password in order to access the data in the datastore.\"\xff\x02\n4DaExceptionEncryptionSetPasswordSuccessStartupLocked:\xc6\x02\x92?\xc2\x02\x12\xbf\x02\n\x12\x44\x61\x45xceptionChecked\x10\xeb+\x1a\xa5\x02New encryption password has been set successfully. However, an error occurred when the password was saved, so the DVX System set the startup mode to locked. When the Data Node starts in locked startup mode, you must provide the encryption password in order to access the data in the datastore.\"\x81\x01\n\'DaExceptionEncryptionSwitchToFipsFailed:V\x92?S\x12Q\n\x12\x44\x61\x45xceptionChecked\x10\xec+\x1a\x38\x46\x61iled to enable FIPS 140-2 validated mode of operation.\"\x84\x01\n)DaExceptionEncryptionSwitchFromFipsFailed:W\x92?T\x12R\n\x12\x44\x61\x45xceptionChecked\x10\xed+\x1a\x39\x46\x61iled to disable FIPS 140-2 validated mode of operation.\"~\n\'DaExceptionEncryptionInFipsApprovedMode:S\x92?P\x12N\n\x12\x44\x61\x45xceptionChecked\x10\xee+\x1a\x35\x44VX already in FIPS 140-2 approved mode of operation.\"\x81\x01\n(DaExceptionEncryptionInFipsValidatedMode:U\x92?R\x12P\n\x12\x44\x61\x45xceptionChecked\x10\xef+\x1a\x37\x44VX  already in FIPS 140-2 validated mode of operation.\"[\n\x1f\x44\x61\x45xceptionRemoteScrollNotFound:8\x92?5\x12\x33\n\x12\x44\x61\x45xceptionChecked\x10\xa8-\x1a\x1aRemoteScroll is not found.\"\x83\x01\n&DaExceptionRemoteScrollVersionMismatch:Y\x92?V\x12T\n\x14\x44\x61\x45xceptionUnchecked\x10\xa9-\x1a\x39RemoteScroll RPC has version that server doesn\'t support.\"g\n\x18\x44\x61\x45xceptionVmIdNotUnique:K\x92?H\x12\x46\n\x14\x44\x61\x45xceptionUnchecked\x10\x8c.\x1a)Multiple VMs found to have the same VmId.0\x01\"]\n\x1a\x44\x61\x45xceptionVmxPathConflict:?\x92?<\x12:\n\x14\x44\x61\x45xceptionUnchecked\x10\x8d.\x1a\x1dVMX FilePath not as expected.0\x01\"[\n\x18\x44\x61\x45xceptionVmIsPoweredOn:?\x92?<\x12:\n\x14\x44\x61\x45xceptionUnchecked\x10\x8e.\x1a\x1f\x45xpecting VM to be Powered Off.\"N\n\x18\x44\x61\x45xceptionVmDirConflict:2\x92?/\x12-\n\x14\x44\x61\x45xceptionUnchecked\x10\x8f.\x1a\x12VM Path not empty.\"a\n DaExceptionVmConfigsUpdateFailed:=\x92?:\x12\x38\n\x14\x44\x61\x45xceptionUnchecked\x10\x90.\x1a\x1d\x45rror while cloning VM files.\"|\n!DaExceptionValidCloneNameNotFound:W\x92?T\x12R\n\x14\x44\x61\x45xceptionUnchecked\x10\x91.\x1a\x35\x45xceeded maximum attempts to find a valid Clone Name.0\x01\"o\n\x13\x44\x61\x45xceptionVmExists:X\x92?U\x12S\n\x14\x44\x61\x45xceptionUnchecked\x10\x92.\x1a\x36\x43\x61nnot clone VM. There is already a VM with that name.0\x01\"[\n\x14\x44\x61\x45xceptionFileInUse:C\x92?@\x12>\n\x14\x44\x61\x45xceptionUnchecked\x10\x93.\x1a#Cannot restore. File lock detected.\"c\n\x12\x44\x61\x45xceptionVmInUse:M\x92?J\x12H\n\x14\x44\x61\x45xceptionUnchecked\x10\x94.\x1a+Cannot restore. Lock detected in VM Folder.0\x01\"a\n\x1a\x44\x61\x45xceptionVmxFileConflict:C\x92?@\x12>\n\x14\x44\x61\x45xceptionUnchecked\x10\x95.\x1a#Destination already has a Vmx File.\"l\n\x1d\x44\x61\x45xceptionInvalidVirtualDisk:K\x92?H\x12\x46\n\x14\x44\x61\x45xceptionUnchecked\x10\x96.\x1a+Input is not a valid virtual disk artifact.\"t\n\x19\x44\x61\x45xceptionVmParsingError:W\x92?T\x12R\n\x14\x44\x61\x45xceptionUnchecked\x10\x97.\x1a\x35Unable to determine a VM. Could be a parsing failure.0\x01\"P\n\x19\x44\x61\x45xceptionLicenseInvalid:3\x92?0\x12.\n\x14\x44\x61\x45xceptionUnchecked\x10\xf0.\x1a\x13License is invalid.\"b\n\x13\x44\x61\x45xceptionVssError\x12 \n\x0b\x65rrorDetail\x18\x01 \x01(\tR\x0b\x65rrorDetail:)\x92?&\x12$\n\x14\x44\x61\x45xceptionUnchecked\x10\xd4/\x1a\tVSS error\"\x85\x01\n\x1b\x44\x61\x45xceptionAccessKeyInvalid\x12 \n\x0b\x65rrorDetail\x18\x01 \x01(\tR\x0b\x65rrorDetail:D\x92?A\x12?\n\x14\x44\x61\x45xceptionUnchecked\x10\xb8\x30\x1a$Access key is invalid: {errorDetail}\"\x9d\x01\n\x1c\x44\x61\x45xceptionFeatureUnavailble:}\x92?z\x12x\n\x14\x44\x61\x45xceptionUnchecked\x10\xb9\x30\x1a]Cloud DVX feature is not available from your AWS account.  Please check with Datrium support.\"f\n\x1b\x44\x61\x45xceptionSoftwareNotSetup:G\x92?D\x12\x42\n\x14\x44\x61\x45xceptionUnchecked\x10\xba\x30\x1a\'Cloud DVX software has not been set up.\"v\n\x1f\x44\x61\x45xceptionCloudDvxIncompatible:S\x92?P\x12N\n\x14\x44\x61\x45xceptionUnchecked\x10\xbb\x30\x1a\x33\x43loud DVX version is incompatible with source site.\"\x9b\x01\n\x1a\x44\x61\x45xceptionAwsUnresponsive\x12 \n\x0b\x65rrorDetail\x18\x01 \x01(\tR\x0b\x65rrorDetail:[\x92?X\x12V\n\x14\x44\x61\x45xceptionUnchecked\x10\xbd\x30\x1a;AWS services are unresponsive or unreachable: {errorDetail}\"}\n\x13\x44\x61\x45xceptionAwsError\x12 \n\x0b\x65rrorDetail\x18\x01 \x01(\tR\x0b\x65rrorDetail:D\x92?A\x12?\n\x14\x44\x61\x45xceptionUnchecked\x10\xbe\x30\x1a$AWS returned an error: {errorDetail}\"`\n\x1f\x44\x61\x45xceptionCloudDvxInstanceDown:=\x92?:\x12\x38\n\x14\x44\x61\x45xceptionUnchecked\x10\xbf\x30\x1a\x1d\x43loud DVX instance is not up.\"_\n\x1f\x44\x61\x45xceptionSystemAlreadyManaged:<\x92?9\x12\x37\n\x14\x44\x61\x45xceptionUnchecked\x10\xc0\x30\x1a\x1cThis DVX is already managed.\"W\n\x1b\x44\x61\x45xceptionSystemNotManaged:8\x92?5\x12\x33\n\x14\x44\x61\x45xceptionUnchecked\x10\xc1\x30\x1a\x18This DVX is not managed.\"V\n\x1c\x44\x61\x45xceptionAccessKeyRequired:6\x92?3\x12\x31\n\x14\x44\x61\x45xceptionUnchecked\x10\xc2\x30\x1a\x16\x41\x63\x63\x65ss key is required\"u\n\"DaExceptionCloudDvxTooManySrcSites:O\x92?L\x12J\n\x14\x44\x61\x45xceptionUnchecked\x10\xc3\x30\x1a/Too many on-prem systems paired with Cloud DVX.\"Q\n\x1f\x44\x61\x45xceptionGuestFsInvalidCookie:.\x92?+\x12)\n\x14\x44\x61\x45xceptionUnchecked\x10\x9c\x31\x1a\x0eInvalid cookie\"`\n\x1a\x44\x61\x45xceptionGuestFsErrParse:B\x92??\x12=\n\x14\x44\x61\x45xceptionUnchecked\x10\x9d\x31\x1a\"Parsing error in guest file system\"Y\n\x19\x44\x61\x45xceptionGuestFsErrOpen:<\x92?9\x12\x37\n\x14\x44\x61\x45xceptionUnchecked\x10\x9e\x31\x1a\x1c\x45rror while opening a device\"_\n\x1c\x44\x61\x45xceptionGuestFsErrReaddir:?\x92?<\x12:\n\x14\x44\x61\x45xceptionUnchecked\x10\x9f\x31\x1a\x1f\x45rror while reading a directory\"P\n\x19\x44\x61\x45xceptionGuestFsErrRead:3\x92?0\x12.\n\x14\x44\x61\x45xceptionUnchecked\x10\xa0\x31\x1a\x13\x45rror while reading\"Q\n\x1a\x44\x61\x45xceptionGuestFsErrWrite:3\x92?0\x12.\n\x14\x44\x61\x45xceptionUnchecked\x10\xa1\x31\x1a\x13\x45rror while writing\"q\n#DaExceptionGuestFsUnsupportedVolume:J\x92?G\x12\x45\n\x14\x44\x61\x45xceptionUnchecked\x10\xa2\x31\x1a*Operation performed on unsupported volume.\"V\n\x16\x44\x61\x45xceptionIrrInternal:<\x92?9\x12\x37\n\x14\x44\x61\x45xceptionUnchecked\x10\x80\x32\x1a\x1aIRR generic run time error8\x01\"l\n\x1f\x44\x61\x45xceptionIllegalPlanOperation:I\x92?F\x12\x44\n\x14\x44\x61\x45xceptionUnchecked\x10\x81\x32\x1a\'Illegal operation in current plan state8\x01\"K\n\x15\x44\x61\x45xceptionArchiveEof:2\x92?/\x12-\n\x12\x44\x61\x45xceptionChecked\x10\xe4\x32\x1a\x14\x46ound end of archive\"L\n\x17\x44\x61\x45xceptionArchiveRetry:1\x92?.\x12,\n\x12\x44\x61\x45xceptionChecked\x10\xe5\x32\x1a\x13Retry might succeed\"G\n\x16\x44\x61\x45xceptionArchiveWarn:-\x92?*\x12(\n\x12\x44\x61\x45xceptionChecked\x10\xe6\x32\x1a\x0fPartial success\"W\n\x18\x44\x61\x45xceptionArchiveFailed:;\x92?8\x12\x36\n\x12\x44\x61\x45xceptionChecked\x10\xe7\x32\x1a\x1dOperation cannot be completed\"m\n\x17\x44\x61\x45xceptionArchiveFatal:R\x92?O\x12M\n\x12\x44\x61\x45xceptionChecked\x10\xe8\x32\x1a\x34Operation failed and no more operations are possible\"T\n\x1c\x44\x61\x45xceptionExportToOvfFailed:4\x92?1\x12/\n\x14\x44\x61\x45xceptionUnchecked\x10\xc8\x33\x1a\x14\x45xport to ovf failed\"l\n\x18\x44\x61\x45xceptionInvalidSiteOp:P\x92?M\x12K\n\x14\x44\x61\x45xceptionUnchecked\x10\xe8\x39\x1a\x30Invalid operation issued on a given replica site\"f\n\x1c\x44\x61\x45xceptionSrmHealthCritical:F\x92?C\x12\x41\n\x14\x44\x61\x45xceptionUnchecked\x10\xe9\x39\x1a$The health of SRM PGs or site not OK0\x01\x42\x0b\x42\texception')
    ,
    dependencies=[IDL_dot_Protos_dot_Extensions_dot_CustomOptions__pb2.DESCRIPTOR,IDL_dot_Protos_dot_Extensions_dot_KeyValueTypes__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_DAEXCEPTIONBASE = _descriptor.Descriptor(
    name='DaExceptionBase',
    full_name='da.core.DaExceptionBase',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='errorCodes', full_name='da.core.DaExceptionBase.errorCodes', index=0,
            number=1, type=13, cpp_type=3, label=3,
            has_default_value=False, default_value=[],
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))),
        _descriptor.FieldDescriptor(
            name='fileName', full_name='da.core.DaExceptionBase.fileName', index=1,
            number=2, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='lineNum', full_name='da.core.DaExceptionBase.lineNum', index=2,
            number=3, type=13, cpp_type=3, label=1,
            has_default_value=False, default_value=0,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='errorMsg', full_name='da.core.DaExceptionBase.errorMsg', index=3,
            number=4, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='attributes', full_name='da.core.DaExceptionBase.attributes', index=4,
            number=5, type=11, cpp_type=10, label=3,
            has_default_value=False, default_value=[],
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\007\022\005\n\000\020\350\007')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=115,
    serialized_end=313,
)


_DAEXCEPTIONCHECKED = _descriptor.Descriptor(
    name='DaExceptionChecked',
    full_name='da.core.DaExceptionChecked',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?%\022#\n\017DaExceptionBase\020\351\007\032\rChecked Error')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=315,
    serialized_end=377,
)


_DAEXCEPTIONUNCHECKED = _descriptor.Descriptor(
    name='DaExceptionUnchecked',
    full_name='da.core.DaExceptionUnchecked',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\'\022%\n\017DaExceptionBase\020\352\007\032\017Unchecked Error')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=379,
    serialized_end=445,
)


_DAEXCEPTIONLOCALONLY = _descriptor.Descriptor(
    name='DaExceptionLocalOnly',
    full_name='da.core.DaExceptionLocalOnly',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?(\022&\n\017DaExceptionBase\020\353\007\032\020Local Only Error')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=447,
    serialized_end=514,
)


_DAEXCEPTIONNOTFOUND = _descriptor.Descriptor(
    name='DaExceptionNotFound',
    full_name='da.core.DaExceptionNotFound',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?(\022&\n\024DaExceptionUnchecked\020\314\010\032\tNot found0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=516,
    serialized_end=582,
)


_DAEXCEPTIONOBJECTNOTFOUND = _descriptor.Descriptor(
    name='DaExceptionObjectNotFound',
    full_name='da.core.DaExceptionObjectNotFound',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='notFoundId', full_name='da.core.DaExceptionObjectNotFound.notFoundId', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\023DaExceptionNotFound\020\315\010\032\035Object {notFoundId} not found(\0010\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=584,
    serialized_end=709,
)


_DAEXCEPTIONINTERRUPTED = _descriptor.Descriptor(
    name='DaExceptionInterrupted',
    full_name='da.core.DaExceptionInterrupted',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\024DaExceptionLocalOnly\020\316\010\032\031Operation was interrupted')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=711,
    serialized_end=794,
)


_DAEXCEPTIONIO = _descriptor.Descriptor(
    name='DaExceptionIo',
    full_name='da.core.DaExceptionIo',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?#\022!\n\022DaExceptionChecked\020\317\010\032\010IO error')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=796,
    serialized_end=851,
)


_DAEXCEPTIONWOULDBLOCK = _descriptor.Descriptor(
    name='DaExceptionWouldBlock',
    full_name='da.core.DaExceptionWouldBlock',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\024DaExceptionLocalOnly\020\320\010\032\025Operation would block \001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=853,
    serialized_end=933,
)


_DAEXCEPTIONOUTOFMEMORY = _descriptor.Descriptor(
    name='DaExceptionOutOfMemory',
    full_name='da.core.DaExceptionOutOfMemory',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\024DaExceptionLocalOnly\020\321\010\032\rOut of Memory')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=935,
    serialized_end=1006,
)


_DAEXCEPTIONBUSY = _descriptor.Descriptor(
    name='DaExceptionBusy',
    full_name='da.core.DaExceptionBusy',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\024DaExceptionUnchecked\020\322\010\032\rResource busy')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=1008,
    serialized_end=1072,
)


_DAEXCEPTIONALREADYEXISTS = _descriptor.Descriptor(
    name='DaExceptionAlreadyExists',
    full_name='da.core.DaExceptionAlreadyExists',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\024DaExceptionUnchecked\020\323\010\032\rObject exists0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=1074,
    serialized_end=1149,
)


_DAEXCEPTIONINVALIDARGUMENT = _descriptor.Descriptor(
    name='DaExceptionInvalidArgument',
    full_name='da.core.DaExceptionInvalidArgument',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='argument', full_name='da.core.DaExceptionInvalidArgument.argument', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?L\022J\n\024DaExceptionUnchecked\020\324\010\032+An invalid argument {argument} was supplied0\0018\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=1152,
    serialized_end=1289,
)


_DAEXCEPTIONNOSPACE = _descriptor.Descriptor(
    name='DaExceptionNoSpace',
    full_name='da.core.DaExceptionNoSpace',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\024DaExceptionUnchecked\020\325\010\032\014Out of space0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=1291,
    serialized_end=1359,
)


_DAEXCEPTIONUNDERFLOW = _descriptor.Descriptor(
    name='DaExceptionUnderflow',
    full_name='da.core.DaExceptionUnderflow',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\024DaExceptionUnchecked\020\326\010\032\017Value too small')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=1361,
    serialized_end=1432,
)


_DAEXCEPTIONOVERFLOW = _descriptor.Descriptor(
    name='DaExceptionOverflow',
    full_name='da.core.DaExceptionOverflow',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\024DaExceptionUnchecked\020\327\010\032\017Value too large')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=1434,
    serialized_end=1504,
)


_DAEXCEPTIONADDRESSINUSE = _descriptor.Descriptor(
    name='DaExceptionAddressInUse',
    full_name='da.core.DaExceptionAddressInUse',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\024DaExceptionLocalOnly\020\330\010\032\026Address already in use')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=1506,
    serialized_end=1587,
)


_DAEXCEPTIONADDRESSNOTAVAILABLE = _descriptor.Descriptor(
    name='DaExceptionAddressNotAvailable',
    full_name='da.core.DaExceptionAddressNotAvailable',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?H\022F\n\024DaExceptionLocalOnly\020\331\010\032+Non-existent interface or address not local')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=1589,
    serialized_end=1698,
)


_DAEXCEPTIONCONNECTIONDOWN = _descriptor.Descriptor(
    name='DaExceptionConnectionDown',
    full_name='da.core.DaExceptionConnectionDown',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\024DaExceptionLocalOnly\020\332\010\032\026Connection was dropped')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=1700,
    serialized_end=1783,
)


_DAEXCEPTIONTOOMANYCONNECTIONS = _descriptor.Descriptor(
    name='DaExceptionTooManyConnections',
    full_name='da.core.DaExceptionTooManyConnections',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\024DaExceptionLocalOnly\020\333\010\032\024Too many connections')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=1785,
    serialized_end=1870,
)


_DAEXCEPTIONCONNECTFAILED = _descriptor.Descriptor(
    name='DaExceptionConnectFailed',
    full_name='da.core.DaExceptionConnectFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\024DaExceptionLocalOnly\020\334\010\032\031Connection request failed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=1872,
    serialized_end=1957,
)


_DAEXCEPTIONTIMEOUT = _descriptor.Descriptor(
    name='DaExceptionTimeout',
    full_name='da.core.DaExceptionTimeout',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\022DaExceptionChecked\020\335\010\032\023Operation timed out')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=1959,
    serialized_end=2030,
)


_DAEXCEPTIONINTERNAL = _descriptor.Descriptor(
    name='DaExceptionInternal',
    full_name='da.core.DaExceptionInternal',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?-\022+\n\024DaExceptionUnchecked\020\336\010\032\016Internal error0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=2032,
    serialized_end=2103,
)


_DAEXCEPTIONCORRUPTION = _descriptor.Descriptor(
    name='DaExceptionCorruption',
    full_name='da.core.DaExceptionCorruption',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\337\010\032\026Corruption encountered')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=2105,
    serialized_end=2182,
)


_DAEXCEPTIONFILEOPENFAILURE = _descriptor.Descriptor(
    name='DaExceptionFileOpenFailure',
    full_name='da.core.DaExceptionFileOpenFailure',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\024DaExceptionLocalOnly\020\340\010\032\021File open failure')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=2184,
    serialized_end=2263,
)


_DAEXCEPTIONTOOMANYPINNED = _descriptor.Descriptor(
    name='DaExceptionTooManyPinned',
    full_name='da.core.DaExceptionTooManyPinned',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\024DaExceptionLocalOnly\020\341\010\032 Too many pinned mobs in mobcache')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=2265,
    serialized_end=2357,
)


_DAEXCEPTIONFAILURE = _descriptor.Descriptor(
    name='DaExceptionFailure',
    full_name='da.core.DaExceptionFailure',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\024DaExceptionUnchecked\020\342\010\032\020Operation failed0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=2359,
    serialized_end=2431,
)


_DAEXCEPTIONINVALIDOPERATION = _descriptor.Descriptor(
    name='DaExceptionInvalidOperation',
    full_name='da.core.DaExceptionInvalidOperation',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\024DaExceptionUnchecked\020\343\010\032\021Invalid operation0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=2433,
    serialized_end=2515,
)


_DAEXCEPTIONARGUMENTOUTOFRANGE = _descriptor.Descriptor(
    name='DaExceptionArgumentOutOfRange',
    full_name='da.core.DaExceptionArgumentOutOfRange',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='argument', full_name='da.core.DaExceptionArgumentOutOfRange.argument', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='min', full_name='da.core.DaExceptionArgumentOutOfRange.min', index=1,
            number=2, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='max', full_name='da.core.DaExceptionArgumentOutOfRange.max', index=2,
            number=3, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?j\022h\n\032DaExceptionInvalidArgument\020\344\010\032EValue of argument {argument} must be between min {min} and max {max}.0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=2518,
    serialized_end=2724,
)


_DAEXCEPTIONTRYAGAIN = _descriptor.Descriptor(
    name='DaExceptionTryAgain',
    full_name='da.core.DaExceptionTryAgain',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\345\010\032\030Resource busy, try again')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=2726,
    serialized_end=2803,
)


_DAEXCEPTIONVERSIONUNSUPPORTED = _descriptor.Descriptor(
    name='DaExceptionVersionUnsupported',
    full_name='da.core.DaExceptionVersionUnsupported',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='version', full_name='da.core.DaExceptionVersionUnsupported.version', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\022DaExceptionChecked\020\346\010\032!Version {version} is unsupported.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=2805,
    serialized_end=2927,
)


_DAEXCEPTIONIHDRMISMATCH = _descriptor.Descriptor(
    name='DaExceptionIhdrMismatch',
    full_name='da.core.DaExceptionIhdrMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\024DaExceptionLocalOnly\020\347\010\032\rIHdr mismatch')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=2929,
    serialized_end=3001,
)


_DAEXCEPTIONHOSTRPCFAILURE = _descriptor.Descriptor(
    name='DaExceptionHostRpcFailure',
    full_name='da.core.DaExceptionHostRpcFailure',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='host', full_name='da.core.DaExceptionHostRpcFailure.host', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='method', full_name='da.core.DaExceptionHostRpcFailure.method', index=1,
            number=2, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222??\022=\n\024DaExceptionUnchecked\020\350\010\032\"Host {host} method {method} failed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=3004,
    serialized_end=3143,
)


_DAEXCEPTIONSHUTTINGDOWN = _descriptor.Descriptor(
    name='DaExceptionShuttingDown',
    full_name='da.core.DaExceptionShuttingDown',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?)\022\'\n\022DaExceptionChecked\020\351\010\032\016Shutting down.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=3145,
    serialized_end=3216,
)


_DAEXCEPTIONUNEXPECTEDERROR = _descriptor.Descriptor(
    name='DaExceptionUnexpectedError',
    full_name='da.core.DaExceptionUnexpectedError',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\022DaExceptionChecked\020\352\010\032\021Unexpected error.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=3218,
    serialized_end=3295,
)


_DAEXCEPTIONFPMISMATCH = _descriptor.Descriptor(
    name='DaExceptionFPMismatch',
    full_name='da.core.DaExceptionFPMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?(\022&\n\024DaExceptionLocalOnly\020\353\010\032\013FP mismatch')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=3297,
    serialized_end=3365,
)


_DAEXCEPTIONBINDTOINTERFACEFAILED = _descriptor.Descriptor(
    name='DaExceptionBindToInterfaceFailed',
    full_name='da.core.DaExceptionBindToInterfaceFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?B\022@\n\024DaExceptionLocalOnly\020\354\010\032%Failed to bind to a network interface')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=3367,
    serialized_end=3472,
)


_DAEXCEPTIONNAMETOOLONG = _descriptor.Descriptor(
    name='DaExceptionNameTooLong',
    full_name='da.core.DaExceptionNameTooLong',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?-\022+\n\024DaExceptionUnchecked\020\355\010\032\020Name is too long')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=3474,
    serialized_end=3548,
)


_DAEXCEPTIONITERDONE = _descriptor.Descriptor(
    name='DaExceptionIterDone',
    full_name='da.core.DaExceptionIterDone',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionChecked\020\356\010\032\027Iterator is at the end. \001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=3550,
    serialized_end=3628,
)


_DAEXCEPTIONNOINDIRECTFN = _descriptor.Descriptor(
    name='DaExceptionNoIndirectFn',
    full_name='da.core.DaExceptionNoIndirectFn',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222??\022=\n\024DaExceptionLocalOnly\020\357\010\032\"No indirect function is available.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=3630,
    serialized_end=3723,
)


_DAEXCEPTIONOPCANCELED = _descriptor.Descriptor(
    name='DaExceptionOpCanceled',
    full_name='da.core.DaExceptionOpCanceled',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\024DaExceptionUnchecked\020\360\010\032\022Operation canceled')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=3725,
    serialized_end=3800,
)


_DAEXCEPTIONOPERATIONUNSUPPORTED = _descriptor.Descriptor(
    name='DaExceptionOperationUnsupported',
    full_name='da.core.DaExceptionOperationUnsupported',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\024DaExceptionLocalOnly\020\361\010\032\031Operation is unsupported.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=3802,
    serialized_end=3894,
)


_DAEXCEPTIONSENDWOULDBLOCK = _descriptor.Descriptor(
    name='DaExceptionSendWouldBlock',
    full_name='da.core.DaExceptionSendWouldBlock',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\025DaExceptionWouldBlock\020\362\010\032\032Send operation would block \001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=3896,
    serialized_end=3986,
)


_DAEXCEPTIONRECVWOULDBLOCK = _descriptor.Descriptor(
    name='DaExceptionRecvWouldBlock',
    full_name='da.core.DaExceptionRecvWouldBlock',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\025DaExceptionWouldBlock\020\363\010\032\032Recv operation would block \001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=3988,
    serialized_end=4078,
)


_DAEXCEPTIONCOMPRESSFAILURE = _descriptor.Descriptor(
    name='DaExceptionCompressFailure',
    full_name='da.core.DaExceptionCompressFailure',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\022DaExceptionChecked\020\260\t\032\020Compress failure')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=4080,
    serialized_end=4156,
)


_DAEXCEPTIONUNCOMPRESSFAILURE = _descriptor.Descriptor(
    name='DaExceptionUncompressFailure',
    full_name='da.core.DaExceptionUncompressFailure',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?-\022+\n\022DaExceptionChecked\020\261\t\032\022Uncompress failure')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=4158,
    serialized_end=4238,
)


_DAEXCEPTIONREGISTRYNODEEXISTS = _descriptor.Descriptor(
    name='DaExceptionRegistryNodeExists',
    full_name='da.core.DaExceptionRegistryNodeExists',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\224\n\032\024Registry node exists')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=4240,
    serialized_end=4323,
)


_DAEXCEPTIONREGISTRYNONODE = _descriptor.Descriptor(
    name='DaExceptionRegistryNoNode',
    full_name='da.core.DaExceptionRegistryNoNode',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\225\n\032\033Registry node doesn\'t exist')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=4325,
    serialized_end=4411,
)


_DAEXCEPTIONREGISTRYCONNECTIONLOSS = _descriptor.Descriptor(
    name='DaExceptionRegistryConnectionLoss',
    full_name='da.core.DaExceptionRegistryConnectionLoss',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\226\n\032\030Registry connection loss')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=4413,
    serialized_end=4504,
)


_DAEXCEPTIONREGISTRYSESSIONEXPIRED = _descriptor.Descriptor(
    name='DaExceptionRegistrySessionExpired',
    full_name='da.core.DaExceptionRegistrySessionExpired',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\227\n\032\030Registry session expired')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=4506,
    serialized_end=4597,
)


_DAEXCEPTIONREGISTRYCONNECTIONTIMEOUT = _descriptor.Descriptor(
    name='DaExceptionRegistryConnectionTimeout',
    full_name='da.core.DaExceptionRegistryConnectionTimeout',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\230\n\032\033Registry connection timeout')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=4599,
    serialized_end=4696,
)


_DAEXCEPTIONREGISTRYOPERATIONTIMEOUT = _descriptor.Descriptor(
    name='DaExceptionRegistryOperationTimeout',
    full_name='da.core.DaExceptionRegistryOperationTimeout',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\022DaExceptionChecked\020\231\n\032\032Registry operation timeout')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=4698,
    serialized_end=4793,
)


_DAEXCEPTIONREGISTRYBADVERSION = _descriptor.Descriptor(
    name='DaExceptionRegistryBadVersion',
    full_name='da.core.DaExceptionRegistryBadVersion',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\232\n\032\024Registry bad version')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=4795,
    serialized_end=4878,
)


_DAEXCEPTIONREGISTRYEMPTYNODE = _descriptor.Descriptor(
    name='DaExceptionRegistryEmptyNode',
    full_name='da.core.DaExceptionRegistryEmptyNode',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\234\n\032\026Registry node is empty \001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=4880,
    serialized_end=4966,
)


_DAEXCEPTIONREGISTRYIPMISMATCH = _descriptor.Descriptor(
    name='DaExceptionRegistryIpMismatch',
    full_name='da.core.DaExceptionRegistryIpMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\022DaExceptionChecked\020\235\n\032\"Failed to validate the floating ip')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=4968,
    serialized_end=5065,
)


_DAEXCEPTIONREGISTRYDVXIDMISMATCH = _descriptor.Descriptor(
    name='DaExceptionRegistryDvxidMismatch',
    full_name='da.core.DaExceptionRegistryDvxidMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\022DaExceptionChecked\020\236\n\032\035Failed to validate the dvx id')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=5067,
    serialized_end=5162,
)


_DAEXCEPTIONRPCCLIENTPANIC = _descriptor.Descriptor(
    name='DaExceptionRpcClientPanic',
    full_name='da.core.DaExceptionRpcClientPanic',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\024DaExceptionUnchecked\020\370\n\032#Rpc server requests client to panic')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=5164,
    serialized_end=5260,
)


_DAEXCEPTIONRPCDECODEFAILED = _descriptor.Descriptor(
    name='DaExceptionRpcDecodeFailed',
    full_name='da.core.DaExceptionRpcDecodeFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='decodeField', full_name='da.core.DaExceptionRpcDecodeFailed.decodeField', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\024DaExceptionUnchecked\020\371\n\032\021Rpc decode failed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=5262,
    serialized_end=5375,
)


_DAEXCEPTIONRPCSERVICENOTHERE = _descriptor.Descriptor(
    name='DaExceptionRpcServiceNotHere',
    full_name='da.core.DaExceptionRpcServiceNotHere',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='serviceName', full_name='da.core.DaExceptionRpcServiceNotHere.serviceName', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\024DaExceptionUnchecked\020\372\n\032\"Rpc service {serviceName} not here(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=5378,
    serialized_end=5512,
)


_DAEXCEPTIONRPCSERVICEUNKNOWN = _descriptor.Descriptor(
    name='DaExceptionRpcServiceUnknown',
    full_name='da.core.DaExceptionRpcServiceUnknown',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\024DaExceptionLocalOnly\020\373\n\032\023Rpc service unknown')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=5514,
    serialized_end=5597,
)


_DAEXCEPTIONRPCMETHODUNKNOWN = _descriptor.Descriptor(
    name='DaExceptionRpcMethodUnknown',
    full_name='da.core.DaExceptionRpcMethodUnknown',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='methodName', full_name='da.core.DaExceptionRpcMethodUnknown.methodName', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?>\022<\n\024DaExceptionUnchecked\020\374\n\032\037Rpc method {methodName} unknown(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=5600,
    serialized_end=5728,
)


_DAEXCEPTIONRPCASYNCRESPONSE = _descriptor.Descriptor(
    name='DaExceptionRpcAsyncResponse',
    full_name='da.core.DaExceptionRpcAsyncResponse',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\024DaExceptionLocalOnly\020\375\n\032\031Rpc asynchronous response \001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=5730,
    serialized_end=5820,
)


_DAEXCEPTIONRPCQUEUEFULL = _descriptor.Descriptor(
    name='DaExceptionRpcQueueFull',
    full_name='da.core.DaExceptionRpcQueueFull',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\024DaExceptionUnchecked\020\376\n\032\025Rpc server queue full')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=5822,
    serialized_end=5902,
)


_DAEXCEPTIONRPCREQUESTFENCED = _descriptor.Descriptor(
    name='DaExceptionRpcRequestFenced',
    full_name='da.core.DaExceptionRpcRequestFenced',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\024DaExceptionUnchecked\020\377\n\032\035Rpc server request fenced out')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=5904,
    serialized_end=5996,
)


_DAEXCEPTIONRPCINVALIDHANDSHAKE = _descriptor.Descriptor(
    name='DaExceptionRpcInvalidHandshake',
    full_name='da.core.DaExceptionRpcInvalidHandshake',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\024DaExceptionLocalOnly\020\200\013\032$Rpc connection handshake was invalid')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=5998,
    serialized_end=6100,
)


_DAEXCEPTIONRPCVERSIONMISMATCH = _descriptor.Descriptor(
    name='DaExceptionRpcVersionMismatch',
    full_name='da.core.DaExceptionRpcVersionMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n\024DaExceptionUnchecked\020\201\013\032.Rpc to server with mismatched software version')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=6102,
    serialized_end=6213,
)


_DAEXCEPTIONRPCPROTOCOLUNSUPPORTED = _descriptor.Descriptor(
    name='DaExceptionRpcProtocolUnsupported',
    full_name='da.core.DaExceptionRpcProtocolUnsupported',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\024DaExceptionLocalOnly\020\202\013\032\035Protocol type is unsupported.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=6215,
    serialized_end=6313,
)


_DAEXCEPTIONRPCTRANSPORTUNSUPPORTED = _descriptor.Descriptor(
    name='DaExceptionRpcTransportUnsupported',
    full_name='da.core.DaExceptionRpcTransportUnsupported',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\024DaExceptionLocalOnly\020\203\013\032\036Transport type is unsupported.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=6315,
    serialized_end=6415,
)


_DAEXCEPTIONRPCREQUESTREJECTED = _descriptor.Descriptor(
    name='DaExceptionRpcRequestRejected',
    full_name='da.core.DaExceptionRpcRequestRejected',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\024DaExceptionUnchecked\020\204\013\032$Rpc request rejected during receive.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=6417,
    serialized_end=6518,
)


_DAEXCEPTIONRPCCLIENTRETRY = _descriptor.Descriptor(
    name='DaExceptionRpcClientRetry',
    full_name='da.core.DaExceptionRpcClientRetry',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n\024DaExceptionUnchecked\020\205\013\032.Service indicates client should retry request.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=6520,
    serialized_end=6627,
)


_DAEXCEPTIONRPCCLIENTCHECKSUMRETRY = _descriptor.Descriptor(
    name='DaExceptionRpcClientChecksumRetry',
    full_name='da.core.DaExceptionRpcClientChecksumRetry',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?k\022i\n\024DaExceptionUnchecked\020\206\013\032NService indicates client should retry request that failed checksum validation.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=6630,
    serialized_end=6777,
)


_DAEXCEPTIONRPCTOPOLOGYMISMATCH = _descriptor.Descriptor(
    name='DaExceptionRpcTopologyMismatch',
    full_name='da.core.DaExceptionRpcTopologyMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?S\022Q\n\024DaExceptionUnchecked\020\207\013\0326Client/Server notions of topology number do not match.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=6779,
    serialized_end=6899,
)


_DAEXCEPTIONRPCTIMEOUT = _descriptor.Descriptor(
    name='DaExceptionRpcTimeout',
    full_name='da.core.DaExceptionRpcTimeout',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\024DaExceptionLocalOnly\020\210\013\032#Rpc timeout waiting for a response.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=6901,
    serialized_end=6993,
)


_DAEXCEPTIONRPCDVXIDMISMATCH = _descriptor.Descriptor(
    name='DaExceptionRpcDvxIdMismatch',
    full_name='da.core.DaExceptionRpcDvxIdMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?I\022G\n\024DaExceptionUnchecked\020\211\013\032,Client/Server notions of dvxId do not match.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=6995,
    serialized_end=7102,
)


_DAEXCEPTIONIOOPEN = _descriptor.Descriptor(
    name='DaExceptionIoOpen',
    full_name='da.core.DaExceptionIoOpen',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\022DaExceptionChecked\020\334\013\032\017IO open failure')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=7104,
    serialized_end=7170,
)


_DAEXCEPTIONIOCLOSE = _descriptor.Descriptor(
    name='DaExceptionIoClose',
    full_name='da.core.DaExceptionIoClose',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\022DaExceptionChecked\020\335\013\032\020IO close failure')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=7172,
    serialized_end=7240,
)


_DAEXCEPTIONIOCREATEIOCTXT = _descriptor.Descriptor(
    name='DaExceptionIoCreateIoctxt',
    full_name='da.core.DaExceptionIoCreateIoctxt',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionChecked\020\336\013\032\031IO context create failure')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=7242,
    serialized_end=7326,
)


_DAEXCEPTIONIODESTROYIOCTXT = _descriptor.Descriptor(
    name='DaExceptionIoDestroyIoctxt',
    full_name='da.core.DaExceptionIoDestroyIoctxt',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\022DaExceptionChecked\020\337\013\032\032IO context destroy failure')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=7328,
    serialized_end=7414,
)


_DAEXCEPTIONIOCREATEIOCB = _descriptor.Descriptor(
    name='DaExceptionIoCreateIocb',
    full_name='da.core.DaExceptionIoCreateIocb',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?>\022<\n\022DaExceptionChecked\020\340\013\032#IO control structure create failure')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=7416,
    serialized_end=7508,
)


_DAEXCEPTIONIOSUBMIT = _descriptor.Descriptor(
    name='DaExceptionIoSubmit',
    full_name='da.core.DaExceptionIoSubmit',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\022DaExceptionChecked\020\341\013\032\021IO submit failure')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=7510,
    serialized_end=7580,
)


_DAEXCEPTIONIOWAITFORCOMPLETION = _descriptor.Descriptor(
    name='DaExceptionIoWaitForCompletion',
    full_name='da.core.DaExceptionIoWaitForCompletion',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\022DaExceptionChecked\020\342\013\032\017No IO completed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=7582,
    serialized_end=7661,
)


_DAEXCEPTIONIONORESOURCES = _descriptor.Descriptor(
    name='DaExceptionIoNoResources',
    full_name='da.core.DaExceptionIoNoResources',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\022DaExceptionChecked\020\343\013\032\017No IO resources')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=7663,
    serialized_end=7736,
)


_DAEXCEPTIONIOEMPTYQUEUE = _descriptor.Descriptor(
    name='DaExceptionIoEmptyQueue',
    full_name='da.core.DaExceptionIoEmptyQueue',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?)\022\'\n\022DaExceptionChecked\020\344\013\032\016Empty IO queue')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=7738,
    serialized_end=7809,
)


_DAEXCEPTIONIOINCOMPLETE = _descriptor.Descriptor(
    name='DaExceptionIoIncomplete',
    full_name='da.core.DaExceptionIoIncomplete',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?(\022&\n\022DaExceptionChecked\020\345\013\032\rIO incomplete')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=7811,
    serialized_end=7881,
)


_DAEXCEPTIONIOTIMEOUT = _descriptor.Descriptor(
    name='DaExceptionIoTimeout',
    full_name='da.core.DaExceptionIoTimeout',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?%\022#\n\022DaExceptionChecked\020\346\013\032\nIO timeout')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=7883,
    serialized_end=7947,
)


_DAEXCEPTIONIOCREATECTRLBLK = _descriptor.Descriptor(
    name='DaExceptionIoCreateCtrlBlk',
    full_name='da.core.DaExceptionIoCreateCtrlBlk',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\022DaExceptionChecked\020\347\013\032!Creating IO control block failure')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=7949,
    serialized_end=8042,
)


_DAEXCEPTIONIODEVICE = _descriptor.Descriptor(
    name='DaExceptionIoDevice',
    full_name='da.core.DaExceptionIoDevice',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\022DaExceptionChecked\020\350\013\032\021IO device failure')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=8044,
    serialized_end=8114,
)


_DAEXCEPTIONCHUNKSTORENOTFOUND = _descriptor.Descriptor(
    name='DaExceptionChunkstoreNotFound',
    full_name='da.core.DaExceptionChunkstoreNotFound',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\022DaExceptionChecked\020\300\014\032\017Chunk not found')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=8116,
    serialized_end=8194,
)


_DAEXCEPTIONCHUNKSTORECOLLISION = _descriptor.Descriptor(
    name='DaExceptionChunkstoreCollision',
    full_name='da.core.DaExceptionChunkstoreCollision',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\022DaExceptionChecked\020\301\014\032(Chunk already exists with different data')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=8196,
    serialized_end=8300,
)


_DAEXCEPTIONCHUNKSTOREITERATIONCOMPLETE = _descriptor.Descriptor(
    name='DaExceptionChunkstoreIterationComplete',
    full_name='da.core.DaExceptionChunkstoreIterationComplete',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\302\014\032\030Chunk iteration complete')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=8302,
    serialized_end=8398,
)


_DAEXCEPTIONCHUNKSTORENULLCHUNK = _descriptor.Descriptor(
    name='DaExceptionChunkstoreNullChunk',
    full_name='da.core.DaExceptionChunkstoreNullChunk',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?%\022#\n\022DaExceptionChecked\020\303\014\032\nNull chunk')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=8400,
    serialized_end=8474,
)


_DAEXCEPTIONCHUNKSTOREINDEXFULL = _descriptor.Descriptor(
    name='DaExceptionChunkstoreIndexFull',
    full_name='da.core.DaExceptionChunkstoreIndexFull',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\022DaExceptionChecked\020\304\014\032\020Chunk index full')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=8476,
    serialized_end=8556,
)


_DAEXCEPTIONCHUNKSTOREOUTOFSPACE = _descriptor.Descriptor(
    name='DaExceptionChunkstoreOutOfSpace',
    full_name='da.core.DaExceptionChunkstoreOutOfSpace',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\022DaExceptionChecked\020\305\014\032\032ChunkStore is out of space')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=8558,
    serialized_end=8649,
)


_DAEXCEPTIONCHUNKSTORECHUNKTOOLARGE = _descriptor.Descriptor(
    name='DaExceptionChunkstoreChunkTooLarge',
    full_name='da.core.DaExceptionChunkstoreChunkTooLarge',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?-\022+\n\022DaExceptionChecked\020\306\014\032\022Chunk is too large')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=8651,
    serialized_end=8737,
)


_DAEXCEPTIONCHUNKSTOREINVALIDOFFSET = _descriptor.Descriptor(
    name='DaExceptionChunkstoreInvalidOffset',
    full_name='da.core.DaExceptionChunkstoreInvalidOffset',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\307\014\032\024Invalid chunk offset')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=8739,
    serialized_end=8827,
)


_DAEXCEPTIONCHUNKSTORECORRUPTION = _descriptor.Descriptor(
    name='DaExceptionChunkstoreCorruption',
    full_name='da.core.DaExceptionChunkstoreCorruption',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\022DaExceptionChecked\020\310\014\032\025ChunkStore corruption')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=8829,
    serialized_end=8915,
)


_DAEXCEPTIONCHUNKSTOREINVALIDDEVICE = _descriptor.Descriptor(
    name='DaExceptionChunkstoreInvalidDevice',
    full_name='da.core.DaExceptionChunkstoreInvalidDevice',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionChecked\020\311\014\032\031Invalid ChunkStore device')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=8917,
    serialized_end=9010,
)


_DAEXCEPTIONCHUNKSTOREINVALIDCHKSUMTYPE = _descriptor.Descriptor(
    name='DaExceptionChunkstoreInvalidChksumType',
    full_name='da.core.DaExceptionChunkstoreInvalidChksumType',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\312\014\032\033Invalid chunk checksum type')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=9012,
    serialized_end=9111,
)


_DAEXCEPTIONCHUNKSTORECHUNKBUSY = _descriptor.Descriptor(
    name='DaExceptionChunkstoreChunkBusy',
    full_name='da.core.DaExceptionChunkstoreChunkBusy',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?(\022&\n\022DaExceptionChecked\020\313\014\032\rChunk is busy')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=9113,
    serialized_end=9190,
)


_DAEXCEPTIONCHUNKSTOREINVALIDKEY = _descriptor.Descriptor(
    name='DaExceptionChunkstoreInvalidKey',
    full_name='da.core.DaExceptionChunkstoreInvalidKey',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\022DaExceptionChecked\020\314\014\032\021Invalid chunk key')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=9192,
    serialized_end=9274,
)


_DAEXCEPTIONCHUNKSTOREFOREIGNDEVICE = _descriptor.Descriptor(
    name='DaExceptionChunkstoreForeignDevice',
    full_name='da.core.DaExceptionChunkstoreForeignDevice',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionChecked\020\315\014\032\031Foreign ChunkStore device')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=9276,
    serialized_end=9369,
)


_DAEXCEPTIONCHUNKSTORECRASHED = _descriptor.Descriptor(
    name='DaExceptionChunkstoreCrashed',
    full_name='da.core.DaExceptionChunkstoreCrashed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?-\022+\n\022DaExceptionChecked\020\316\014\032\022ChunkStore crashed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=9371,
    serialized_end=9451,
)


_DAEXCEPTIONCHUNKSTORESUFFIXTOOLONG = _descriptor.Descriptor(
    name='DaExceptionChunkstoreSuffixTooLong',
    full_name='da.core.DaExceptionChunkstoreSuffixTooLong',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?L\022J\n\022DaExceptionChecked\020\317\014\0321Unexpected suffix while deleting chunks by prefix')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=9453,
    serialized_end=9570,
)


_DAEXCEPTIONCHUNKSTORERETRYWRITE = _descriptor.Descriptor(
    name='DaExceptionChunkstoreRetryWrite',
    full_name='da.core.DaExceptionChunkstoreRetryWrite',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?W\022U\n\022DaExceptionChecked\020\320\014\032<Write verification failed and the write needs to be retried.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=9572,
    serialized_end=9697,
)


_DAEXCEPTIONCHUNKSTOREENABLESYNTHETICCHUNKS = _descriptor.Descriptor(
    name='DaExceptionChunkstoreEnableSyntheticChunks',
    full_name='da.core.DaExceptionChunkstoreEnableSyntheticChunks',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\022DaExceptionChecked\020\321\014\032\036Enable synthetic chunks first.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=9699,
    serialized_end=9805,
)


_DAEXCEPTIONCHUNKSTOREUNMANAGED = _descriptor.Descriptor(
    name='DaExceptionChunkstoreUnmanaged',
    full_name='da.core.DaExceptionChunkstoreUnmanaged',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\022DaExceptionChecked\020\322\014\032\020No Disk Manager.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=9807,
    serialized_end=9887,
)


_DAEXCEPTIONCHUNKSTORECHUNKREPAIRING = _descriptor.Descriptor(
    name='DaExceptionChunkstoreChunkRepairing',
    full_name='da.core.DaExceptionChunkstoreChunkRepairing',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\323\014\032\030Chunk is being repaired.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=9889,
    serialized_end=9982,
)


_DAEXCEPTIONFSTORENOFREESPACE = _descriptor.Descriptor(
    name='DaExceptionFstoreNoFreeSpace',
    full_name='da.core.DaExceptionFstoreNoFreeSpace',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\022DaExceptionChecked\020\244\r\032\027FlashStore out of space')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=9984,
    serialized_end=10069,
)


_DAEXCEPTIONFSTOREVEBSEALED = _descriptor.Descriptor(
    name='DaExceptionFstoreVebSealed',
    full_name='da.core.DaExceptionFstoreVebSealed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?B\022@\n\022DaExceptionChecked\020\245\r\032\'Failed to seal FlashStore VEB for write')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=10071,
    serialized_end=10170,
)


_DAEXCEPTIONFSTOREVEBUNSEALED = _descriptor.Descriptor(
    name='DaExceptionFstoreVebUnsealed',
    full_name='da.core.DaExceptionFstoreVebUnsealed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\022DaExceptionChecked\020\246\r\032&Failed to read unsealed FlashStore VEB')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=10172,
    serialized_end=10272,
)


_DAEXCEPTIONFSTOREINVALIDVEB = _descriptor.Descriptor(
    name='DaExceptionFstoreInvalidVeb',
    full_name='da.core.DaExceptionFstoreInvalidVeb',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\247\r\032\026Invalid FlashStore VEB')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=10274,
    serialized_end=10357,
)


_DAEXCEPTIONFSTOREINVALIDARGUMENTS = _descriptor.Descriptor(
    name='DaExceptionFstoreInvalidArguments',
    full_name='da.core.DaExceptionFstoreInvalidArguments',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\250\r\032\033Invalid FlashStore argument')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=10359,
    serialized_end=10453,
)


_DAEXCEPTIONFSTORENORESOURCES = _descriptor.Descriptor(
    name='DaExceptionFstoreNoResources',
    full_name='da.core.DaExceptionFstoreNoResources',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\251\r\032\033Out of FlashStore resources')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=10455,
    serialized_end=10544,
)


_DAEXCEPTIONFSTOREWRITEFAILED = _descriptor.Descriptor(
    name='DaExceptionFstoreWriteFailed',
    full_name='da.core.DaExceptionFstoreWriteFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\022DaExceptionChecked\020\252\r\032\027FlashStore write failed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=10546,
    serialized_end=10631,
)


_DAEXCEPTIONSTORAGEPOOLDOWN = _descriptor.Descriptor(
    name='DaExceptionStoragePoolDown',
    full_name='da.core.DaExceptionStoragePoolDown',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\211\016\032\024Storage pool is down')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=10633,
    serialized_end=10713,
)


_DAEXCEPTIONSTORAGEPOOLOUTOFSPACE = _descriptor.Descriptor(
    name='DaExceptionStoragePoolOutOfSpace',
    full_name='da.core.DaExceptionStoragePoolOutOfSpace',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?7\0225\n\022DaExceptionChecked\020\212\016\032\034Storage pool is out of space')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=10715,
    serialized_end=10809,
)


_DAEXCEPTIONSTORAGESTRIPENOTFOUND = _descriptor.Descriptor(
    name='DaExceptionStorageStripeNotFound',
    full_name='da.core.DaExceptionStorageStripeNotFound',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\213\016\032\030Storage stripe not found')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=10811,
    serialized_end=10901,
)


_DAEXCEPTIONSTORAGESTRIPECORRUPT = _descriptor.Descriptor(
    name='DaExceptionStorageStripeCorrupt',
    full_name='da.core.DaExceptionStorageStripeCorrupt',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\215\016\032\026Storage stripe corrupt')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=10903,
    serialized_end=10990,
)


_DAEXCEPTIONSTORAGESTRIPEREBUILDJOBFAILURE = _descriptor.Descriptor(
    name='DaExceptionStorageStripeRebuildJobFailure',
    full_name='da.core.DaExceptionStorageStripeRebuildJobFailure',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\022DaExceptionChecked\020\216\016\032\"Storage stripe rebuild job failure')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=10992,
    serialized_end=11101,
)


_DAEXCEPTIONSTORAGESTRIPESETNOTFOUND = _descriptor.Descriptor(
    name='DaExceptionStorageStripeSetNotFound',
    full_name='da.core.DaExceptionStorageStripeSetNotFound',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\217\016\032\024Stripe Set not found')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=11103,
    serialized_end=11192,
)


_DAEXCEPTIONSTORAGESTRIPESCRUBJOBFAILURE = _descriptor.Descriptor(
    name='DaExceptionStorageStripeScrubJobFailure',
    full_name='da.core.DaExceptionStorageStripeScrubJobFailure',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\220\016\032 Storage stripe scrub job failure')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=11194,
    serialized_end=11299,
)


_DAEXCEPTIONSTORAGEPOOLDRIVEBUSY = _descriptor.Descriptor(
    name='DaExceptionStoragePoolDriveBusy',
    full_name='da.core.DaExceptionStoragePoolDriveBusy',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='diskId', full_name='da.core.DaExceptionStoragePoolDriveBusy.diskId', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?F\022D\n\022DaExceptionChecked\020\221\016\032)Cannot remove drive {diskId} at this time(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=11302,
    serialized_end=11434,
)


_DAEXCEPTIONSTORAGESTRIPERECONSTMORENEEDED = _descriptor.Descriptor(
    name='DaExceptionStorageStripeReconstMoreNeeded',
    full_name='da.core.DaExceptionStorageStripeReconstMoreNeeded',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?L\022J\n\024DaExceptionLocalOnly\020\222\016\032-Storage stripe reconstruct, more tiles needed \001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=11436,
    serialized_end=11560,
)


_DAEXCEPTIONTOOFEWDRIVES = _descriptor.Descriptor(
    name='DaExceptionTooFewDrives',
    full_name='da.core.DaExceptionTooFewDrives',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='diskId', full_name='da.core.DaExceptionTooFewDrives.diskId', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?c\022a\n\037DaExceptionStoragePoolDriveBusy\020\223\016\0329Too few drives would remain, cannot remove drive {diskId}(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=11563,
    serialized_end=11716,
)


_DAEXCEPTIONSPARECAPACITYEXCEEDED = _descriptor.Descriptor(
    name='DaExceptionSpareCapacityExceeded',
    full_name='da.core.DaExceptionSpareCapacityExceeded',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='diskId', full_name='da.core.DaExceptionSpareCapacityExceeded.diskId', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?h\022f\n\037DaExceptionStoragePoolDriveBusy\020\224\016\032>Spare capacity would be exceeded, cannot remove drive {diskId}(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=11719,
    serialized_end=11886,
)


_DAEXCEPTIONSTORAGEPOOLNOTOK = _descriptor.Descriptor(
    name='DaExceptionStoragePoolNotOK',
    full_name='da.core.DaExceptionStoragePoolNotOK',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\022DaExceptionChecked\020\225\016\032\035Storage pool status is not ok')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=11888,
    serialized_end=11978,
)


_DAEXCEPTIONVDISKRDONLYSNAPSHOT = _descriptor.Descriptor(
    name='DaExceptionVdiskRdonlySnapshot',
    full_name='da.core.DaExceptionVdiskRdonlySnapshot',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\022DaExceptionChecked\020\354\016\032\035VDisk is a read-only snapshot')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=11980,
    serialized_end=12073,
)


_DAEXCEPTIONVDISKMAXOPENSESSIONS = _descriptor.Descriptor(
    name='DaExceptionVdiskMaxOpenSessions',
    full_name='da.core.DaExceptionVdiskMaxOpenSessions',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\022DaExceptionChecked\020\355\016\032&Maximum open session reached for VDisk')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=12075,
    serialized_end=12178,
)


_DAEXCEPTIONVDISKINVALIDARGS = _descriptor.Descriptor(
    name='DaExceptionVdiskInvalidArgs',
    full_name='da.core.DaExceptionVdiskInvalidArgs',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\022DaExceptionChecked\020\356\016\032\025Invalid XMap argument')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=12180,
    serialized_end=12262,
)


_DAEXCEPTIONVDISKSNAPIDMISMATCH = _descriptor.Descriptor(
    name='DaExceptionVdiskSnapidMismatch',
    full_name='da.core.DaExceptionVdiskSnapidMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?G\022E\n\022DaExceptionChecked\020\357\016\032,SnapId from DMap is <= snapId from NameSpace')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=12264,
    serialized_end=12372,
)


_DAEXCEPTIONVDISKBLOCKKEYMISMATCH = _descriptor.Descriptor(
    name='DaExceptionVdiskBlockKeyMismatch',
    full_name='da.core.DaExceptionVdiskBlockKeyMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\022DaExceptionChecked\020\360\016\032\036Dmap block value size mismatch')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=12374,
    serialized_end=12470,
)


_DAEXCEPTIONVDISKBLOCKOFFSETMISMATCH = _descriptor.Descriptor(
    name='DaExceptionVdiskBlockOffsetMismatch',
    full_name='da.core.DaExceptionVdiskBlockOffsetMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\022DaExceptionChecked\020\361\016\032\037Dmap block value offset invalid')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=12472,
    serialized_end=12572,
)


_DAEXCEPTIONVDISKXMAPCHECKSUMMISMATCH = _descriptor.Descriptor(
    name='DaExceptionVdiskXmapChecksumMismatch',
    full_name='da.core.DaExceptionVdiskXmapChecksumMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\362\016\032\026XMap checksum mismatch')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=12574,
    serialized_end=12666,
)


_DAEXCEPTIONVDISKCLUMPREFCHECKSUMMISMATCH = _descriptor.Descriptor(
    name='DaExceptionVdiskClumprefChecksumMismatch',
    full_name='da.core.DaExceptionVdiskClumprefChecksumMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?E\022C\n\022DaExceptionChecked\020\363\016\032*Checksums for SR enumeration did not match')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=12668,
    serialized_end=12784,
)


_DAEXCEPTIONVDISKMAXOPENEDEXCEEDED = _descriptor.Descriptor(
    name='DaExceptionVdiskMaxOpenedExceeded',
    full_name='da.core.DaExceptionVdiskMaxOpenedExceeded',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\022DaExceptionChecked\020\364\016\032(More VDisks are open than the array size')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=12786,
    serialized_end=12893,
)


_DAEXCEPTIONVDISKLEASETOKENALREADYEXISTS = _descriptor.Descriptor(
    name='DaExceptionVdiskLeaseTokenAlreadyExists',
    full_name='da.core.DaExceptionVdiskLeaseTokenAlreadyExists',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\365\016\032 VDisk lease token already exists')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=12895,
    serialized_end=13000,
)


_DAEXCEPTIONLEASEMISMATCH = _descriptor.Descriptor(
    name='DaExceptionLeaseMismatch',
    full_name='da.core.DaExceptionLeaseMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?7\0225\n\022DaExceptionChecked\020\366\016\032\034Lease mismatch or expiration')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=13002,
    serialized_end=13088,
)


_DAEXCEPTIONVDISKCPTIMEOUT = _descriptor.Descriptor(
    name='DaExceptionVdiskCpTimeout',
    full_name='da.core.DaExceptionVdiskCpTimeout',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\367\016\032 CP Request to FMgr was timed-out')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=13090,
    serialized_end=13181,
)


_DAEXCEPTIONVDISKREPACKFAILED = _descriptor.Descriptor(
    name='DaExceptionVdiskRepackFailed',
    full_name='da.core.DaExceptionVdiskRepackFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\022DaExceptionChecked\020\370\016\032%VDisk repack recipe generation failed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=13183,
    serialized_end=13282,
)


_DAEXCEPTIONVDISKRECIPESTALE = _descriptor.Descriptor(
    name='DaExceptionVdiskRecipeStale',
    full_name='da.core.DaExceptionVdiskRecipeStale',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?n\022l\n\022DaExceptionChecked\020\371\016\032SVDisk cannot return repack recipe because new snaps are created and recipe is stale')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=13285,
    serialized_end=13429,
)


_DAEXCEPTIONVDISKRECIPENOTFOUND = _descriptor.Descriptor(
    name='DaExceptionVdiskRecipeNotFound',
    full_name='da.core.DaExceptionVdiskRecipeNotFound',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\022DaExceptionChecked\020\372\016\032\037VDisk cannot find repack recipe')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=13431,
    serialized_end=13526,
)


_DAEXCEPTIONVDISKSTALESERVERUUID = _descriptor.Descriptor(
    name='DaExceptionVdiskStaleServerUuid',
    full_name='da.core.DaExceptionVdiskStaleServerUuid',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?J\022H\n\022DaExceptionChecked\020\373\016\032/VDiskCtrlrServer\'s UUID in the request is stale')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=13528,
    serialized_end=13640,
)


_DAEXCEPTIONVDISKNOWRITELEASE = _descriptor.Descriptor(
    name='DaExceptionVdiskNoWriteLease',
    full_name='da.core.DaExceptionVdiskNoWriteLease',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?E\022C\n\022DaExceptionChecked\020\374\016\032*VDiskCtrlrServer does not have write lease')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=13642,
    serialized_end=13746,
)


_DAEXCEPTIONVDISKDUMPMISSINGFPFOUND = _descriptor.Descriptor(
    name='DaExceptionVdiskDumpMissingFpFound',
    full_name='da.core.DaExceptionVdiskDumpMissingFpFound',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?P\022N\n\022DaExceptionChecked\020\375\016\0325VDiskDump found an FP matching a missing FP provided.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=13748,
    serialized_end=13869,
)


_DAEXCEPTIONVDISKJOBCANCELED = _descriptor.Descriptor(
    name='DaExceptionVdiskJobCanceled',
    full_name='da.core.DaExceptionVdiskJobCanceled',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222??\022=\n\022DaExceptionChecked\020\376\016\032$VDisk library job has been canceled.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=13871,
    serialized_end=13968,
)


_DAEXCEPTIONVDISKHASWRITELEASE = _descriptor.Descriptor(
    name='DaExceptionVdiskHasWriteLease',
    full_name='da.core.DaExceptionVdiskHasWriteLease',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\022DaExceptionChecked\020\377\016\032\036VDisk has a valid write lease.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=13970,
    serialized_end=14063,
)


_DAEXCEPTIONVDISKREPLCHECKSUMMISMATCH = _descriptor.Descriptor(
    name='DaExceptionVdiskReplChecksumMismatch',
    full_name='da.core.DaExceptionVdiskReplChecksumMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\022DaExceptionChecked\020\200\017\032\"Checksum mismatch after ApplyDiff.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=14065,
    serialized_end=14169,
)


_DAEXCEPTIONVDISKSETLIVEINVALIDARG = _descriptor.Descriptor(
    name='DaExceptionVdiskSetLiveInvalidArg',
    full_name='da.core.DaExceptionVdiskSetLiveInvalidArg',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\022DaExceptionChecked\020\201\017\032(SetLiveSnaps received invalid arguments.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=14171,
    serialized_end=14278,
)


_DAEXCEPTIONFILEPERM = _descriptor.Descriptor(
    name='DaExceptionFilePerm',
    full_name='da.core.DaExceptionFilePerm',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?$\022\"\n\022DaExceptionChecked\020\320\017\032\tNot owner')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=14280,
    serialized_end=14342,
)


_DAEXCEPTIONFILENOENT = _descriptor.Descriptor(
    name='DaExceptionFileNoent',
    full_name='da.core.DaExceptionFileNoent',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionChecked\020\321\017\032\031No such file or directory')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=14344,
    serialized_end=14423,
)


_DAEXCEPTIONFILEIO = _descriptor.Descriptor(
    name='DaExceptionFileIo',
    full_name='da.core.DaExceptionFileIo',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?$\022\"\n\022DaExceptionChecked\020\322\017\032\tI/O error')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=14425,
    serialized_end=14485,
)


_DAEXCEPTIONFILENXIO = _descriptor.Descriptor(
    name='DaExceptionFileNxio',
    full_name='da.core.DaExceptionFileNxio',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\022DaExceptionChecked\020\323\017\032\032I/O error - no such device')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=14487,
    serialized_end=14566,
)


_DAEXCEPTIONFILEACCES = _descriptor.Descriptor(
    name='DaExceptionFileAcces',
    full_name='da.core.DaExceptionFileAcces',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\022DaExceptionChecked\020\324\017\032\021Permission denied')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=14568,
    serialized_end=14639,
)


_DAEXCEPTIONFILEEXIST = _descriptor.Descriptor(
    name='DaExceptionFileExist',
    full_name='da.core.DaExceptionFileExist',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\022DaExceptionChecked\020\325\017\032\023File already exists')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=14641,
    serialized_end=14714,
)


_DAEXCEPTIONFILEXDEV = _descriptor.Descriptor(
    name='DaExceptionFileXdev',
    full_name='da.core.DaExceptionFileXdev',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionChecked\020\326\017\032\031Invalid cross device link')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=14716,
    serialized_end=14794,
)


_DAEXCEPTIONFILENODEV = _descriptor.Descriptor(
    name='DaExceptionFileNodev',
    full_name='da.core.DaExceptionFileNodev',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?)\022\'\n\022DaExceptionChecked\020\327\017\032\016No such device')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=14796,
    serialized_end=14864,
)


_DAEXCEPTIONFILENOTDIR = _descriptor.Descriptor(
    name='DaExceptionFileNotdir',
    full_name='da.core.DaExceptionFileNotdir',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\022DaExceptionChecked\020\330\017\032\017Not a directory')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=14866,
    serialized_end=14936,
)


_DAEXCEPTIONFILEISDIR = _descriptor.Descriptor(
    name='DaExceptionFileIsdir',
    full_name='da.core.DaExceptionFileIsdir',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?)\022\'\n\022DaExceptionChecked\020\331\017\032\016Is a directory')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=14938,
    serialized_end=15006,
)


_DAEXCEPTIONFILEINVAL = _descriptor.Descriptor(
    name='DaExceptionFileInval',
    full_name='da.core.DaExceptionFileInval',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\022DaExceptionChecked\020\332\017\032\020Invalid argument')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=15008,
    serialized_end=15078,
)


_DAEXCEPTIONFILEFBIG = _descriptor.Descriptor(
    name='DaExceptionFileFbig',
    full_name='da.core.DaExceptionFileFbig',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?)\022\'\n\022DaExceptionChecked\020\333\017\032\016File too large')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=15080,
    serialized_end=15147,
)


_DAEXCEPTIONFILEROFS = _descriptor.Descriptor(
    name='DaExceptionFileRofs',
    full_name='da.core.DaExceptionFileRofs',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\024DaExceptionUnchecked\020\335\017\032\024Read-only filesystem')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=15149,
    serialized_end=15224,
)


_DAEXCEPTIONFILEMLINK = _descriptor.Descriptor(
    name='DaExceptionFileMlink',
    full_name='da.core.DaExceptionFileMlink',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\022DaExceptionChecked\020\336\017\032\023Too many hard links')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=15226,
    serialized_end=15299,
)


_DAEXCEPTIONFILENAMETOOLONG = _descriptor.Descriptor(
    name='DaExceptionFileNametoolong',
    full_name='da.core.DaExceptionFileNametoolong',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\337\017\032\024Filename is too long')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=15301,
    serialized_end=15381,
)


_DAEXCEPTIONFILENOTEMPTY = _descriptor.Descriptor(
    name='DaExceptionFileNotempty',
    full_name='da.core.DaExceptionFileNotempty',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\340\017\032\026Directory is not empty')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=15383,
    serialized_end=15462,
)


_DAEXCEPTIONFILEDQUOT = _descriptor.Descriptor(
    name='DaExceptionFileDquot',
    full_name='da.core.DaExceptionFileDquot',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\022DaExceptionChecked\020\341\017\032\027Resource quota exceeded')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=15464,
    serialized_end=15541,
)


_DAEXCEPTIONFILESTALE = _descriptor.Descriptor(
    name='DaExceptionFileStale',
    full_name='da.core.DaExceptionFileStale',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\024DaExceptionUnchecked\020\342\017\032\022Illegal filehandle')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=15543,
    serialized_end=15617,
)


_DAEXCEPTIONFILEREMOTE = _descriptor.Descriptor(
    name='DaExceptionFileRemote',
    full_name='da.core.DaExceptionFileRemote',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\022DaExceptionChecked\020\343\017\032\036Filehandle is not server local')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=15619,
    serialized_end=15704,
)


_DAEXCEPTIONFILEBADHANDLE = _descriptor.Descriptor(
    name='DaExceptionFileBadhandle',
    full_name='da.core.DaExceptionFileBadhandle',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\344\017\032\026Illegal NFS filehandle')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=15706,
    serialized_end=15786,
)


_DAEXCEPTIONFILENOTSYNC = _descriptor.Descriptor(
    name='DaExceptionFileNotSync',
    full_name='da.core.DaExceptionFileNotSync',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\345\017\032\026Setattr update problem')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=15788,
    serialized_end=15866,
)


_DAEXCEPTIONFILEBADCOOKIE = _descriptor.Descriptor(
    name='DaExceptionFileBadCookie',
    full_name='da.core.DaExceptionFileBadCookie',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?-\022+\n\022DaExceptionChecked\020\346\017\032\022Bad readdir cookie')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=15868,
    serialized_end=15944,
)


_DAEXCEPTIONFILENOTSUPP = _descriptor.Descriptor(
    name='DaExceptionFileNotsupp',
    full_name='da.core.DaExceptionFileNotsupp',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\022DaExceptionChecked\020\347\017\032\027Operation not supported')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=15946,
    serialized_end=16025,
)


_DAEXCEPTIONFILETOOSMALL = _descriptor.Descriptor(
    name='DaExceptionFileToosmall',
    full_name='da.core.DaExceptionFileToosmall',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\022DaExceptionChecked\020\350\017\032\023Buffer is too small')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=16027,
    serialized_end=16103,
)


_DAEXCEPTIONFILESERVERFAULT = _descriptor.Descriptor(
    name='DaExceptionFileServerfault',
    full_name='da.core.DaExceptionFileServerfault',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\351\017\032\024Unknown server error')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=16105,
    serialized_end=16185,
)


_DAEXCEPTIONFILEBADTYPE = _descriptor.Descriptor(
    name='DaExceptionFileBadtype',
    full_name='da.core.DaExceptionFileBadtype',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\022DaExceptionChecked\020\352\017\032\020Invalid filetype')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=16187,
    serialized_end=16259,
)


_DAEXCEPTIONFILEJUKEBOX = _descriptor.Descriptor(
    name='DaExceptionFileJukebox',
    full_name='da.core.DaExceptionFileJukebox',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\353\017\032\030Server operation pending')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=16261,
    serialized_end=16341,
)


_DAEXCEPTIONFILEFPRINTNOTFOUND = _descriptor.Descriptor(
    name='DaExceptionFileFprintnotfound',
    full_name='da.core.DaExceptionFileFprintnotfound',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\022DaExceptionChecked\020\354\017\032\025Fingerprint not found')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=16343,
    serialized_end=16427,
)


_DAEXCEPTIONFILEABORTED = _descriptor.Descriptor(
    name='DaExceptionFileAborted',
    full_name='da.core.DaExceptionFileAborted',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\022DaExceptionChecked\020\355\017\032\021Operation aborted')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=16429,
    serialized_end=16502,
)


_DAEXCEPTIONFILEBADDATASTOREID = _descriptor.Descriptor(
    name='DaExceptionFileBadDatastoreId',
    full_name='da.core.DaExceptionFileBadDatastoreId',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?7\0225\n\022DaExceptionChecked\020\356\017\032\034Datastore id hasn\'t been set')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=16504,
    serialized_end=16595,
)


_DAEXCEPTIONFILESTALEDATA = _descriptor.Descriptor(
    name='DaExceptionFileStaleData',
    full_name='da.core.DaExceptionFileStaleData',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\357\017\032 Fingerprint for data has changed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=16597,
    serialized_end=16687,
)


_DAEXCEPTIONFILEFROZEN = _descriptor.Descriptor(
    name='DaExceptionFileFrozen',
    full_name='da.core.DaExceptionFileFrozen',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\360\017\032\026File is already frozen')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=16689,
    serialized_end=16766,
)


_DAEXCEPTIONFILEBADSNODE = _descriptor.Descriptor(
    name='DaExceptionFileBadSnode',
    full_name='da.core.DaExceptionFileBadSnode',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\022DaExceptionChecked\020\361\017\032\036Unable to get shared node info')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=16768,
    serialized_end=16855,
)


_DAEXCEPTIONFILENAMESPACEBADSTATE = _descriptor.Descriptor(
    name='DaExceptionFileNamespaceBadState',
    full_name='da.core.DaExceptionFileNamespaceBadState',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\022DaExceptionChecked\020\362\017\032\037Namespace not in expected state')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=16857,
    serialized_end=16954,
)


_DAEXCEPTIONFILEWRONGFMGRHANDLER = _descriptor.Descriptor(
    name='DaExceptionFileWrongFmgrHandler',
    full_name='da.core.DaExceptionFileWrongFmgrHandler',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\363\017\032 Wrong FMgr handle for given file')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=16956,
    serialized_end=17053,
)


_DAEXCEPTIONFILERANGE = _descriptor.Descriptor(
    name='DaExceptionFileRange',
    full_name='da.core.DaExceptionFileRange',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\022DaExceptionChecked\020\364\017\032\035Extended attribute is too big')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=17055,
    serialized_end=17138,
)


_DAEXCEPTIONFILEINTSYSTEMCALL = _descriptor.Descriptor(
    name='DaExceptionFileIntSystemCall',
    full_name='da.core.DaExceptionFileIntSystemCall',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\022DaExceptionChecked\020\365\017\032\027Interrupted system call')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=17140,
    serialized_end=17225,
)


_DAEXCEPTIONFILEBROKENPIPE = _descriptor.Descriptor(
    name='DaExceptionFileBrokenPipe',
    full_name='da.core.DaExceptionFileBrokenPipe',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?&\022$\n\022DaExceptionChecked\020\366\017\032\013Broken Pipe')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=17227,
    serialized_end=17297,
)


_DAEXCEPTIONFILEWRONGFORMAT = _descriptor.Descriptor(
    name='DaExceptionFileWrongFormat',
    full_name='da.core.DaExceptionFileWrongFormat',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\'\022%\n\022DaExceptionChecked\020\367\017\032\014Wrong format')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=17299,
    serialized_end=17371,
)


_DAEXCEPTIONFILETOOMANYSNAPS = _descriptor.Descriptor(
    name='DaExceptionFileTooManySnaps',
    full_name='da.core.DaExceptionFileTooManySnaps',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\022DaExceptionChecked\020\370\017\032\027File has too many snaps')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=17373,
    serialized_end=17457,
)


_DAEXCEPTIONFILESTALESESSION = _descriptor.Descriptor(
    name='DaExceptionFileStaleSession',
    full_name='da.core.DaExceptionFileStaleSession',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?(\022&\n\022DaExceptionChecked\020\371\017\032\rStale Session')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=17459,
    serialized_end=17533,
)


_DAEXCEPTIONFILEEXPIREDSESSION = _descriptor.Descriptor(
    name='DaExceptionFileExpiredSession',
    full_name='da.core.DaExceptionFileExpiredSession',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\022DaExceptionChecked\020\372\017\032\017Session Expired')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=17535,
    serialized_end=17613,
)


_DAEXCEPTIONFILENAMEISNULL = _descriptor.Descriptor(
    name='DaExceptionFileNameIsNull',
    full_name='da.core.DaExceptionFileNameIsNull',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\024DaExceptionUnchecked\020\373\017\032\027File/Path name is NULL.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=17615,
    serialized_end=17699,
)


_DAEXCEPTIONFILENAMEISEMPTY = _descriptor.Descriptor(
    name='DaExceptionFileNameIsEmpty',
    full_name='da.core.DaExceptionFileNameIsEmpty',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\024DaExceptionUnchecked\020\374\017\032\030File/Path name is Empty.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=17701,
    serialized_end=17787,
)


_DAEXCEPTIONFILENAMEHASILLEGALCHARS = _descriptor.Descriptor(
    name='DaExceptionFileNameHasIllegalChars',
    full_name='da.core.DaExceptionFileNameHasIllegalChars',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?L\022J\n\024DaExceptionUnchecked\020\375\017\032/File/Path name has illegal characters. / .. ? *')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=17789,
    serialized_end=17906,
)


_DAEXCEPTIONDATASTOREDISABLED = _descriptor.Descriptor(
    name='DaExceptionDatastoreDisabled',
    full_name='da.core.DaExceptionDatastoreDisabled',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\376\017\032\026Datastore is disabled.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=17908,
    serialized_end=17992,
)


_DAEXCEPTIONMAXDATASTORESCREATED = _descriptor.Descriptor(
    name='DaExceptionMaxDatastoresCreated',
    full_name='da.core.DaExceptionMaxDatastoresCreated',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\022DaExceptionChecked\020\377\017\032)Max supported datastores already created.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=17994,
    serialized_end=18100,
)


_DAEXCEPTIONDATASTORENOTFOUND = _descriptor.Descriptor(
    name='DaExceptionDatastoreNotFound',
    full_name='da.core.DaExceptionDatastoreNotFound',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\200\020\032\024Datastore not found.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=18102,
    serialized_end=18184,
)


_DAEXCEPTIONDATASTOREMAXEXPORTS = _descriptor.Descriptor(
    name='DaExceptionDatastoreMaxExports',
    full_name='da.core.DaExceptionDatastoreMaxExports',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?H\022F\n\022DaExceptionChecked\020\201\020\032-Max number of exports for datastore exceeded.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=18186,
    serialized_end=18295,
)


_DAEXCEPTIONDATASTOREBUSY = _descriptor.Descriptor(
    name='DaExceptionDatastoreBusy',
    full_name='da.core.DaExceptionDatastoreBusy',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='protGrps', full_name='da.core.DaExceptionDatastoreBusy.protGrps', index=0,
            number=1, type=9, cpp_type=9, label=3,
            has_default_value=False, default_value=[],
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='mountedHosts', full_name='da.core.DaExceptionDatastoreBusy.mountedHosts', index=1,
            number=2, type=9, cpp_type=9, label=3,
            has_default_value=False, default_value=[],
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='srmProtGrps', full_name='da.core.DaExceptionDatastoreBusy.srmProtGrps', index=2,
            number=3, type=9, cpp_type=9, label=3,
            has_default_value=False, default_value=[],
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\351\001\022\346\001\n\022DaExceptionChecked\020\202\020\032\314\001Datastore is busy.\nDemote or delete the following protection groups: {protGrps}\nUsed in following srmEnabled protection groups: {srmProtGrps}\nUnmount the datastore from the following hosts: {mountedHosts}')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=18298,
    serialized_end=18662,
)


_DAEXCEPTIONRCACHENORESOURCES = _descriptor.Descriptor(
    name='DaExceptionRcacheNoResources',
    full_name='da.core.DaExceptionRcacheNoResources',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\264\020\032\033Read cache out of resources')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=18664,
    serialized_end=18753,
)


_DAEXCEPTIONRCACHERESCUEABORTED = _descriptor.Descriptor(
    name='DaExceptionRcacheRescueAborted',
    full_name='da.core.DaExceptionRcacheRescueAborted',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionChecked\020\265\020\032\031Read cache rescue aborted')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=18755,
    serialized_end=18844,
)


_DAEXCEPTIONRCACHEINVALHANDLE = _descriptor.Descriptor(
    name='DaExceptionRcacheInvalHandle',
    full_name='da.core.DaExceptionRcacheInvalHandle',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222??\022=\n\022DaExceptionChecked\020\266\020\032$Read cache invalid vdisk snap handle')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=18846,
    serialized_end=18944,
)


_DAEXCEPTIONRCACHEREMOTECLUMPMISS = _descriptor.Descriptor(
    name='DaExceptionRcacheRemoteClumpMiss',
    full_name='da.core.DaExceptionRcacheRemoteClumpMiss',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\024DaExceptionUnchecked\020\267\020\032\035Missed clump in remote RCache')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=18946,
    serialized_end=19043,
)


_DAEXCEPTIONGFPINDEXNEEDRECOVERY = _descriptor.Descriptor(
    name='DaExceptionGfpindexNeedRecovery',
    full_name='da.core.DaExceptionGfpindexNeedRecovery',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\230\021\032 Fingerprint index needs recovery')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=19045,
    serialized_end=19142,
)


_DAEXCEPTIONGFPINDEXINSERTOLDCONTAINERID = _descriptor.Descriptor(
    name='DaExceptionGfpindexInsertOldContainerid',
    full_name='da.core.DaExceptionGfpindexInsertOldContainerid',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\022DaExceptionChecked\020\231\021\032(Fingerprint index inserted old container')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=19144,
    serialized_end=19257,
)


_DAEXCEPTIONGFPINDEXINSERTSPANCONTAINER = _descriptor.Descriptor(
    name='DaExceptionGfpindexInsertSpanContainer',
    full_name='da.core.DaExceptionGfpindexInsertSpanContainer',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\022DaExceptionChecked\020\232\021\032)Fingerprint index insert spans containers')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=19259,
    serialized_end=19372,
)


_DAEXCEPTIONGFPINDEXSTILLRUNNING = _descriptor.Descriptor(
    name='DaExceptionGfpindexStillRunning',
    full_name='da.core.DaExceptionGfpindexStillRunning',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\233\021\032 Fingerprint server still running')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=19374,
    serialized_end=19471,
)


_DAEXCEPTIONGFPINDEXOUTOFRANGE = _descriptor.Descriptor(
    name='DaExceptionGfpindexOutOfRange',
    full_name='da.core.DaExceptionGfpindexOutOfRange',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?>\022<\n\022DaExceptionChecked\020\234\021\032#Fingerprint is out of service range')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=19473,
    serialized_end=19571,
)


_DAEXCEPTIONGFPINDEXINMIGRATIONRANGE = _descriptor.Descriptor(
    name='DaExceptionGfpindexInMigrationRange',
    full_name='da.core.DaExceptionGfpindexInMigrationRange',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?>\022<\n\024DaExceptionLocalOnly\020\235\021\032!Fingerprint is in migration range')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=19573,
    serialized_end=19677,
)


_DAEXCEPTIONGFPINDEXSTALEHANDLE = _descriptor.Descriptor(
    name='DaExceptionGfpindexStaleHandle',
    full_name='da.core.DaExceptionGfpindexStaleHandle',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\022DaExceptionChecked\020\236\021\032\036Scroll content handle is stale')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=19679,
    serialized_end=19773,
)


_DAEXCEPTIONLEASEMGRRETRY = _descriptor.Descriptor(
    name='DaExceptionLeasemgrRetry',
    full_name='da.core.DaExceptionLeasemgrRetry',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?&\022$\n\022DaExceptionChecked\020\374\021\032\013Lease retry')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=19775,
    serialized_end=19844,
)


_DAEXCEPTIONLEASEPENDINGREVOKE = _descriptor.Descriptor(
    name='DaExceptionLeasePendingRevoke',
    full_name='da.core.DaExceptionLeasePendingRevoke',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\375\021\032\033Lease is pending revocation')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=19846,
    serialized_end=19936,
)


_DAEXCEPTIONFMGROBJECTREADONLY = _descriptor.Descriptor(
    name='DaExceptionFmgrObjectReadOnly',
    full_name='da.core.DaExceptionFmgrObjectReadOnly',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\022DaExceptionChecked\020\340\022\032!Attempt to modify readonly object')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=19938,
    serialized_end=20034,
)


_DAEXCEPTIONFMGRFILECLOSING = _descriptor.Descriptor(
    name='DaExceptionFmgrFileClosing',
    full_name='da.core.DaExceptionFmgrFileClosing',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\024DaExceptionLocalOnly\020\342\022\032&Frontend write buffer log out of space')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=20036,
    serialized_end=20136,
)


_DAEXCEPTIONFMGROBJECTNOTFILE = _descriptor.Descriptor(
    name='DaExceptionFmgrObjectNotFile',
    full_name='da.core.DaExceptionFmgrObjectNotFile',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\343\022\032\024Object is not a file')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=20138,
    serialized_end=20220,
)


_DAEXCEPTIONFMGRFILENOTOPEN = _descriptor.Descriptor(
    name='DaExceptionFmgrFileNotOpen',
    full_name='da.core.DaExceptionFmgrFileNotOpen',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\345\022\032\033File not open on this FMgr.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=20222,
    serialized_end=20309,
)


_DAEXCEPTIONFMGRDUPLICATECPREQUEST = _descriptor.Descriptor(
    name='DaExceptionFmgrDuplicateCpRequest',
    full_name='da.core.DaExceptionFmgrDuplicateCpRequest',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\022DaExceptionChecked\020\346\022\032\025Duplicate CP request.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=20311,
    serialized_end=20399,
)


_DAEXCEPTIONSTRESSLEASEMISMATCH = _descriptor.Descriptor(
    name='DaExceptionStressLeaseMismatch',
    full_name='da.core.DaExceptionStressLeaseMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\024DaExceptionLocalOnly\020\347\022\032 Stress: Simulated Lease Mismatch')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=20401,
    serialized_end=20499,
)


_DAEXCEPTIONFILESTATEMISMATCH = _descriptor.Descriptor(
    name='DaExceptionFileStateMismatch',
    full_name='da.core.DaExceptionFileStateMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\024DaExceptionLocalOnly\020\350\022\032$File state changed on lease reaquire')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=20501,
    serialized_end=20601,
)


_DAEXCEPTIONLEASEREVOKE = _descriptor.Descriptor(
    name='DaExceptionLeaseRevoke',
    full_name='da.core.DaExceptionLeaseRevoke',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\024DaExceptionLocalOnly\020\351\022\032\023Lease being revoked')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=20603,
    serialized_end=20680,
)


_DAEXCEPTIONLEASEUPGRADENEEDED = _descriptor.Descriptor(
    name='DaExceptionLeaseUpgradeNeeded',
    full_name='da.core.DaExceptionLeaseUpgradeNeeded',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\024DaExceptionLocalOnly\020\352\022\032#Have a read lease, need write lease')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=20682,
    serialized_end=20782,
)


_DAEXCEPTIONLEASETIMEEXPIRED = _descriptor.Descriptor(
    name='DaExceptionLeaseTimeExpired',
    full_name='da.core.DaExceptionLeaseTimeExpired',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\024DaExceptionLocalOnly\020\353\022\032\027Lease timecheck expired')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=20784,
    serialized_end=20870,
)


_DAEXCEPTIONLEASEREACQUIREFORCP = _descriptor.Descriptor(
    name='DaExceptionLeaseReacquireForCP',
    full_name='da.core.DaExceptionLeaseReacquireForCP',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?I\022G\n\024DaExceptionLocalOnly\020\355\022\032,Need to reacquire lease to create precise CP')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=20872,
    serialized_end=20982,
)


_DAEXCEPTIONFMGRSTREAMNEEDSFLUSH = _descriptor.Descriptor(
    name='DaExceptionFmgrStreamNeedsFlush',
    full_name='da.core.DaExceptionFmgrStreamNeedsFlush',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?s\022q\n\024DaExceptionLocalOnly\020\356\022\032VClumpStoreStream underlying the file needs to be flushed for putXMap to make progress.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=20985,
    serialized_end=21138,
)


_DAEXCEPTIONFMGRWAITFORXMAPSTABILITY = _descriptor.Descriptor(
    name='DaExceptionFmgrWaitForXmapStability',
    full_name='da.core.DaExceptionFmgrWaitForXmapStability',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?H\022F\n\024DaExceptionLocalOnly\020\357\022\032+Caller must wait for XMap to be stabilized.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=21140,
    serialized_end=21254,
)


_DAEXCEPTIONFMGRSTALEIO = _descriptor.Descriptor(
    name='DaExceptionFmgrStaleIO',
    full_name='da.core.DaExceptionFmgrStaleIO',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?$\022\"\n\022DaExceptionChecked\020\360\022\032\tStale IO.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=21256,
    serialized_end=21321,
)


_DAEXCEPTIONFMGROLDERSYNCFORSR = _descriptor.Descriptor(
    name='DaExceptionFmgrOlderSyncForSr',
    full_name='da.core.DaExceptionFmgrOlderSyncForSr',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\024DaExceptionLocalOnly\020\361\022\032\033SyncForSR with older SRGen.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=21323,
    serialized_end=21415,
)


_DAEXCEPTIONFMGRFILENEEDSCLOSEAFTERCP = _descriptor.Descriptor(
    name='DaExceptionFmgrFileNeedsCloseAfterCP',
    full_name='da.core.DaExceptionFmgrFileNeedsCloseAfterCP',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?d\022b\n\024DaExceptionLocalOnly\020\362\022\032GFile needs to be closed and reopened because of CP during NVLog replay.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=21418,
    serialized_end=21561,
)


_DAEXCEPTIONFILEHASLIMBOCMDS = _descriptor.Descriptor(
    name='DaExceptionFileHasLimboCmds',
    full_name='da.core.DaExceptionFileHasLimboCmds',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?i\022g\n\024DaExceptionLocalOnly\020\363\022\032LFile needs to be closed because it has limbo commands & we need a precise CP')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=21564,
    serialized_end=21703,
)


_DAEXCEPTIONFMGRNOFLSRESOURCES = _descriptor.Descriptor(
    name='DaExceptionFmgrNoFlsResources',
    full_name='da.core.DaExceptionFmgrNoFlsResources',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?X\022V\n\022DaExceptionChecked\020\364\022\032=No resources available for serving flash less server request.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=21705,
    serialized_end=21829,
)


_DAEXCEPTIONFMGRNOFLSHOST = _descriptor.Descriptor(
    name='DaExceptionFmgrNoFlsHost',
    full_name='da.core.DaExceptionFmgrNoFlsHost',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?T\022R\n\024DaExceptionLocalOnly\020\365\022\0327No hosts available to serve flash less client requests.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=21831,
    serialized_end=21946,
)


_DAEXCEPTIONFMGRCANNOTSERVEFLSREQS = _descriptor.Descriptor(
    name='DaExceptionFmgrCannotServeFlsReqs',
    full_name='da.core.DaExceptionFmgrCannotServeFlsReqs',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\022DaExceptionChecked\020\366\022\032(Cannot serve any requests from NFH hosts')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=21948,
    serialized_end=22055,
)


_DAEXCEPTIONNVLOGWRITENEEDSNAPFIRST = _descriptor.Descriptor(
    name='DaExceptionNvlogWriteNeedSnapFirst',
    full_name='da.core.DaExceptionNvlogWriteNeedSnapFirst',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='cpCookieStr', full_name='da.core.DaExceptionNvlogWriteNeedSnapFirst.cpCookieStr', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?7\0225\n\022DaExceptionChecked\020\367\022\032\032Need to take a snap first.(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=22058,
    serialized_end=22188,
)


_DAEXCEPTIONFILEACQUIRELEASE = _descriptor.Descriptor(
    name='DaExceptionFileAcquireLease',
    full_name='da.core.DaExceptionFileAcquireLease',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?R\022P\n\022DaExceptionChecked\020\370\022\0327Remote host needs to acquire lease (open file locally).')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=22190,
    serialized_end=22306,
)


_DAEXCEPTIONPLATFORM = _descriptor.Descriptor(
    name='DaExceptionPlatform',
    full_name='da.core.DaExceptionPlatform',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?)\022\'\n\022DaExceptionChecked\020\250\024\032\016Platform error')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=22308,
    serialized_end=22375,
)


_DAEXCEPTIONPLATFORMRUNTIME = _descriptor.Descriptor(
    name='DaExceptionPlatformRunTime',
    full_name='da.core.DaExceptionPlatformRunTime',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\024DaExceptionUnchecked\020\251\024\032\027Platform internal error')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=22377,
    serialized_end=22462,
)


_DAEXCEPTIONPLATFORMRPCTIMEOUT = _descriptor.Descriptor(
    name='DaExceptionPlatformRPCTimeout',
    full_name='da.core.DaExceptionPlatformRPCTimeout',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222??\022=\n\032DaExceptionPlatformRunTime\020\252\024\032\034Platform manager RPC timeout')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=22464,
    serialized_end=22563,
)


_DAEXCEPTIONPLATFORMSHUTDOWNREQUEST = _descriptor.Descriptor(
    name='DaExceptionPlatformShutdownRequest',
    full_name='da.core.DaExceptionPlatformShutdownRequest',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\032DaExceptionPlatformRunTime\020\253\024\032 Platform shutdown request failed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=22565,
    serialized_end=22673,
)


_DAEXCEPTIONPLATFORMREINITREQUEST = _descriptor.Descriptor(
    name='DaExceptionPlatformReinitRequest',
    full_name='da.core.DaExceptionPlatformReinitRequest',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\032DaExceptionPlatformRunTime\020\254\024\032\036Platform reinit request failed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=22675,
    serialized_end=22779,
)


_DAEXCEPTIONPLATFORMBEACONREQUEST = _descriptor.Descriptor(
    name='DaExceptionPlatformBeaconRequest',
    full_name='da.core.DaExceptionPlatformBeaconRequest',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\032DaExceptionPlatformRunTime\020\255\024\032\036Platform beacon request failed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=22781,
    serialized_end=22885,
)


_DAEXCEPTIONPLATFORMBATTERYDISCHARGEREQUEST = _descriptor.Descriptor(
    name='DaExceptionPlatformBatteryDischargeRequest',
    full_name='da.core.DaExceptionPlatformBatteryDischargeRequest',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\227\001\022\224\001\n\032DaExceptionPlatformRunTime\020\256\024\032sPlatform battery discharge request failed, discharge is not allowed when there\'s any battery is already discharging')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=22888,
    serialized_end=23090,
)


_DAEXCEPTIONPLATFORMCANCELBATTERYDISCHARGEREQUEST = _descriptor.Descriptor(
    name='DaExceptionPlatformCancelBatteryDischargeRequest',
    full_name='da.core.DaExceptionPlatformCancelBatteryDischargeRequest',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\241\001\022\236\001\n\032DaExceptionPlatformRunTime\020\257\024\032}Cancel platform battery discharge request failed, you can only cancel the discharge when battery is in ready to ship status. ')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=23093,
    serialized_end=23311,
)


_DAEXCEPTIONPLATFORMDISKPOWERONREQUEST = _descriptor.Descriptor(
    name='DaExceptionPlatformDiskPowerOnRequest',
    full_name='da.core.DaExceptionPlatformDiskPowerOnRequest',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\032DaExceptionPlatformRunTime\020\260\024\032\031Power on the disk failed.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=23313,
    serialized_end=23417,
)


_DAEXCEPTIONPLATFORMDISKPOWEROFFREQUEST = _descriptor.Descriptor(
    name='DaExceptionPlatformDiskPowerOffRequest',
    full_name='da.core.DaExceptionPlatformDiskPowerOffRequest',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\032DaExceptionPlatformRunTime\020\261\024\032\032Power off the disk failed.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=23419,
    serialized_end=23525,
)


_DAEXCEPTIONDISKMGR = _descriptor.Descriptor(
    name='DaExceptionDiskMgr',
    full_name='da.core.DaExceptionDiskMgr',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\032DaExceptionPlatformRunTime\020\262\024\032\022Disk manager error')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=23527,
    serialized_end=23605,
)


_DAEXCEPTIONNOTDATADRIVE = _descriptor.Descriptor(
    name='DaExceptionNotDataDrive',
    full_name='da.core.DaExceptionNotDataDrive',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?)\022\'\n\022DaExceptionDiskMgr\020\263\024\032\016Not data drive')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=23607,
    serialized_end=23678,
)


_DAEXCEPTIONINVALIDDRIVESTATE = _descriptor.Descriptor(
    name='DaExceptionInvalidDriveState',
    full_name='da.core.DaExceptionInvalidDriveState',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\022DaExceptionDiskMgr\020\264\024\032\023Invalid drive state')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=23680,
    serialized_end=23761,
)


_DAEXCEPTIONDRIVEREINIT = _descriptor.Descriptor(
    name='DaExceptionDriveReinit',
    full_name='da.core.DaExceptionDriveReinit',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\022DaExceptionDiskMgr\020\265\024\032\023Drive reinit failed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=23763,
    serialized_end=23838,
)


_DAEXCEPTIONDRIVENOTSTARTED = _descriptor.Descriptor(
    name='DaExceptionDriveNotStarted',
    full_name='da.core.DaExceptionDriveNotStarted',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\022DaExceptionDiskMgr\020\266\024\032\021Drive not started')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=23840,
    serialized_end=23917,
)


_DAEXCEPTIONFOREIGNDRIVE = _descriptor.Descriptor(
    name='DaExceptionForeignDrive',
    full_name='da.core.DaExceptionForeignDrive',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?(\022&\n\022DaExceptionDiskMgr\020\267\024\032\rForeign drive')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=23919,
    serialized_end=23989,
)


_DAEXCEPTIONUPDATEDRIVESTATE = _descriptor.Descriptor(
    name='DaExceptionUpdateDriveState',
    full_name='da.core.DaExceptionUpdateDriveState',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionDiskMgr\020\270\024\032\031Drive state update failed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=23991,
    serialized_end=24077,
)


_DAEXCEPTIONDRIVENOTSTOPPED = _descriptor.Descriptor(
    name='DaExceptionDriveNotStopped',
    full_name='da.core.DaExceptionDriveNotStopped',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\022DaExceptionDiskMgr\020\271\024\032\021Drive not stopped')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=24079,
    serialized_end=24156,
)


_DAEXCEPTIONDRIVEUNMOUNT = _descriptor.Descriptor(
    name='DaExceptionDriveUnmount',
    full_name='da.core.DaExceptionDriveUnmount',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionDiskMgr\020\272\024\032\024Drive unmount failed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=24158,
    serialized_end=24235,
)


_DAEXCEPTIONDRIVENOTFOUND = _descriptor.Descriptor(
    name='DaExceptionDriveNotFound',
    full_name='da.core.DaExceptionDriveNotFound',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\022DaExceptionDiskMgr\020\273\024\032\017Drive not found')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=24237,
    serialized_end=24310,
)


_DAEXCEPTIONINVALIDUSERNAME = _descriptor.Descriptor(
    name='DaExceptionInvalidUsername',
    full_name='da.core.DaExceptionInvalidUsername',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='username', full_name='da.core.DaExceptionInvalidUsername.username', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\022DaExceptionChecked\020\306\024\032#User name {username} does not exist(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=24312,
    serialized_end=24437,
)


_DAEXCEPTIONAUTHENTICATIONFAILURE = _descriptor.Descriptor(
    name='DaExceptionAuthenticationFailure',
    full_name='da.core.DaExceptionAuthenticationFailure',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\307\024\032\026Authentication failure')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=24439,
    serialized_end=24527,
)


_DAEXCEPTIONEMPTYPASSWORD = _descriptor.Descriptor(
    name='DaExceptionEmptyPassword',
    full_name='da.core.DaExceptionEmptyPassword',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\310\024\032\030Password cannot be empty')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=24529,
    serialized_end=24611,
)


_DAEXCEPTIONINVALIDENTRIESINPASSWORD = _descriptor.Descriptor(
    name='DaExceptionInvalidEntriesInPassword',
    full_name='da.core.DaExceptionInvalidEntriesInPassword',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='valerr', full_name='da.core.DaExceptionInvalidEntriesInPassword.valerr', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\022DaExceptionChecked\020\311\024\032)Some invalid entries in password {valerr}')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=24614,
    serialized_end=24748,
)


_DAEXCEPTIONCLUSTERMGR = _descriptor.Descriptor(
    name='DaExceptionClusterMgr',
    full_name='da.core.DaExceptionClusterMgr',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\032DaExceptionPlatformRunTime\020\320\024\032\025Cluster manager error')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=24750,
    serialized_end=24834,
)


_DAEXCEPTIONINCOMPATIBLEMODEL = _descriptor.Descriptor(
    name='DaExceptionIncompatibleModel',
    full_name='da.core.DaExceptionIncompatibleModel',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='model', full_name='da.core.DaExceptionIncompatibleModel.model', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\025DaExceptionClusterMgr\020\321\024\032\035Model {model} is incompatible')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=24836,
    serialized_end=24952,
)


_DAEXCEPTIONNODENOTSTEM = _descriptor.Descriptor(
    name='DaExceptionNodeNotStem',
    full_name='da.core.DaExceptionNodeNotStem',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?B\022@\n\025DaExceptionClusterMgr\020\322\024\032$This node is already in a DVX system')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=24954,
    serialized_end=25049,
)


_DAEXCEPTIONNODENOTMASTER = _descriptor.Descriptor(
    name='DaExceptionNodeNotMaster',
    full_name='da.core.DaExceptionNodeNotMaster',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?S\022Q\n\025DaExceptionClusterMgr\020\323\024\0325Node is not in expected state, please contact support')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=25051,
    serialized_end=25165,
)


_DAEXCEPTIONNODATAFLOATIP = _descriptor.Descriptor(
    name='DaExceptionNoDataFloatIp',
    full_name='da.core.DaExceptionNoDataFloatIp',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?T\022R\n\025DaExceptionClusterMgr\020\324\024\0326Data floating IP address is not configured on this DVX')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=25167,
    serialized_end=25282,
)


_DAEXCEPTIONNODEUNREACHABLE = _descriptor.Descriptor(
    name='DaExceptionNodeUnreachable',
    full_name='da.core.DaExceptionNodeUnreachable',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='node', full_name='da.core.DaExceptionNodeUnreachable.node', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\025DaExceptionClusterMgr\020\325\024\032\034Node {node} is not reachable')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=25284,
    serialized_end=25395,
)


_DAEXCEPTIONPLATFORMSYNCFILE = _descriptor.Descriptor(
    name='DaExceptionPlatformSyncFile',
    full_name='da.core.DaExceptionPlatformSyncFile',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\023DaExceptionPlatform\020\326\024\032!Platform sync file request failed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=25397,
    serialized_end=25492,
)


_DAEXCEPTIONPLATFORMDIAGPING = _descriptor.Descriptor(
    name='DaExceptionPlatformDiagPing',
    full_name='da.core.DaExceptionPlatformDiagPing',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?J\022H\n\023DaExceptionPlatform\020\327\024\032.Platform network diagostic ping request failed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=25494,
    serialized_end=25602,
)


_DAEXCEPTIONCONTROLLERNOTACTIVE = _descriptor.Descriptor(
    name='DaExceptionControllerNotActive',
    full_name='da.core.DaExceptionControllerNotActive',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\023DaExceptionPlatform\020\330\024\032!Current controller is not Active.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=25604,
    serialized_end=25702,
)


_DAEXCEPTIONNETWORKCONFIGEXISTS = _descriptor.Descriptor(
    name='DaExceptionNetworkConfigExists',
    full_name='da.core.DaExceptionNetworkConfigExists',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='conId', full_name='da.core.DaExceptionNetworkConfigExists.conId', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\023DaExceptionPlatform\020\331\024\032!Network config exists for {conId}')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=25704,
    serialized_end=25824,
)


_DAEXCEPTIONNOLINKONANYMGMTIFACES = _descriptor.Descriptor(
    name='DaExceptionNoLinkOnAnyMgmtIfaces',
    full_name='da.core.DaExceptionNoLinkOnAnyMgmtIfaces',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='mifaces', full_name='da.core.DaExceptionNoLinkOnAnyMgmtIfaces.mifaces', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?a\022_\n\023DaExceptionPlatform\020\332\024\032ENo link found on any the mgmt ifaces {mifaces}, please check cables. ')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=25827,
    serialized_end=25989,
)


_DAEXCEPTIONNODESLIMITREACHED = _descriptor.Descriptor(
    name='DaExceptionNodesLimitReached',
    full_name='da.core.DaExceptionNodesLimitReached',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='nodesLimit', full_name='da.core.DaExceptionNodesLimitReached.nodesLimit', index=0,
            number=1, type=13, cpp_type=3, label=2,
            has_default_value=False, default_value=0,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?d\022b\n\025DaExceptionClusterMgr\020\333\024\032FDVX is at the maximum ({nodesLimit}) number of supported nodes already')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=25992,
    serialized_end=26159,
)


_DAEXCEPTIONNODEEXISTSINCLUSTER = _descriptor.Descriptor(
    name='DaExceptionNodeExistsInCluster',
    full_name='da.core.DaExceptionNodeExistsInCluster',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='serial', full_name='da.core.DaExceptionNodeExistsInCluster.serial', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?^\022\\\n\025DaExceptionClusterMgr\020\334\024\032@The node with serial number {serial} is already part of this DVX')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=26162,
    serialized_end=26317,
)


_DAEXCEPTIONNODEMAYBEUNREACHABLE = _descriptor.Descriptor(
    name='DaExceptionNodeMayBeUnreachable',
    full_name='da.core.DaExceptionNodeMayBeUnreachable',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='node', full_name='da.core.DaExceptionNodeMayBeUnreachable.node', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\\\022Z\n\025DaExceptionClusterMgr\020\335\024\032>Node {node} is not reachable OR may be already part of the DVX')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=26320,
    serialized_end=26470,
)


_DAEXCEPTIONLEASEUPGRADEFORREPACKFAILED = _descriptor.Descriptor(
    name='DaExceptionLeaseUpgradeForRepackFailed',
    full_name='da.core.DaExceptionLeaseUpgradeForRepackFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?Z\022X\n\022DaExceptionChecked\020\214\025\032?Lease upgrade for repack failed, since other readers are active')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=26473,
    serialized_end=26608,
)


_DAEXCEPTIONSERVICEUNAVAILABLE = _descriptor.Descriptor(
    name='DaExceptionServiceUnavailable',
    full_name='da.core.DaExceptionServiceUnavailable',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='serviceName', full_name='da.core.DaExceptionServiceUnavailable.serviceName', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\024DaExceptionUnchecked\020\360\025\032$Service {serviceName} is unavailable0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=26611,
    serialized_end=26748,
)


_DAEXCEPTIONSERVICEUNRESPONSIVE = _descriptor.Descriptor(
    name='DaExceptionServiceUnresponsive',
    full_name='da.core.DaExceptionServiceUnresponsive',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='serviceName', full_name='da.core.DaExceptionServiceUnresponsive.serviceName', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\024DaExceptionUnchecked\020\361\025\032%Service {serviceName} is unresponsive0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=26751,
    serialized_end=26890,
)


_DAEXCEPTIONVCENTERREGISTRATIONFAILED = _descriptor.Descriptor(
    name='DaExceptionvCenterRegistrationFailed',
    full_name='da.core.DaExceptionvCenterRegistrationFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='error', full_name='da.core.DaExceptionvCenterRegistrationFailed.error', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='user', full_name='da.core.DaExceptionvCenterRegistrationFailed.user', index=1,
            number=2, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?u\022s\n\024DaExceptionUnchecked\020\362\025\032VvCenter registration failed for the user: \'{user}\' with the following error: \'{error}\'(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=26893,
    serialized_end=27095,
)


_DAEXCEPTIONVCENTERUNREGISTRATIONFAILED = _descriptor.Descriptor(
    name='DaExceptionvCenterUnregistrationFailed',
    full_name='da.core.DaExceptionvCenterUnregistrationFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='error', full_name='da.core.DaExceptionvCenterUnregistrationFailed.error', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\211\002\022\206\002\n\024DaExceptionUnchecked\020\363\025\032\350\001vCenter unregister operation failed: \'{error}\'.\nIf the vCenter server is permanently unavailable or if this DVX is already unregistered from the vCenter server, use --force option to remove the registration information from the DVX.(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=27098,
    serialized_end=27432,
)


_DAEXCEPTIONVCENTERREGISTRATIONEXISTS = _descriptor.Descriptor(
    name='DaExceptionvCenterRegistrationExists',
    full_name='da.core.DaExceptionvCenterRegistrationExists',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='vCenter', full_name='da.core.DaExceptionvCenterRegistrationExists.vCenter', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\210\001\022\205\001\n\030DaExceptionAlreadyExists\020\364\025\032fvCenter {vCenter} is currently registered. Run \'config vcenter unregister {vCenter}\' to unregister it.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=27435,
    serialized_end=27642,
)


_DAEXCEPTIONVCENTERUNKNOWN = _descriptor.Descriptor(
    name='DaExceptionvCenterUnknown',
    full_name='da.core.DaExceptionvCenterUnknown',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='vCenter', full_name='da.core.DaExceptionvCenterUnknown.vCenter', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?I\022G\n\024DaExceptionUnchecked\020\365\025\032,vCenter \'{vCenter}\' is not known to this DVX')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=27645,
    serialized_end=27776,
)


_DAEXCEPTIONSUPPORTNOTFOUND = _descriptor.Descriptor(
    name='DaExceptionSupportNotFound',
    full_name='da.core.DaExceptionSupportNotFound',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='supportId', full_name='da.core.DaExceptionSupportNotFound.supportId', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\271\001\022\266\001\n\024DaExceptionUnchecked\020\366\025\032\232\001Support ID {supportId} was not found on the server. Either the support has completed or never existed.\nPlease run \'support submit\' to submit a new support')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=27779,
    serialized_end=28029,
)


_DAEXCEPTIONNOTAUTHENTICATED = _descriptor.Descriptor(
    name='DaExceptionNotAuthenticated',
    full_name='da.core.DaExceptionNotAuthenticated',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?7\0225\n\024DaExceptionUnchecked\020\367\025\032\030Client not authenticated0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=28031,
    serialized_end=28120,
)


_DAEXCEPTIONMAILSERVERCONFIGURATIONFAILED = _descriptor.Descriptor(
    name='DaExceptionMailserverConfigurationFailed',
    full_name='da.core.DaExceptionMailserverConfigurationFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='error', full_name='da.core.DaExceptionMailserverConfigurationFailed.error', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?T\022R\n\024DaExceptionUnchecked\020\370\025\0327Mailserver configuration test failed with error {error}')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=28123,
    serialized_end=28276,
)


_DAEXCEPTIONHOSTINUSE = _descriptor.Descriptor(
    name='DaExceptionHostInUse',
    full_name='da.core.DaExceptionHostInUse',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\204\001\022\201\001\n\024DaExceptionUnchecked\020\371\025\032fCannot remove the host. It is currently using the DVX. Make sure it is safe to remove and use --force.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=28279,
    serialized_end=28440,
)


_DAEXCEPTIONHOSTUNKNOWN = _descriptor.Descriptor(
    name='DaExceptionHostUnknown',
    full_name='da.core.DaExceptionHostUnknown',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='host', full_name='da.core.DaExceptionHostUnknown.host', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\024DaExceptionUnchecked\020\372\025\032\036Error - Unknown host \'{host}\'.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=28442,
    serialized_end=28550,
)


_DAEXCEPTIONINVALIDEVENTFILTERCOMBINATION = _descriptor.Descriptor(
    name='DaExceptionInvalidEventFilterCombination',
    full_name='da.core.DaExceptionInvalidEventFilterCombination',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='host', full_name='da.core.DaExceptionInvalidEventFilterCombination.host', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\214\001\022\211\001\n\024DaExceptionUnchecked\020\373\025\032nThe specified filter combination is invalid. Specify only one of --severity, --event-type or --component-name.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=28553,
    serialized_end=28762,
)


_DAEXCEPTIONNOVCENTER = _descriptor.Descriptor(
    name='DaExceptionNovCenter',
    full_name='da.core.DaExceptionNovCenter',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\024DaExceptionUnchecked\020\374\025\032&DVX is not registered with any vCenter')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=28764,
    serialized_end=28858,
)


_DAEXCEPTIONVCENTERERROR = _descriptor.Descriptor(
    name='DaExceptionvCenterError',
    full_name='da.core.DaExceptionvCenterError',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='vCenterError', full_name='da.core.DaExceptionvCenterError.vCenterError', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\024DaExceptionUnchecked\020\375\025\032\037vCenter responded with an error')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=28860,
    serialized_end=28986,
)


_DAEXCEPTIONATLEASTONEARGREQUIRED = _descriptor.Descriptor(
    name='DaExceptionAtLeastOneArgRequired',
    full_name='da.core.DaExceptionAtLeastOneArgRequired',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='argument', full_name='da.core.DaExceptionAtLeastOneArgRequired.argument', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\024DaExceptionUnchecked\020\376\025\032$Specify at least one of \'{argument}\'0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=28989,
    serialized_end=29123,
)


_DAEXCEPTIONMUTUALLYEXCLUSIVEARGS = _descriptor.Descriptor(
    name='DaExceptionMutuallyExclusiveArgs',
    full_name='da.core.DaExceptionMutuallyExclusiveArgs',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='argument', full_name='da.core.DaExceptionMutuallyExclusiveArgs.argument', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?H\022F\n\024DaExceptionUnchecked\020\377\025\032)Only one of \'{argument}\' can be specified0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=29126,
    serialized_end=29265,
)


_DAEXCEPTIONEXACTLYONEARGREQUIRED = _descriptor.Descriptor(
    name='DaExceptionExactlyOneArgRequired',
    full_name='da.core.DaExceptionExactlyOneArgRequired',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='argument', full_name='da.core.DaExceptionExactlyOneArgRequired.argument', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\024DaExceptionUnchecked\020\200\026\032\031Specify one of {argument}0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=29267,
    serialized_end=29390,
)


_DAEXCEPTIONSUPPORTNOTRUNNING = _descriptor.Descriptor(
    name='DaExceptionSupportNotRunning',
    full_name='da.core.DaExceptionSupportNotRunning',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\222\001\022\217\001\n\024DaExceptionUnchecked\020\201\026\032tThere is no currently running or recent \'support submit\' task.  Run \'support submit\' to submit a new support bundle.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=29393,
    serialized_end=29576,
)


_DAEXCEPTIONINVALIDCRONEXPRESSION = _descriptor.Descriptor(
    name='DaExceptionInvalidCronExpression',
    full_name='da.core.DaExceptionInvalidCronExpression',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='expression', full_name='da.core.DaExceptionInvalidCronExpression.expression', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?E\022C\n\024DaExceptionUnchecked\020\202\026\032&Invalid cron expression \"{expression}\"(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=29579,
    serialized_end=29719,
)


_DAEXCEPTIONINVALIDIPSUBNETMASK = _descriptor.Descriptor(
    name='DaExceptionInvalidIPSubnetMask',
    full_name='da.core.DaExceptionInvalidIPSubnetMask',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='ip1', full_name='da.core.DaExceptionInvalidIPSubnetMask.ip1', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='ip2', full_name='da.core.DaExceptionInvalidIPSubnetMask.ip2', index=1,
            number=2, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='netmask', full_name='da.core.DaExceptionInvalidIPSubnetMask.netmask', index=2,
            number=3, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?}\022{\n\024DaExceptionUnchecked\020\203\026\032`{ip2} is in a different subnet than the floating IP address {ip1}. The subnet mask is {netmask}.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=29722,
    serialized_end=29947,
)


_DAEXCEPTIONDROPTOSHELL = _descriptor.Descriptor(
    name='DaExceptionDropToShell',
    full_name='da.core.DaExceptionDropToShell',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?7\0225\n\024DaExceptionUnchecked\020\204\026\032\032Enabling root login failed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=29949,
    serialized_end=30033,
)


_DAEXCEPTIONALLARGSREQUIRED = _descriptor.Descriptor(
    name='DaExceptionAllArgsRequired',
    full_name='da.core.DaExceptionAllArgsRequired',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='argument', full_name='da.core.DaExceptionAllArgsRequired.argument', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\\\022Z\n\024DaExceptionUnchecked\020\205\026\032?If you specify one of {argument}, you must specify all of them.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=30036,
    serialized_end=30189,
)


_DAEXCEPTIONDUPLICATEIP = _descriptor.Descriptor(
    name='DaExceptionDuplicateIP',
    full_name='da.core.DaExceptionDuplicateIP',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='ip', full_name='da.core.DaExceptionDuplicateIP.ip', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='port1', full_name='da.core.DaExceptionDuplicateIP.port1', index=1,
            number=2, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='port2', full_name='da.core.DaExceptionDuplicateIP.port2', index=2,
            number=3, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?z\022x\n\024DaExceptionUnchecked\020\206\026\032]IP {ip} provided in network configuration for {port1} is already used for {port2} in this DVX')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=30192,
    serialized_end=30403,
)


_DAEXCEPTIONCLIOPERATIONABORTED = _descriptor.Descriptor(
    name='DaExceptionCliOperationAborted',
    full_name='da.core.DaExceptionCliOperationAborted',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\024DaExceptionUnchecked\020\207\026\032\037This operation has been aborted')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=30405,
    serialized_end=30502,
)


_DAEXCEPTIONREGISTRATIONFAILURE = _descriptor.Descriptor(
    name='DaExceptionRegistrationFailure',
    full_name='da.core.DaExceptionRegistrationFailure',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?>\022<\n\024DaExceptionUnchecked\020\210\026\032!Failed to register the extension.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=30504,
    serialized_end=30603,
)


_DAEXCEPTIONVCENTERCONNECTIONFAILURE = _descriptor.Descriptor(
    name='DaExceptionvCenterConnectionFailure',
    full_name='da.core.DaExceptionvCenterConnectionFailure',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?E\022C\n\024DaExceptionUnchecked\020\211\026\032(Failed to connect to the vCenter server.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=30605,
    serialized_end=30716,
)


_DAEXCEPTIONVCENTERCONNECTIONMALFORMEDURL = _descriptor.Descriptor(
    name='DaExceptionvCenterConnectionMalformedUrl',
    full_name='da.core.DaExceptionvCenterConnectionMalformedUrl',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='url', full_name='da.core.DaExceptionvCenterConnectionMalformedUrl.url', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n#DaExceptionvCenterConnectionFailure\020\212\026\032\037Malformed vim SDK URL argument.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=30719,
    serialized_end=30859,
)


_DAEXCEPTIONVCENTERLOGINFAILURE = _descriptor.Descriptor(
    name='DaExceptionvCenterLoginFailure',
    full_name='da.core.DaExceptionvCenterLoginFailure',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?V\022T\n#DaExceptionvCenterConnectionFailure\020\213\026\032*Failed to perform login to vCenter server.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=30861,
    serialized_end=30984,
)


_DAEXCEPTIONVCENTERLOGOUTFAILURE = _descriptor.Descriptor(
    name='DaExceptionvCenterLogoutFailure',
    full_name='da.core.DaExceptionvCenterLogoutFailure',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?Y\022W\n#DaExceptionvCenterConnectionFailure\020\214\026\032-Failed to perform logout from vCenter server.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=30986,
    serialized_end=31113,
)


_DAEXCEPTIONVCENTERSSLINITIALIZATION = _descriptor.Descriptor(
    name='DaExceptionvCenterSSLInitialization',
    full_name='da.core.DaExceptionvCenterSSLInitialization',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?Z\022X\n#DaExceptionvCenterConnectionFailure\020\215\026\032.Error doing SSL handshake with vCenter server.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=31116,
    serialized_end=31248,
)


_DAEXCEPTIONQUALIFYINGARGUMENTNOTFOUND = _descriptor.Descriptor(
    name='DaExceptionQualifyingArgumentNotFound',
    full_name='da.core.DaExceptionQualifyingArgumentNotFound',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='argument1', full_name='da.core.DaExceptionQualifyingArgumentNotFound.argument1', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='argument2', full_name='da.core.DaExceptionQualifyingArgumentNotFound.argument2', index=1,
            number=2, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?W\022U\n\024DaExceptionUnchecked\020\216\026\0328If you specify {argument1}, you must specify {argument2}0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=31251,
    serialized_end=31442,
)


_DAEXCEPTIONCLOUDVIEWREGISTRATIONFAILURE = _descriptor.Descriptor(
    name='DaExceptionCloudViewRegistrationFailure',
    full_name='da.core.DaExceptionCloudViewRegistrationFailure',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\024DaExceptionUnchecked\020\217\026\032&Failed to register DVX with cloudview.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=31444,
    serialized_end=31557,
)


_DAEXCEPTIONCLUMPSTORECANCELWRITERRECOVERY = _descriptor.Descriptor(
    name='DaExceptionClumpstoreCancelWriterRecovery',
    full_name='da.core.DaExceptionClumpstoreCancelWriterRecovery',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?>\022<\n\022DaExceptionChecked\020\324\026\032#Cancel a ClumpStore writer recovery')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=31559,
    serialized_end=31669,
)


_DAEXCEPTIONCLUMPSTORENOTENABLED = _descriptor.Descriptor(
    name='DaExceptionClumpstoreNotEnabled',
    full_name='da.core.DaExceptionClumpstoreNotEnabled',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionChecked\020\325\026\032\031ClumpStore is not enabled')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=31671,
    serialized_end=31761,
)


_DAEXCEPTIONDAGGERSUBMISSIONSDISABLED = _descriptor.Descriptor(
    name='DaExceptionDaggerSubmissionsDisabled',
    full_name='da.core.DaExceptionDaggerSubmissionsDisabled',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?>\022<\n\022DaExceptionChecked\020\270\027\032#Dagger job submissions are disabled')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=31763,
    serialized_end=31868,
)


_DAEXCEPTIONDAGGERJOBCANCELED = _descriptor.Descriptor(
    name='DaExceptionDaggerJobCanceled',
    full_name='da.core.DaExceptionDaggerJobCanceled',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\024DaExceptionLocalOnly\020\271\027\032\026Dagger job is canceled')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=31870,
    serialized_end=31956,
)


_DAEXCEPTIONDAGGERQUEUEFULL = _descriptor.Descriptor(
    name='DaExceptionDaggerQueueFull',
    full_name='da.core.DaExceptionDaggerQueueFull',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?H\022F\n\022DaExceptionChecked\020\272\027\032-Exceeded the number of concurrent Dagger jobs')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=31958,
    serialized_end=32063,
)


_DAEXCEPTIONDAGGERJOBRUNNING = _descriptor.Descriptor(
    name='DaExceptionDaggerJobRunning',
    full_name='da.core.DaExceptionDaggerJobRunning',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\022DaExceptionChecked\020\273\027\032\037Attempt to retire a running job')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=32065,
    serialized_end=32157,
)


_DAEXCEPTIONAUTOSUPPORTDOWNLOADFAILED = _descriptor.Descriptor(
    name='DaExceptionAutoSupportDownloadFailed',
    full_name='da.core.DaExceptionAutoSupportDownloadFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='reason', full_name='da.core.DaExceptionAutoSupportDownloadFailed.reason', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?M\022K\n\024DaExceptionUnchecked\020\234\030\032.Support bundle download failed due to {reason}(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=32160,
    serialized_end=32304,
)


_DAEXCEPTIONAUTOSUPPORTBUNDLEUPLOADFAILED = _descriptor.Descriptor(
    name='DaExceptionAutoSupportBundleUploadFailed',
    full_name='da.core.DaExceptionAutoSupportBundleUploadFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='reason', full_name='da.core.DaExceptionAutoSupportBundleUploadFailed.reason', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n\024DaExceptionUnchecked\020\235\030\032,Support bundle upload failed due to {reason}(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=32307,
    serialized_end=32453,
)


_DAEXCEPTIONAUTOSUPPORTSERVERCONNECTIONFAILED = _descriptor.Descriptor(
    name='DaExceptionAutoSupportServerConnectionFailed',
    full_name='da.core.DaExceptionAutoSupportServerConnectionFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='reason', full_name='da.core.DaExceptionAutoSupportServerConnectionFailed.reason', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?W\022U\n\024DaExceptionUnchecked\020\236\030\0328HTTP connection to support server failed due to {reason}(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=32456,
    serialized_end=32618,
)


_DAEXCEPTIONTRIGGERSUPPORTFAILED = _descriptor.Descriptor(
    name='DaExceptionTriggerSupportFailed',
    full_name='da.core.DaExceptionTriggerSupportFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='reason', full_name='da.core.DaExceptionTriggerSupportFailed.reason', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\022DaExceptionChecked\020\237\030\032&Trigger support failed due to {reason}(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=32621,
    serialized_end=32750,
)


_DAEXCEPTIONDEBUGSUPPORTALREADYINPROGRESS = _descriptor.Descriptor(
    name='DaExceptionDebugSupportAlreadyInProgress',
    full_name='da.core.DaExceptionDebugSupportAlreadyInProgress',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='supportId', full_name='da.core.DaExceptionDebugSupportAlreadyInProgress.supportId', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?Q\022O\n\024DaExceptionUnchecked\020\240\030\0322A debug support {supportId} is already in progress(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=32753,
    serialized_end=32911,
)


_DAEXCEPTIONDEBUGSUPPORTBUNDLECOLLECTIONFAILED = _descriptor.Descriptor(
    name='DaExceptionDebugSupportBundleCollectionFailed',
    full_name='da.core.DaExceptionDebugSupportBundleCollectionFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='reason', full_name='da.core.DaExceptionDebugSupportBundleCollectionFailed.reason', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?S\022Q\n\022DaExceptionChecked\020\241\030\0326Debug support bundle collection failed due to {reason}(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=32914,
    serialized_end=33073,
)


_DAEXCEPTIONAUTOSUPPORTDISABLED = _descriptor.Descriptor(
    name='DaExceptionAutoSupportDisabled',
    full_name='da.core.DaExceptionAutoSupportDisabled',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\024DaExceptionUnchecked\020\242\030\032&Autosupport is disabled on this system')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=33075,
    serialized_end=33179,
)


_DAEXCEPTIONMONITORINGINTERRUPTED = _descriptor.Descriptor(
    name='DaExceptionMonitoringInterrupted',
    full_name='da.core.DaExceptionMonitoringInterrupted',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\024DaExceptionUnchecked\020\243\030\032\031Monitoring is interrupted')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=33181,
    serialized_end=33274,
)


_DAEXCEPTIONSRDISABLED = _descriptor.Descriptor(
    name='DaExceptionSRDisabled',
    full_name='da.core.DaExceptionSRDisabled',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='datastoreIdStr', full_name='da.core.DaExceptionSRDisabled.datastoreIdStr', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\022DaExceptionChecked\020\200\031\032\016SR is disabled(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=33276,
    serialized_end=33387,
)


_DAEXCEPTIONSRINPROGRESS = _descriptor.Descriptor(
    name='DaExceptionSRInProgress',
    full_name='da.core.DaExceptionSRInProgress',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='datastoreIdStr', full_name='da.core.DaExceptionSRInProgress.datastoreIdStr', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\022DaExceptionChecked\020\201\031\032\rSR is running(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=33389,
    serialized_end=33501,
)


_DAEXCEPTIONREPACKDISABLED = _descriptor.Descriptor(
    name='DaExceptionRepackDisabled',
    full_name='da.core.DaExceptionRepackDisabled',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\022DaExceptionChecked\020\344\031\032\025RepackSvc is disabled')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=33503,
    serialized_end=33583,
)


_DAEXCEPTIONREPACKJOBFAILED = _descriptor.Descriptor(
    name='DaExceptionRepackJobFailed',
    full_name='da.core.DaExceptionRepackJobFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\022DaExceptionChecked\020\345\031\032\035RepackSvc\'s dagger job failed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=33585,
    serialized_end=33674,
)


_DAEXCEPTIONMAXREPACKJOBSLIMITREACHED = _descriptor.Descriptor(
    name='DaExceptionMaxRepackJobsLimitReached',
    full_name='da.core.DaExceptionMaxRepackJobsLimitReached',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\022DaExceptionChecked\020\346\031\032&RepackSvc\'s max jobs limit is reached.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=33676,
    serialized_end=33784,
)


_DAEXCEPTIONONCRPCGARBAGECALLHDR = _descriptor.Descriptor(
    name='DaExceptionOncRpcGarbageCallhdr',
    full_name='da.core.DaExceptionOncRpcGarbageCallhdr',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\024DaExceptionUnchecked\020\254\033\032\022Callhdr is garbage')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=33786,
    serialized_end=33871,
)


_DAEXCEPTIONONCRPCGARBAGEARGS = _descriptor.Descriptor(
    name='DaExceptionOncRpcGarbageArgs',
    full_name='da.core.DaExceptionOncRpcGarbageArgs',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\024DaExceptionUnchecked\020\255\033\032\034Input argruments are garbage')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=33873,
    serialized_end=33965,
)


_DAEXCEPTIONONCRPCPROGUNAVAIL = _descriptor.Descriptor(
    name='DaExceptionOncRpcProgUnavail',
    full_name='da.core.DaExceptionOncRpcProgUnavail',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\024DaExceptionUnchecked\020\256\033\032\030Program is not available')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=33967,
    serialized_end=34055,
)


_DAEXCEPTIONONCRPCPROGMISMATCH = _descriptor.Descriptor(
    name='DaExceptionOncRpcProgMismatch',
    full_name='da.core.DaExceptionOncRpcProgMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\024DaExceptionUnchecked\020\257\033\032 Program version is not available')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=34057,
    serialized_end=34154,
)


_DAEXCEPTIONONCRPCPROCUNAVAIL = _descriptor.Descriptor(
    name='DaExceptionOncRpcProcUnavail',
    full_name='da.core.DaExceptionOncRpcProcUnavail',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?7\0225\n\024DaExceptionUnchecked\020\260\033\032\032Procedure is not available')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=34156,
    serialized_end=34246,
)


_DAEXCEPTIONONCRPCGARBAGERESPHDR = _descriptor.Descriptor(
    name='DaExceptionOncRpcGarbageResphdr',
    full_name='da.core.DaExceptionOncRpcGarbageResphdr',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\024DaExceptionUnchecked\020\261\033\032\022Resphdr is garbage')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=34248,
    serialized_end=34333,
)


_DAEXCEPTIONONCRPCCALLREJECTED = _descriptor.Descriptor(
    name='DaExceptionOncRpcCallRejected',
    full_name='da.core.DaExceptionOncRpcCallRejected',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\024DaExceptionUnchecked\020\262\033\032\037Call was rejected by the server')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=34335,
    serialized_end=34431,
)


_DAEXCEPTIONONCRPCSYSTEMERR = _descriptor.Descriptor(
    name='DaExceptionOncRpcSystemErr',
    full_name='da.core.DaExceptionOncRpcSystemErr',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?)\022\'\n\024DaExceptionUnchecked\020\263\033\032\014System error')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=34433,
    serialized_end=34507,
)


_DAEXCEPTIONPYEXC = _descriptor.Descriptor(
    name='DaExceptionPyExc',
    full_name='da.core.DaExceptionPyExc',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?G\022E\n\024DaExceptionLocalOnly\020\220\034\032*A Python function set the error indicator.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=34509,
    serialized_end=34603,
)


_DAEXCEPTIONSGIO = _descriptor.Descriptor(
    name='DaExceptionSgIo',
    full_name='da.core.DaExceptionSgIo',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='maskedStatus', full_name='da.core.DaExceptionSgIo.maskedStatus', index=0,
            number=1, type=13, cpp_type=3, label=2,
            has_default_value=False, default_value=0,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='driverStatus', full_name='da.core.DaExceptionSgIo.driverStatus', index=1,
            number=2, type=13, cpp_type=3, label=2,
            has_default_value=False, default_value=0,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='hostStatus', full_name='da.core.DaExceptionSgIo.hostStatus', index=2,
            number=3, type=13, cpp_type=3, label=2,
            has_default_value=False, default_value=0,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='sense', full_name='da.core.DaExceptionSgIo.sense', index=3,
            number=4, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?(\022&\n\rDaExceptionIo\020\364\034\032\022SgIo returns error')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=34606,
    serialized_end=34794,
)


_DAEXCEPTIONSCSIDEVICEDISCONNECTED = _descriptor.Descriptor(
    name='DaExceptionScsiDeviceDisconnected',
    full_name='da.core.DaExceptionScsiDeviceDisconnected',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\017DaExceptionSgIo\020\365\034\032 SgIo returns Device disconnected')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=34796,
    serialized_end=34892,
)


_DAEXCEPTIONUNKNOWNSGIO = _descriptor.Descriptor(
    name='DaExceptionUnknownSgIo',
    full_name='da.core.DaExceptionUnknownSgIo',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\017DaExceptionSgIo\020\366\034\032\032SgIo returns unknown error')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=34894,
    serialized_end=34973,
)


_DAEXCEPTIONSCSIRESVCONFLICT = _descriptor.Descriptor(
    name='DaExceptionScsiResvConflict',
    full_name='da.core.DaExceptionScsiResvConflict',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\017DaExceptionSgIo\020\367\034\032!SgIo returns reservation conflict')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=34975,
    serialized_end=35066,
)


_DAEXCEPTIONVMDOESNOTEXIST = _descriptor.Descriptor(
    name='DaExceptionVmDoesNotExist',
    full_name='da.core.DaExceptionVmDoesNotExist',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?-\022+\n\022DaExceptionChecked\020\330\035\032\022VM does not exist.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=35068,
    serialized_end=35145,
)


_DAEXCEPTIONVMPARSINGFAILURE = _descriptor.Descriptor(
    name='DaExceptionVmParsingFailure',
    full_name='da.core.DaExceptionVmParsingFailure',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\022DaExceptionChecked\020\331\035\032)Failure in parsing VM configuration file.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=35147,
    serialized_end=35249,
)


_DAEXCEPTIONVMPARSINGNOKV = _descriptor.Descriptor(
    name='DaExceptionVmParsingNoKv',
    full_name='da.core.DaExceptionVmParsingNoKv',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\332\035\032 Line does not contain key-value.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=35251,
    serialized_end=35341,
)


_DAEXCEPTIONVMPARSINGBUFFERTOOSMALL = _descriptor.Descriptor(
    name='DaExceptionVmParsingBufferTooSmall',
    full_name='da.core.DaExceptionVmParsingBufferTooSmall',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\022DaExceptionChecked\020\333\035\032\035Provided buffer is too small.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=35343,
    serialized_end=35440,
)


_DAEXCEPTIONVMFILEHASOWNER = _descriptor.Descriptor(
    name='DaExceptionVmFileHasOwner',
    full_name='da.core.DaExceptionVmFileHasOwner',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\022DaExceptionChecked\020\334\035\032\036File is already owned by a VM.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=35442,
    serialized_end=35531,
)


_DAEXCEPTIONTOOMANYTOTALVMS = _descriptor.Descriptor(
    name='DaExceptionTooManyTotalVms',
    full_name='da.core.DaExceptionTooManyTotalVms',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?H\022F\n\024DaExceptionUnchecked\020\335\035\032+There are too many total VMs in the system.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=35533,
    serialized_end=35638,
)


_DAEXCEPTIONBADDISKFILE = _descriptor.Descriptor(
    name='DaExceptionBadDiskFile',
    full_name='da.core.DaExceptionBadDiskFile',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?R\022P\n\022DaExceptionChecked\020\336\035\0327Virtual disk file(s) have unexpected content/structure.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=35640,
    serialized_end=35751,
)


_DAEXCEPTIONUNSUPPORTEDVIRTUALDISKFILEFORMAT = _descriptor.Descriptor(
    name='DaExceptionUnsupportedVirtualDiskFileFormat',
    full_name='da.core.DaExceptionUnsupportedVirtualDiskFileFormat',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?I\022G\n\022DaExceptionChecked\020\337\035\032.The virtual disk file format is not supported.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=35753,
    serialized_end=35876,
)


_DAEXCEPTIONCONTROLLERNOTSYNCED = _descriptor.Descriptor(
    name='DaExceptionControllerNotSynced',
    full_name='da.core.DaExceptionControllerNotSynced',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\274\036\032\030Controller is not synced')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=35878,
    serialized_end=35966,
)


_DAEXCEPTIONFAILOVERINPROGRESS = _descriptor.Descriptor(
    name='DaExceptionFailoverInProgress',
    full_name='da.core.DaExceptionFailoverInProgress',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\022DaExceptionChecked\020\275\036\032\037Failover is already in progress')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=35968,
    serialized_end=36062,
)


_DAEXCEPTIONUPGRADEINPROGRESS = _descriptor.Descriptor(
    name='DaExceptionUpgradeInProgress',
    full_name='da.core.DaExceptionUpgradeInProgress',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\276\036\032\026Upgrade is in progress')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=36064,
    serialized_end=36148,
)


_DAEXCEPTIONPEERCONTROLLERBADNETWORKCONNECTIVITY = _descriptor.Descriptor(
    name='DaExceptionPeerControllerBadNetworkConnectivity',
    full_name='da.core.DaExceptionPeerControllerBadNetworkConnectivity',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?G\022E\n\022DaExceptionChecked\020\277\036\032,Peer controller has bad network connectivity')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=36150,
    serialized_end=36275,
)


_DAEXCEPTIONNETWORKSETUPALREADYINPROGRESS = _descriptor.Descriptor(
    name='DaExceptionNetworkSetupAlreadyInProgress',
    full_name='da.core.DaExceptionNetworkSetupAlreadyInProgress',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='uuid', full_name='da.core.DaExceptionNetworkSetupAlreadyInProgress.uuid', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\024DaExceptionUnchecked\020\204 \032&A network setup is already in progress')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=36278,
    serialized_end=36412,
)


_DAEXCEPTIONNONETWORKSETUPTOCOMMIT = _descriptor.Descriptor(
    name='DaExceptionNoNetworkSetupToCommit',
    full_name='da.core.DaExceptionNoNetworkSetupToCommit',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\024DaExceptionUnchecked\020\205 \032#There is no network setup to commit')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=36414,
    serialized_end=36518,
)


_DAEXCEPTIONNETWORKSETUPFAILED = _descriptor.Descriptor(
    name='DaExceptionNetworkSetupFailed',
    full_name='da.core.DaExceptionNetworkSetupFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='reason', full_name='da.core.DaExceptionNetworkSetupFailed.reason', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\024DaExceptionUnchecked\020\206 \032$Network setup failed due to {reason}(\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=36520,
    serialized_end=36647,
)


_DAEXCEPTIONNETWORKSETUPREQUIRESCOMMIT = _descriptor.Descriptor(
    name='DaExceptionNetworkSetupRequiresCommit',
    full_name='da.core.DaExceptionNetworkSetupRequiresCommit',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='uuid', full_name='da.core.DaExceptionNetworkSetupRequiresCommit.uuid', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?M\022K\n\024DaExceptionUnchecked\020\207 \0320There is a pending network setup to be committed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=36650,
    serialized_end=36791,
)


_DAEXCEPTIONNVRAMCHECKSUMMISMATCH = _descriptor.Descriptor(
    name='DaExceptionNvramChecksumMismatch',
    full_name='da.core.DaExceptionNvramChecksumMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\024DaExceptionLocalOnly\020\350 \032#There is checksum mismatch in NVRam')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=36793,
    serialized_end=36896,
)


_DAEXCEPTIONCONFENTRYISINVALID = _descriptor.Descriptor(
    name='DaExceptionConfEntryIsInvalid',
    full_name='da.core.DaExceptionConfEntryIsInvalid',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?c\022a\n\024DaExceptionLocalOnly\020\314!\032FThis conf entry does not exist. Please check moduleName and optionName')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=36899,
    serialized_end=37034,
)


_DAEXCEPTIONCONFENTRYISLOCKED = _descriptor.Descriptor(
    name='DaExceptionConfEntryIsLocked',
    full_name='da.core.DaExceptionConfEntryIsLocked',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?O\022M\n\024DaExceptionLocalOnly\020\315!\0322This conf entry is locked and can not be modified.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=37036,
    serialized_end=37150,
)


_DAEXCEPTIONCONFENTRYOUTSIDERANGE = _descriptor.Descriptor(
    name='DaExceptionConfEntryOutsideRange',
    full_name='da.core.DaExceptionConfEntryOutsideRange',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\024DaExceptionLocalOnly\020\316!\032\'The conf value is outside of the range.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=37152,
    serialized_end=37259,
)


_DAEXCEPTIONCONFMODULECOOKIEALREADYEXISTS = _descriptor.Descriptor(
    name='DaExceptionConfModuleCookieAlreadyExists',
    full_name='da.core.DaExceptionConfModuleCookieAlreadyExists',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?N\022L\n\024DaExceptionLocalOnly\020\317!\0321The module cookie for this entity already exists.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=37261,
    serialized_end=37386,
)


_DAEXCEPTIONCONFIGVERSIONMISMATCH = _descriptor.Descriptor(
    name='DaExceptionConfigVersionMismatch',
    full_name='da.core.DaExceptionConfigVersionMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\024DaExceptionUnchecked\020\210\'\032\033Version numbers don\'t match')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=37388,
    serialized_end=37483,
)


_DAEXCEPTIONREMOTEDATARETRIEVALVERSIONUNSUPPORTED = _descriptor.Descriptor(
    name='DaExceptionRemoteDataRetrievalVersionUnsupported',
    full_name='da.core.DaExceptionRemoteDataRetrievalVersionUnsupported',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='version', full_name='da.core.DaExceptionRemoteDataRetrievalVersionUnsupported.version', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?q\022o\n\024DaExceptionUnchecked\020\211\'\032TCan only retrieve data from destination DVX systems with version {version} or higher')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=37486,
    serialized_end=37680,
)


_DAEXCEPTIONREMOTEOPERATIONVERSIONUNSUPPORTED = _descriptor.Descriptor(
    name='DaExceptionRemoteOperationVersionUnsupported',
    full_name='da.core.DaExceptionRemoteOperationVersionUnsupported',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='version', full_name='da.core.DaExceptionRemoteOperationVersionUnsupported.version', index=0,
            number=1, type=9, cpp_type=9, label=2,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?z\022x\n\024DaExceptionUnchecked\020\212\'\032]Can only invoke remote operations on destination DVX systems with version {version} or higher')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=37683,
    serialized_end=37882,
)


_DAEXCEPTIONEONRUNNING = _descriptor.Descriptor(
    name='DaExceptionEonRunning',
    full_name='da.core.DaExceptionEonRunning',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\022DaExceptionChecked\020\354\'\032\025Eon is still running.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=37884,
    serialized_end=37960,
)


_DAEXCEPTIONEONNOTFOUND = _descriptor.Descriptor(
    name='DaExceptionEonNotFound',
    full_name='da.core.DaExceptionEonNotFound',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?)\022\'\n\022DaExceptionChecked\020\355\'\032\016Eon not found.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=37962,
    serialized_end=38032,
)


_DAEXCEPTIONEONEXISTS = _descriptor.Descriptor(
    name='DaExceptionEonExists',
    full_name='da.core.DaExceptionEonExists',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\022DaExceptionChecked\020\356\'\032\023Eon already exists.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=38034,
    serialized_end=38107,
)


_DAEXCEPTIONEONLOCATIONUNKNOWN = _descriptor.Descriptor(
    name='DaExceptionEonLocationUnknown',
    full_name='da.core.DaExceptionEonLocationUnknown',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\024DaExceptionLocalOnly\020\357\'\032\030Eon location is unknown.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=38109,
    serialized_end=38198,
)


_DAEXCEPTIONEONCANCELED = _descriptor.Descriptor(
    name='DaExceptionEonCanceled',
    full_name='da.core.DaExceptionEonCanceled',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\360\'\032\026Eon has been canceled.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=38200,
    serialized_end=38278,
)


_DAEXCEPTIONEONRETRIED = _descriptor.Descriptor(
    name='DaExceptionEonRetried',
    full_name='da.core.DaExceptionEonRetried',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\024DaExceptionLocalOnly\020\361\'\032\027The Eon rpc is a retry.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=38280,
    serialized_end=38360,
)


_DAEXCEPTIONEONTESTERROR = _descriptor.Descriptor(
    name='DaExceptionEonTestError',
    full_name='da.core.DaExceptionEonTestError',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\362\'\032\033An test eon-specific error.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=38362,
    serialized_end=38446,
)


_DAEXCEPTIONEONBUSY = _descriptor.Descriptor(
    name='DaExceptionEonBusy',
    full_name='da.core.DaExceptionEonBusy',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?N\022L\n\024DaExceptionLocalOnly\020\363\'\0321Max in-flight eons have reached in the EonClient.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=38448,
    serialized_end=38551,
)


_DAEXCEPTIONEONGENCOUNTREJECTED = _descriptor.Descriptor(
    name='DaExceptionEonGenCountRejected',
    full_name='da.core.DaExceptionEonGenCountRejected',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n\022DaExceptionChecked\020\364\'\0320Submit is rejected due to unacceptable genCount.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=38553,
    serialized_end=38665,
)


_DAEXCEPTIONCONTAINERSETNOTENABLED = _descriptor.Descriptor(
    name='DaExceptionContainersetNotEnabled',
    full_name='da.core.DaExceptionContainersetNotEnabled',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\320(\032\033ContainerSet is not enabled')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=38667,
    serialized_end=38761,
)


_DAEXCEPTIONREPLTOOMANYREPLICASITES = _descriptor.Descriptor(
    name='DaExceptionReplTooManyReplicaSites',
    full_name='da.core.DaExceptionReplTooManyReplicaSites',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\022DaExceptionChecked\020\264)\032\027Too many replica sites.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=38763,
    serialized_end=38854,
)


_DAEXCEPTIONREPLINVALIDREPLICASITE = _descriptor.Descriptor(
    name='DaExceptionReplInvalidReplicaSite',
    full_name='da.core.DaExceptionReplInvalidReplicaSite',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\022DaExceptionChecked\020\265)\032\027Replica site is invalid')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=38856,
    serialized_end=38946,
)


_DAEXCEPTIONREPLUNPAIREDREPLICASITE = _descriptor.Descriptor(
    name='DaExceptionReplUnpairedReplicaSite',
    full_name='da.core.DaExceptionReplUnpairedReplicaSite',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\022DaExceptionChecked\020\266)\032\032Replica site is not paired')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=38948,
    serialized_end=39042,
)


_DAEXCEPTIONREPLDISABLEDREPLICASITE = _descriptor.Descriptor(
    name='DaExceptionReplDisabledReplicaSite',
    full_name='da.core.DaExceptionReplDisabledReplicaSite',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\267)\032\030Replica site is disabled')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=39044,
    serialized_end=39136,
)


_DAEXCEPTIONREPLREVOKEDREPLICASITE = _descriptor.Descriptor(
    name='DaExceptionReplRevokedReplicaSite',
    full_name='da.core.DaExceptionReplRevokedReplicaSite',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\022DaExceptionChecked\020\270)\032\027Replica site is revoked')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=39138,
    serialized_end=39228,
)


_DAEXCEPTIONREPLUNAVAILABLEREPLICASITE = _descriptor.Descriptor(
    name='DaExceptionReplUnavailableReplicaSite',
    full_name='da.core.DaExceptionReplUnavailableReplicaSite',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\022DaExceptionChecked\020\271)\032\035Replica site is not available')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=39230,
    serialized_end=39330,
)


_DAEXCEPTIONREPLLOCALNAMEALREADYINUSE = _descriptor.Descriptor(
    name='DaExceptionReplLocalNameAlreadyInUse',
    full_name='da.core.DaExceptionReplLocalNameAlreadyInUse',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?-\022+\n\022DaExceptionChecked\020\272)\032\022Illegal local name')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=39332,
    serialized_end=39420,
)


_DAEXCEPTIONREPLIPADDRESSALREADYINUSE = _descriptor.Descriptor(
    name='DaExceptionReplIpAddressAlreadyInUse',
    full_name='da.core.DaExceptionReplIpAddressAlreadyInUse',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?G\022E\n\022DaExceptionChecked\020\273)\032,IP address already in use by some other site')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=39422,
    serialized_end=39536,
)


_DAEXCEPTIONREPLIPADDRESSCHANGEFAILURE = _descriptor.Descriptor(
    name='DaExceptionReplIpAddressChangeFailure',
    full_name='da.core.DaExceptionReplIpAddressChangeFailure',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\022DaExceptionChecked\020\274)\032&Replica-site IP address change failure')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=39538,
    serialized_end=39647,
)


_DAEXCEPTIONREPLSRCFEUNAVAILABLE = _descriptor.Descriptor(
    name='DaExceptionReplSrcFeUnavailable',
    full_name='da.core.DaExceptionReplSrcFeUnavailable',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\022DaExceptionChecked\020\275)\032\025Source FE unavailable')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=39649,
    serialized_end=39735,
)


_DAEXCEPTIONREPLDSTFEUNAVAILABLE = _descriptor.Descriptor(
    name='DaExceptionReplDstFeUnavailable',
    full_name='da.core.DaExceptionReplDstFeUnavailable',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\022DaExceptionChecked\020\276)\032\032Destination FE unavailable')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=39737,
    serialized_end=39828,
)


_DAEXCEPTIONREPLREMOTESCROLLSVCUNAVAILABLE = _descriptor.Descriptor(
    name='DaExceptionReplRemoteScrollSvcUnavailable',
    full_name='da.core.DaExceptionReplRemoteScrollSvcUnavailable',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\022DaExceptionChecked\020\277)\032!Remote scroll service unavailable')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=39830,
    serialized_end=39938,
)


_DAEXCEPTIONREPLREMOTESCROLLSTOPPED = _descriptor.Descriptor(
    name='DaExceptionReplRemoteScrollStopped',
    full_name='da.core.DaExceptionReplRemoteScrollStopped',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\022DaExceptionChecked\020\300)\032!Remote scroll replication stopped')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=39940,
    serialized_end=40041,
)


_DAEXCEPTIONREPLINSHUTDOWN = _descriptor.Descriptor(
    name='DaExceptionReplInShutdown',
    full_name='da.core.DaExceptionReplInShutdown',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222??\022=\n\022DaExceptionChecked\020\301)\032$Replication service is shutting down')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=40043,
    serialized_end=40138,
)


_DAEXCEPTIONREPLDSTUNKNOWNTASK = _descriptor.Descriptor(
    name='DaExceptionReplDstUnknownTask',
    full_name='da.core.DaExceptionReplDstUnknownTask',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?N\022L\n\022DaExceptionChecked\020\302)\0323Replication destination doesn\'t recognize the task.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=40140,
    serialized_end=40254,
)


_DAEXCEPTIONREPLDSTHASSNAP = _descriptor.Descriptor(
    name='DaExceptionReplDstHasSnap',
    full_name='da.core.DaExceptionReplDstHasSnap',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n\022DaExceptionChecked\020\303)\0320Replication destination already has the PG snap.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=40256,
    serialized_end=40363,
)


_DAEXCEPTIONREPLREMOTESCROLLDROPPED = _descriptor.Descriptor(
    name='DaExceptionReplRemoteScrollDropped',
    full_name='da.core.DaExceptionReplRemoteScrollDropped',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\022DaExceptionChecked\020\304)\032&Remote scroll expired from scroll svc.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=40365,
    serialized_end=40471,
)


_DAEXCEPTIONREPLNETWORKCHECKFAILED = _descriptor.Descriptor(
    name='DaExceptionReplNetworkCheckFailed',
    full_name='da.core.DaExceptionReplNetworkCheckFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?M\022K\n\022DaExceptionChecked\020\305)\0322Initial replication network check returned errors.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=40473,
    serialized_end=40590,
)


_DAEXCEPTIONREPLVERSIONMISMATCH = _descriptor.Descriptor(
    name='DaExceptionReplVersionMismatch',
    full_name='da.core.DaExceptionReplVersionMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?V\022T\n\022DaExceptionChecked\020\306)\032;Source and destination have incompatible software versions.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=40592,
    serialized_end=40715,
)


_DAEXCEPTIONREPLBUSYREPLICASITE = _descriptor.Descriptor(
    name='DaExceptionReplBusyReplicaSite',
    full_name='da.core.DaExceptionReplBusyReplicaSite',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\307)\032\024Replica site is busy')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=40717,
    serialized_end=40801,
)


_DAEXCEPTIONREPLTASKUSERCANCEL = _descriptor.Descriptor(
    name='DaExceptionReplTaskUserCancel',
    full_name='da.core.DaExceptionReplTaskUserCancel',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\310)\032 Replication was canceled by user')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=40803,
    serialized_end=40898,
)


_DAEXCEPTIONREPLSNAPUNAVAILABLE = _descriptor.Descriptor(
    name='DaExceptionReplSnapUnavailable',
    full_name='da.core.DaExceptionReplSnapUnavailable',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\022DaExceptionChecked\020\311)\032(Replication stopped due to missing snap.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=40900,
    serialized_end=41004,
)


_DAEXCEPTIONREPLINVALIDSITEADDRESS = _descriptor.Descriptor(
    name='DaExceptionReplInvalidSiteAddress',
    full_name='da.core.DaExceptionReplInvalidSiteAddress',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?G\022E\n\022DaExceptionChecked\020\312)\032,Invalid network address for the replica site')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=41006,
    serialized_end=41117,
)


_DAEXCEPTIONREPLREMOVEREPLICASITEFAILED = _descriptor.Descriptor(
    name='DaExceptionReplRemoveReplicaSiteFailed',
    full_name='da.core.DaExceptionReplRemoveReplicaSiteFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\265\001\022\262\001\n\022DaExceptionChecked\020\313)\032\230\001Replica site remove failed. To remove anyway, try again with --force; you might have to log in to destination DVX and revoke access from this source DVX')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=41120,
    serialized_end=41348,
)


_DAEXCEPTIONREPLROFS = _descriptor.Descriptor(
    name='DaExceptionReplRofs',
    full_name='da.core.DaExceptionReplRofs',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\024DaExceptionUnchecked\020\314)\032\036Replica site in read-only mode0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=41350,
    serialized_end=41437,
)


_DAEXCEPTIONREPLRETRYFROMDSTREPLICASITE = _descriptor.Descriptor(
    name='DaExceptionReplRetryFromDstReplicaSite',
    full_name='da.core.DaExceptionReplRetryFromDstReplicaSite',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n\022DaExceptionChecked\020\315)\0320Task retry must be done from source replica site')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=41439,
    serialized_end=41559,
)


_DAEXCEPTIONREPLCRITICALSRCREPLICASITE = _descriptor.Descriptor(
    name='DaExceptionReplCriticalSrcReplicaSite',
    full_name='da.core.DaExceptionReplCriticalSrcReplicaSite',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?a\022_\n\022DaExceptionChecked\020\316)\032FSource replica site has a critical health status. Replication Stopped.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=41562,
    serialized_end=41703,
)


_DAEXCEPTIONREPLCRITICALDSTREPLICASITE = _descriptor.Descriptor(
    name='DaExceptionReplCriticalDstReplicaSite',
    full_name='da.core.DaExceptionReplCriticalDstReplicaSite',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?f\022d\n\022DaExceptionChecked\020\317)\032KDestination replica site has a critical health status. Replication Stopped.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=41706,
    serialized_end=41852,
)


_DAEXCEPTIONREPLENCRYPTIONCHANGEROLLBACKERROR = _descriptor.Descriptor(
    name='DaExceptionReplEncryptionChangeRollbackError',
    full_name='da.core.DaExceptionReplEncryptionChangeRollbackError',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?f\022d\n\022DaExceptionChecked\020\320)\032KEnabling or disabling encryption failed with potentially inconsistent state')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=41855,
    serialized_end=42008,
)


_DAEXCEPTIONREPLTASKFAILURE = _descriptor.Descriptor(
    name='DaExceptionReplTaskFailure',
    full_name='da.core.DaExceptionReplTaskFailure',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\321)\032\030Replication task failed.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=42010,
    serialized_end=42094,
)


_DAEXCEPTIONREPLDSTNOSPACE = _descriptor.Descriptor(
    name='DaExceptionReplDstNoSpace',
    full_name='da.core.DaExceptionReplDstNoSpace',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\022DaExceptionChecked\020\322)\032(Destination replica site is out of space')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=42096,
    serialized_end=42195,
)


_DAEXCEPTIONREPLSELFREPLICATIONUNSUPPORTED = _descriptor.Descriptor(
    name='DaExceptionReplSelfReplicationUnsupported',
    full_name='da.core.DaExceptionReplSelfReplicationUnsupported',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?P\022N\n\022DaExceptionChecked\020\323)\0325Source and destination replica sites must be distinct')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=42198,
    serialized_end=42326,
)


_DAEXCEPTIONREPLAPPLYDIFFFAILED = _descriptor.Descriptor(
    name='DaExceptionReplApplyDiffFailed',
    full_name='da.core.DaExceptionReplApplyDiffFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?P\022N\n\022DaExceptionChecked\020\324)\0325Generating file snap on destination from diff failed.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=42328,
    serialized_end=42445,
)


_DAEXCEPTIONREPLTASKREMOVED = _descriptor.Descriptor(
    name='DaExceptionReplTaskRemoved',
    full_name='da.core.DaExceptionReplTaskRemoved',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\022DaExceptionChecked\020\325)\032%Task has been removed from Snapstore.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=42447,
    serialized_end=42544,
)


_DAEXCEPTIONREPLBANDWIDTHLIMITCHANGEERROR = _descriptor.Descriptor(
    name='DaExceptionReplBandwidthLimitChangeError',
    full_name='da.core.DaExceptionReplBandwidthLimitChangeError',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?L\022J\n\022DaExceptionChecked\020\326)\0321Changing bandwidth limit failed. Try again later.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=42546,
    serialized_end=42669,
)


_DAEXCEPTIONREPLSOURCESWITCHEDTASK = _descriptor.Descriptor(
    name='DaExceptionReplSourceSwitchedTask',
    full_name='da.core.DaExceptionReplSourceSwitchedTask',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222??\022=\n\022DaExceptionChecked\020\330)\032$Source switched to a different task.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=42671,
    serialized_end=42774,
)


_DAEXCEPTIONREPLAUTHENTICATIONFAILUREDSTREPLICASITE = _descriptor.Descriptor(
    name='DaExceptionReplAuthenticationFailureDstReplicaSite',
    full_name='da.core.DaExceptionReplAuthenticationFailureDstReplicaSite',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?J\022H\n\022DaExceptionChecked\020\331)\032/Destination replica site authentication failure')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=42777,
    serialized_end=42908,
)


_DAEXCEPTIONREPLDSTROFS = _descriptor.Descriptor(
    name='DaExceptionReplDstRofs',
    full_name='da.core.DaExceptionReplDstRofs',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?I\022G\n\024DaExceptionUnchecked\020\332)\032*Destination replica site in read-only mode0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=42910,
    serialized_end=43012,
)


_DAEXCEPTIONREPLREGISTRATIONFAILUREDSTREPLICASITE = _descriptor.Descriptor(
    name='DaExceptionReplRegistrationFailureDstReplicaSite',
    full_name='da.core.DaExceptionReplRegistrationFailureDstReplicaSite',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?G\022E\n\022DaExceptionChecked\020\333)\032,Destination replica site registation failure')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=43014,
    serialized_end=43140,
)


_DAEXCEPTIONREPLSHELVETIMEOUT = _descriptor.Descriptor(
    name='DaExceptionReplShelveTimeout',
    full_name='da.core.DaExceptionReplShelveTimeout',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\022DaExceptionChecked\020\334)\032)Failed to shelve a previous task in-time.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=43142,
    serialized_end=43245,
)


_DAEXCEPTIONREPLSNAPINCOMPATIBLE = _descriptor.Descriptor(
    name='DaExceptionReplSnapIncompatible',
    full_name='da.core.DaExceptionReplSnapIncompatible',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n\022DaExceptionChecked\020\335)\0320Snapshot is not compatible with the destination.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=43247,
    serialized_end=43360,
)


_DAEXCEPTIONREPLTOOMANYTASKS = _descriptor.Descriptor(
    name='DaExceptionReplTooManyTasks',
    full_name='da.core.DaExceptionReplTooManyTasks',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\\\022Z\n\022DaExceptionChecked\020\336)\032AToo many replication tasks; try again later or cancel some tasks.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=43362,
    serialized_end=43488,
)


_DAEXCEPTIONREPLGENERICSTRESS = _descriptor.Descriptor(
    name='DaExceptionReplGenericStress',
    full_name='da.core.DaExceptionReplGenericStress',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\227*\032 Generic stress error for testing')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=43490,
    serialized_end=43584,
)


_DAEXCEPTIONSNAPTOOMANYPGS = _descriptor.Descriptor(
    name='DaExceptionSnapTooManyPgs',
    full_name='da.core.DaExceptionSnapTooManyPgs',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?k\022i\n\022DaExceptionChecked\020\230*\032PCannot create more protection groups. The DVX system reached the maximum number.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=43587,
    serialized_end=43726,
)


_DAEXCEPTIONSNAPTOOMANYSNAPSINPG = _descriptor.Descriptor(
    name='DaExceptionSnapTooManySnapsInPg',
    full_name='da.core.DaExceptionSnapTooManySnapsInPg',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\255\001\022\252\001\n\024DaExceptionUnchecked\020\231*\032\216\001The schedule frequency and retention will lead to more snapshots than the DVX system can support at a time. Reduce the frequency or retention.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=43729,
    serialized_end=43942,
)


_DAEXCEPTIONSNAPSTOOMANYFILESINSNAP = _descriptor.Descriptor(
    name='DaExceptionSnapsTooManyFilesInSnap',
    full_name='da.core.DaExceptionSnapsTooManyFilesInSnap',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?7\0225\n\022DaExceptionChecked\020\232*\032\034Too many files in a snapshot')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=43944,
    serialized_end=44040,
)


_DAEXCEPTIONSNAPISSEALED = _descriptor.Descriptor(
    name='DaExceptionSnapIsSealed',
    full_name='da.core.DaExceptionSnapIsSealed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\233*\032\026Snap is already sealed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=44042,
    serialized_end=44121,
)


_DAEXCEPTIONSNAPISEMPTY = _descriptor.Descriptor(
    name='DaExceptionSnapIsEmpty',
    full_name='da.core.DaExceptionSnapIsEmpty',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\022DaExceptionChecked\020\234*\032\023Snap has no members')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=44123,
    serialized_end=44198,
)


_DAEXCEPTIONSNAPSTOREROFS = _descriptor.Descriptor(
    name='DaExceptionSnapstoreRofs',
    full_name='da.core.DaExceptionSnapstoreRofs',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?E\022C\n\024DaExceptionUnchecked\020\235*\032&Snapstore is running in read-only mode0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=44200,
    serialized_end=44300,
)


_DAEXCEPTIONPGPOLICYTOOMANYELEMS = _descriptor.Descriptor(
    name='DaExceptionPGPolicyTooManyElems',
    full_name='da.core.DaExceptionPGPolicyTooManyElems',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?O\022M\n\024DaExceptionUnchecked\020\236*\0322PG policy has too many member or schedule elements')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=44302,
    serialized_end=44419,
)


_DAEXCEPTIONPGPOLICYTOOBIG = _descriptor.Descriptor(
    name='DaExceptionPGPolicyTooBig',
    full_name='da.core.DaExceptionPGPolicyTooBig',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\024DaExceptionUnchecked\020\237*\032\024PG policy is too big')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=44421,
    serialized_end=44502,
)


_DAEXCEPTIONTOOMANYTASKS = _descriptor.Descriptor(
    name='DaExceptionTooManyTasks',
    full_name='da.core.DaExceptionTooManyTasks',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?c\022a\n\024DaExceptionUnchecked\020\240*\032DCannot create more tasks. The DVX system reached the maximum number.0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=44505,
    serialized_end=44634,
)


_DAEXCEPTIONPGSNAPFAILED = _descriptor.Descriptor(
    name='DaExceptionPGSnapFailed',
    full_name='da.core.DaExceptionPGSnapFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?G\022E\n\024DaExceptionUnchecked\020\241*\032*Failed to take a protection group snapshot')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=44636,
    serialized_end=44737,
)


_DAEXCEPTIONTOOMANYACVMSINSNAP = _descriptor.Descriptor(
    name='DaExceptionTooManyACVmsInSnap',
    full_name='da.core.DaExceptionTooManyACVmsInSnap',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\022DaExceptionChecked\020\242*\032)Too many app consistent VMs in a snapshot')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=44739,
    serialized_end=44843,
)


_DAEXCEPTIONACVMAGENTNOTFOUND = _descriptor.Descriptor(
    name='DaExceptionACVMAgentNotFound',
    full_name='da.core.DaExceptionACVMAgentNotFound',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?Q\022O\n\022DaExceptionChecked\020\243*\0326Guest agent was not found for app-consistent snapshot.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=44845,
    serialized_end=44961,
)


_DAEXCEPTIONACVMAGENTUNREACHABLE = _descriptor.Descriptor(
    name='DaExceptionACVMAgentUnreachable',
    full_name='da.core.DaExceptionACVMAgentUnreachable',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?X\022V\n\022DaExceptionChecked\020\244*\032=Could not connect to guest agent for app-consistent snapshot.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=44963,
    serialized_end=45089,
)


_DAEXCEPTIONACVMQUIESCETIMEOUT = _descriptor.Descriptor(
    name='DaExceptionACVMQuiesceTimeout',
    full_name='da.core.DaExceptionACVMQuiesceTimeout',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\022DaExceptionChecked\020\245*\032!Quiesce to guest agent timed out.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=45091,
    serialized_end=45187,
)


_DAEXCEPTIONACVMQUIESCEERROR = _descriptor.Descriptor(
    name='DaExceptionACVMQuiesceError',
    full_name='da.core.DaExceptionACVMQuiesceError',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\022DaExceptionChecked\020\246*\032&Quiesce to guest agent returned error.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=45189,
    serialized_end=45288,
)


_DAEXCEPTIONPGPOLICYTOOMANYACELEMS = _descriptor.Descriptor(
    name='DaExceptionPGPolicyTooManyACElems',
    full_name='da.core.DaExceptionPGPolicyTooManyACElems',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n\024DaExceptionUnchecked\020\247*\032.PG Policy has too many app consistent members.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=45290,
    serialized_end=45405,
)


_DAEXCEPTIONSNAPNOTAPPCONSISTENT = _descriptor.Descriptor(
    name='DaExceptionSnapNotAppConsistent',
    full_name='da.core.DaExceptionSnapNotAppConsistent',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?B\022@\n\024DaExceptionUnchecked\020\250*\032%VM Snap taken was not app-consistent.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=45407,
    serialized_end=45511,
)


_DAEXCEPTIONSNAPNOTCREATEDLOCALLY = _descriptor.Descriptor(
    name='DaExceptionSnapNotCreatedLocally',
    full_name='da.core.DaExceptionSnapNotCreatedLocally',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\024DaExceptionUnchecked\020\251*\032$ProtGrpSnap was not created locally.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=45513,
    serialized_end=45617,
)


_DAEXCEPTIONPGPOLICYSCHEDULENAMETOOLONG = _descriptor.Descriptor(
    name='DaExceptionPGPolicyScheduleNameTooLong',
    full_name='da.core.DaExceptionPGPolicyScheduleNameTooLong',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\024DaExceptionUnchecked\020\252*\032\'Schedule name of PG policy is too long.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=45619,
    serialized_end=45732,
)


_DAEXCEPTIONDATASTORENOTMOUNTED = _descriptor.Descriptor(
    name='DaExceptionDatastoreNotMounted',
    full_name='da.core.DaExceptionDatastoreNotMounted',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n\024DaExceptionUnchecked\020\253*\032.Datastore was not mounted on any of the hosts.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=45734,
    serialized_end=45846,
)


_DAEXCEPTIONREPLACEVSSMETAFAILED = _descriptor.Descriptor(
    name='DaExceptionReplaceVSSMetaFailed',
    full_name='da.core.DaExceptionReplaceVSSMetaFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?V\022T\n\024DaExceptionUnchecked\020\254*\0329Failed to replace VSS metadata on all/some of the vdisks.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=45848,
    serialized_end=45972,
)


_DAEXCEPTIONBASICDBNOTOPEN = _descriptor.Descriptor(
    name='DaExceptionBasicdbNotOpen',
    full_name='da.core.DaExceptionBasicdbNotOpen',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\022DaExceptionChecked\020\374*\032\032Basic Database is not open')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=45974,
    serialized_end=46059,
)


_DAEXCEPTIONBASICDBREQUIRESXID = _descriptor.Descriptor(
    name='DaExceptionBasicdbRequiresXid',
    full_name='da.core.DaExceptionBasicdbRequiresXid',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?>\022<\n\022DaExceptionChecked\020\375*\032#Operation requires a transaction id')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=46061,
    serialized_end=46159,
)


_DAEXCEPTIONBASICDBINVALIDXID = _descriptor.Descriptor(
    name='DaExceptionBasicdbInvalidXid',
    full_name='da.core.DaExceptionBasicdbInvalidXid',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionChecked\020\376*\032\031Transaction id is invalid')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=46161,
    serialized_end=46248,
)


_DAEXCEPTIONBASICDBRECORDNOTFOUND = _descriptor.Descriptor(
    name='DaExceptionBasicdbRecordNotFound',
    full_name='da.core.DaExceptionBasicdbRecordNotFound',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\022DaExceptionChecked\020\377*\032\020Record not found')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=46250,
    serialized_end=46332,
)


_DAEXCEPTIONBASICDBRECORDEXISTS = _descriptor.Descriptor(
    name='DaExceptionBasicdbRecordExists',
    full_name='da.core.DaExceptionBasicdbRecordExists',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?(\022&\n\022DaExceptionChecked\020\200+\032\rRecord exists')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=46334,
    serialized_end=46411,
)


_DAEXCEPTIONBASICDBXACTIONINUSE = _descriptor.Descriptor(
    name='DaExceptionBasicdbXactionInuse',
    full_name='da.core.DaExceptionBasicdbXactionInuse',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?i\022g\n\022DaExceptionChecked\020\201+\032NBasicDB only supports one transaction at a time and is is currenlty being used')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=46414,
    serialized_end=46556,
)


_DAEXCEPTIONENCRYPTIONISDISABLED = _descriptor.Descriptor(
    name='DaExceptionEncryptionIsDisabled',
    full_name='da.core.DaExceptionEncryptionIsDisabled',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222??\022=\n\022DaExceptionChecked\020\340+\032$Encryption is disabled on datastore.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=46558,
    serialized_end=46659,
)


_DAEXCEPTIONENCRYPTIONISENABLED = _descriptor.Descriptor(
    name='DaExceptionEncryptionIsEnabled',
    full_name='da.core.DaExceptionEncryptionIsEnabled',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?>\022<\n\022DaExceptionChecked\020\341+\032#Encryption is enabled on datastore.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=46661,
    serialized_end=46760,
)


_DAEXCEPTIONENCRYPTIONSYSTEMISLOCKED = _descriptor.Descriptor(
    name='DaExceptionEncryptionSystemIsLocked',
    full_name='da.core.DaExceptionEncryptionSystemIsLocked',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?7\0225\n\022DaExceptionChecked\020\342+\032\034Encryption system is locked.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=46762,
    serialized_end=46859,
)


_DAEXCEPTIONENCRYPTIONSYSTEMISUNLOCKED = _descriptor.Descriptor(
    name='DaExceptionEncryptionSystemIsUnlocked',
    full_name='da.core.DaExceptionEncryptionSystemIsUnlocked',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\022DaExceptionChecked\020\343+\032\036Encryption system is unlocked.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=46861,
    serialized_end=46962,
)


_DAEXCEPTIONENCRYPTIONSETSTARTUPMODEFAILEDTODELETEOLDKEY = _descriptor.Descriptor(
    name='DaExceptionEncryptionSetStartupModeFailedToDeleteOldKey',
    full_name='da.core.DaExceptionEncryptionSetStartupModeFailedToDeleteOldKey',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?m\022k\n\022DaExceptionChecked\020\344+\032RSetting startup mode to LOCKED failed to forget saved password. Retry again later.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=46965,
    serialized_end=47136,
)


_DAEXCEPTIONENCRYPTIONSETSTARTUPMODEFAILEDTOSAVENEWKEY = _descriptor.Descriptor(
    name='DaExceptionEncryptionSetStartupModeFailedToSaveNewKey',
    full_name='da.core.DaExceptionEncryptionSetStartupModeFailedToSaveNewKey',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?k\022i\n\022DaExceptionChecked\020\345+\032PSetting startup mode to UNLOCKED failed to save the password. Retry again later.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=47139,
    serialized_end=47306,
)


_DAEXCEPTIONENCRYPTIONPASSWORDMISMATCH = _descriptor.Descriptor(
    name='DaExceptionEncryptionPasswordMismatch',
    full_name='da.core.DaExceptionEncryptionPasswordMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\022DaExceptionChecked\020\346+\032\"Encryption passwords do not match.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=47308,
    serialized_end=47413,
)


_DAEXCEPTIONENCRYPTIONPASSWORDNOTCOMPLIANT = _descriptor.Descriptor(
    name='DaExceptionEncryptionPasswordNotCompliant',
    full_name='da.core.DaExceptionEncryptionPasswordNotCompliant',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\332\002\022\327\002\n\022DaExceptionChecked\020\347+\032\275\002Encryption password contains invalid characters.\nThe password is a minimum of eight characters. The password can contain letters, numbers, and special characters from the ASCII 7-bit character set within the decimal character code range of 032..126. The password cannot start or end with space characters (ASCII 032).')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=47416,
    serialized_end=47812,
)


_DAEXCEPTIONENCRYPTIONPASSWORDTOOSHORT = _descriptor.Descriptor(
    name='DaExceptionEncryptionPasswordTooShort',
    full_name='da.core.DaExceptionEncryptionPasswordTooShort',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\341\002\022\336\002\n\022DaExceptionChecked\020\350+\032\304\002Encryption password must be at least 8 characters long.\nThe password is a minimum of eight characters. The password can contain letters, numbers, and special characters from the ASCII 7-bit character set within the decimal character code range of 032..126. The password cannot start or end with space characters (ASCII 032).')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=47815,
    serialized_end=48214,
)


_DAEXCEPTIONENCRYPTIONPASSWORDILLEGALSPACES = _descriptor.Descriptor(
    name='DaExceptionEncryptionPasswordIllegalSpaces',
    full_name='da.core.DaExceptionEncryptionPasswordIllegalSpaces',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\336\002\022\333\002\n\022DaExceptionChecked\020\351+\032\301\002Encryption password cannot start or end with spaces.\nThe password is a minimum of eight characters. The password can contain letters, numbers, and special characters from the ASCII 7-bit character set within the decimal character code range of 032..126. The password cannot start or end with space characters (ASCII 032).')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=48217,
    serialized_end=48618,
)


_DAEXCEPTIONENCRYPTIONENABLEDSTARTUPMODELOCKED = _descriptor.Descriptor(
    name='DaExceptionEncryptionEnabledStartupModeLocked',
    full_name='da.core.DaExceptionEncryptionEnabledStartupModeLocked',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\271\002\022\266\002\n\022DaExceptionChecked\020\352+\032\234\002Encryption has been enabled successfully. However, an error occurred when the password was saved, so the DVX System set the startup mode to locked. When the Data Node starts in locked startup mode, you must provide the encryption password in order to access the data in the datastore.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=48621,
    serialized_end=48988,
)


_DAEXCEPTIONENCRYPTIONSETPASSWORDSUCCESSSTARTUPLOCKED = _descriptor.Descriptor(
    name='DaExceptionEncryptionSetPasswordSuccessStartupLocked',
    full_name='da.core.DaExceptionEncryptionSetPasswordSuccessStartupLocked',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\302\002\022\277\002\n\022DaExceptionChecked\020\353+\032\245\002New encryption password has been set successfully. However, an error occurred when the password was saved, so the DVX System set the startup mode to locked. When the Data Node starts in locked startup mode, you must provide the encryption password in order to access the data in the datastore.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=48991,
    serialized_end=49374,
)


_DAEXCEPTIONENCRYPTIONSWITCHTOFIPSFAILED = _descriptor.Descriptor(
    name='DaExceptionEncryptionSwitchToFipsFailed',
    full_name='da.core.DaExceptionEncryptionSwitchToFipsFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?S\022Q\n\022DaExceptionChecked\020\354+\0328Failed to enable FIPS 140-2 validated mode of operation.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=49377,
    serialized_end=49506,
)


_DAEXCEPTIONENCRYPTIONSWITCHFROMFIPSFAILED = _descriptor.Descriptor(
    name='DaExceptionEncryptionSwitchFromFipsFailed',
    full_name='da.core.DaExceptionEncryptionSwitchFromFipsFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?T\022R\n\022DaExceptionChecked\020\355+\0329Failed to disable FIPS 140-2 validated mode of operation.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=49509,
    serialized_end=49641,
)


_DAEXCEPTIONENCRYPTIONINFIPSAPPROVEDMODE = _descriptor.Descriptor(
    name='DaExceptionEncryptionInFipsApprovedMode',
    full_name='da.core.DaExceptionEncryptionInFipsApprovedMode',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?P\022N\n\022DaExceptionChecked\020\356+\0325DVX already in FIPS 140-2 approved mode of operation.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=49643,
    serialized_end=49769,
)


_DAEXCEPTIONENCRYPTIONINFIPSVALIDATEDMODE = _descriptor.Descriptor(
    name='DaExceptionEncryptionInFipsValidatedMode',
    full_name='da.core.DaExceptionEncryptionInFipsValidatedMode',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?R\022P\n\022DaExceptionChecked\020\357+\0327DVX  already in FIPS 140-2 validated mode of operation.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=49772,
    serialized_end=49901,
)


_DAEXCEPTIONREMOTESCROLLNOTFOUND = _descriptor.Descriptor(
    name='DaExceptionRemoteScrollNotFound',
    full_name='da.core.DaExceptionRemoteScrollNotFound',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\022DaExceptionChecked\020\250-\032\032RemoteScroll is not found.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=49903,
    serialized_end=49994,
)


_DAEXCEPTIONREMOTESCROLLVERSIONMISMATCH = _descriptor.Descriptor(
    name='DaExceptionRemoteScrollVersionMismatch',
    full_name='da.core.DaExceptionRemoteScrollVersionMismatch',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?V\022T\n\024DaExceptionUnchecked\020\251-\0329RemoteScroll RPC has version that server doesn\'t support.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=49997,
    serialized_end=50128,
)


_DAEXCEPTIONVMIDNOTUNIQUE = _descriptor.Descriptor(
    name='DaExceptionVmIdNotUnique',
    full_name='da.core.DaExceptionVmIdNotUnique',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?H\022F\n\024DaExceptionUnchecked\020\214.\032)Multiple VMs found to have the same VmId.0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=50130,
    serialized_end=50233,
)


_DAEXCEPTIONVMXPATHCONFLICT = _descriptor.Descriptor(
    name='DaExceptionVmxPathConflict',
    full_name='da.core.DaExceptionVmxPathConflict',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\024DaExceptionUnchecked\020\215.\032\035VMX FilePath not as expected.0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=50235,
    serialized_end=50328,
)


_DAEXCEPTIONVMISPOWEREDON = _descriptor.Descriptor(
    name='DaExceptionVmIsPoweredOn',
    full_name='da.core.DaExceptionVmIsPoweredOn',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\024DaExceptionUnchecked\020\216.\032\037Expecting VM to be Powered Off.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=50330,
    serialized_end=50421,
)


_DAEXCEPTIONVMDIRCONFLICT = _descriptor.Descriptor(
    name='DaExceptionVmDirConflict',
    full_name='da.core.DaExceptionVmDirConflict',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\024DaExceptionUnchecked\020\217.\032\022VM Path not empty.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=50423,
    serialized_end=50501,
)


_DAEXCEPTIONVMCONFIGSUPDATEFAILED = _descriptor.Descriptor(
    name='DaExceptionVmConfigsUpdateFailed',
    full_name='da.core.DaExceptionVmConfigsUpdateFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\024DaExceptionUnchecked\020\220.\032\035Error while cloning VM files.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=50503,
    serialized_end=50600,
)


_DAEXCEPTIONVALIDCLONENAMENOTFOUND = _descriptor.Descriptor(
    name='DaExceptionValidCloneNameNotFound',
    full_name='da.core.DaExceptionValidCloneNameNotFound',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?T\022R\n\024DaExceptionUnchecked\020\221.\0325Exceeded maximum attempts to find a valid Clone Name.0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=50602,
    serialized_end=50726,
)


_DAEXCEPTIONVMEXISTS = _descriptor.Descriptor(
    name='DaExceptionVmExists',
    full_name='da.core.DaExceptionVmExists',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?U\022S\n\024DaExceptionUnchecked\020\222.\0326Cannot clone VM. There is already a VM with that name.0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=50728,
    serialized_end=50839,
)


_DAEXCEPTIONFILEINUSE = _descriptor.Descriptor(
    name='DaExceptionFileInUse',
    full_name='da.core.DaExceptionFileInUse',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\024DaExceptionUnchecked\020\223.\032#Cannot restore. File lock detected.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=50841,
    serialized_end=50932,
)


_DAEXCEPTIONVMINUSE = _descriptor.Descriptor(
    name='DaExceptionVmInUse',
    full_name='da.core.DaExceptionVmInUse',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?J\022H\n\024DaExceptionUnchecked\020\224.\032+Cannot restore. Lock detected in VM Folder.0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=50934,
    serialized_end=51033,
)


_DAEXCEPTIONVMXFILECONFLICT = _descriptor.Descriptor(
    name='DaExceptionVmxFileConflict',
    full_name='da.core.DaExceptionVmxFileConflict',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\024DaExceptionUnchecked\020\225.\032#Destination already has a Vmx File.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=51035,
    serialized_end=51132,
)


_DAEXCEPTIONINVALIDVIRTUALDISK = _descriptor.Descriptor(
    name='DaExceptionInvalidVirtualDisk',
    full_name='da.core.DaExceptionInvalidVirtualDisk',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?H\022F\n\024DaExceptionUnchecked\020\226.\032+Input is not a valid virtual disk artifact.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=51134,
    serialized_end=51242,
)


_DAEXCEPTIONVMPARSINGERROR = _descriptor.Descriptor(
    name='DaExceptionVmParsingError',
    full_name='da.core.DaExceptionVmParsingError',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?T\022R\n\024DaExceptionUnchecked\020\227.\0325Unable to determine a VM. Could be a parsing failure.0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=51244,
    serialized_end=51360,
)


_DAEXCEPTIONLICENSEINVALID = _descriptor.Descriptor(
    name='DaExceptionLicenseInvalid',
    full_name='da.core.DaExceptionLicenseInvalid',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\024DaExceptionUnchecked\020\360.\032\023License is invalid.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=51362,
    serialized_end=51442,
)


_DAEXCEPTIONVSSERROR = _descriptor.Descriptor(
    name='DaExceptionVssError',
    full_name='da.core.DaExceptionVssError',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='errorDetail', full_name='da.core.DaExceptionVssError.errorDetail', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?&\022$\n\024DaExceptionUnchecked\020\324/\032\tVSS error')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=51444,
    serialized_end=51542,
)


_DAEXCEPTIONACCESSKEYINVALID = _descriptor.Descriptor(
    name='DaExceptionAccessKeyInvalid',
    full_name='da.core.DaExceptionAccessKeyInvalid',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='errorDetail', full_name='da.core.DaExceptionAccessKeyInvalid.errorDetail', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\024DaExceptionUnchecked\020\2700\032$Access key is invalid: {errorDetail}')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=51545,
    serialized_end=51678,
)


_DAEXCEPTIONFEATUREUNAVAILBLE = _descriptor.Descriptor(
    name='DaExceptionFeatureUnavailble',
    full_name='da.core.DaExceptionFeatureUnavailble',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?z\022x\n\024DaExceptionUnchecked\020\2710\032]Cloud DVX feature is not available from your AWS account.  Please check with Datrium support.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=51681,
    serialized_end=51838,
)


_DAEXCEPTIONSOFTWARENOTSETUP = _descriptor.Descriptor(
    name='DaExceptionSoftwareNotSetup',
    full_name='da.core.DaExceptionSoftwareNotSetup',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\024DaExceptionUnchecked\020\2720\032\'Cloud DVX software has not been set up.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=51840,
    serialized_end=51942,
)


_DAEXCEPTIONCLOUDDVXINCOMPATIBLE = _descriptor.Descriptor(
    name='DaExceptionCloudDvxIncompatible',
    full_name='da.core.DaExceptionCloudDvxIncompatible',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?P\022N\n\024DaExceptionUnchecked\020\2730\0323Cloud DVX version is incompatible with source site.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=51944,
    serialized_end=52062,
)


_DAEXCEPTIONAWSUNRESPONSIVE = _descriptor.Descriptor(
    name='DaExceptionAwsUnresponsive',
    full_name='da.core.DaExceptionAwsUnresponsive',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='errorDetail', full_name='da.core.DaExceptionAwsUnresponsive.errorDetail', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?X\022V\n\024DaExceptionUnchecked\020\2750\032;AWS services are unresponsive or unreachable: {errorDetail}')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=52065,
    serialized_end=52220,
)


_DAEXCEPTIONAWSERROR = _descriptor.Descriptor(
    name='DaExceptionAwsError',
    full_name='da.core.DaExceptionAwsError',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='errorDetail', full_name='da.core.DaExceptionAwsError.errorDetail', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\024DaExceptionUnchecked\020\2760\032$AWS returned an error: {errorDetail}')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=52222,
    serialized_end=52347,
)


_DAEXCEPTIONCLOUDDVXINSTANCEDOWN = _descriptor.Descriptor(
    name='DaExceptionCloudDvxInstanceDown',
    full_name='da.core.DaExceptionCloudDvxInstanceDown',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\024DaExceptionUnchecked\020\2770\032\035Cloud DVX instance is not up.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=52349,
    serialized_end=52445,
)


_DAEXCEPTIONSYSTEMALREADYMANAGED = _descriptor.Descriptor(
    name='DaExceptionSystemAlreadyManaged',
    full_name='da.core.DaExceptionSystemAlreadyManaged',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\024DaExceptionUnchecked\020\3000\032\034This DVX is already managed.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=52447,
    serialized_end=52542,
)


_DAEXCEPTIONSYSTEMNOTMANAGED = _descriptor.Descriptor(
    name='DaExceptionSystemNotManaged',
    full_name='da.core.DaExceptionSystemNotManaged',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\024DaExceptionUnchecked\020\3010\032\030This DVX is not managed.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=52544,
    serialized_end=52631,
)


_DAEXCEPTIONACCESSKEYREQUIRED = _descriptor.Descriptor(
    name='DaExceptionAccessKeyRequired',
    full_name='da.core.DaExceptionAccessKeyRequired',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\024DaExceptionUnchecked\020\3020\032\026Access key is required')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=52633,
    serialized_end=52719,
)


_DAEXCEPTIONCLOUDDVXTOOMANYSRCSITES = _descriptor.Descriptor(
    name='DaExceptionCloudDvxTooManySrcSites',
    full_name='da.core.DaExceptionCloudDvxTooManySrcSites',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?L\022J\n\024DaExceptionUnchecked\020\3030\032/Too many on-prem systems paired with Cloud DVX.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=52721,
    serialized_end=52838,
)


_DAEXCEPTIONGUESTFSINVALIDCOOKIE = _descriptor.Descriptor(
    name='DaExceptionGuestFsInvalidCookie',
    full_name='da.core.DaExceptionGuestFsInvalidCookie',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\024DaExceptionUnchecked\020\2341\032\016Invalid cookie')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=52840,
    serialized_end=52921,
)


_DAEXCEPTIONGUESTFSERRPARSE = _descriptor.Descriptor(
    name='DaExceptionGuestFsErrParse',
    full_name='da.core.DaExceptionGuestFsErrParse',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222??\022=\n\024DaExceptionUnchecked\020\2351\032\"Parsing error in guest file system')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=52923,
    serialized_end=53019,
)


_DAEXCEPTIONGUESTFSERROPEN = _descriptor.Descriptor(
    name='DaExceptionGuestFsErrOpen',
    full_name='da.core.DaExceptionGuestFsErrOpen',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\024DaExceptionUnchecked\020\2361\032\034Error while opening a device')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=53021,
    serialized_end=53110,
)


_DAEXCEPTIONGUESTFSERRREADDIR = _descriptor.Descriptor(
    name='DaExceptionGuestFsErrReaddir',
    full_name='da.core.DaExceptionGuestFsErrReaddir',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\024DaExceptionUnchecked\020\2371\032\037Error while reading a directory')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=53112,
    serialized_end=53207,
)


_DAEXCEPTIONGUESTFSERRREAD = _descriptor.Descriptor(
    name='DaExceptionGuestFsErrRead',
    full_name='da.core.DaExceptionGuestFsErrRead',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\024DaExceptionUnchecked\020\2401\032\023Error while reading')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=53209,
    serialized_end=53289,
)


_DAEXCEPTIONGUESTFSERRWRITE = _descriptor.Descriptor(
    name='DaExceptionGuestFsErrWrite',
    full_name='da.core.DaExceptionGuestFsErrWrite',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\024DaExceptionUnchecked\020\2411\032\023Error while writing')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=53291,
    serialized_end=53372,
)


_DAEXCEPTIONGUESTFSUNSUPPORTEDVOLUME = _descriptor.Descriptor(
    name='DaExceptionGuestFsUnsupportedVolume',
    full_name='da.core.DaExceptionGuestFsUnsupportedVolume',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?G\022E\n\024DaExceptionUnchecked\020\2421\032*Operation performed on unsupported volume.')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=53374,
    serialized_end=53487,
)


_DAEXCEPTIONIRRINTERNAL = _descriptor.Descriptor(
    name='DaExceptionIrrInternal',
    full_name='da.core.DaExceptionIrrInternal',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\024DaExceptionUnchecked\020\2002\032\032IRR generic run time error8\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=53489,
    serialized_end=53575,
)


_DAEXCEPTIONILLEGALPLANOPERATION = _descriptor.Descriptor(
    name='DaExceptionIllegalPlanOperation',
    full_name='da.core.DaExceptionIllegalPlanOperation',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?F\022D\n\024DaExceptionUnchecked\020\2012\032\'Illegal operation in current plan state8\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=53577,
    serialized_end=53685,
)


_DAEXCEPTIONARCHIVEEOF = _descriptor.Descriptor(
    name='DaExceptionArchiveEof',
    full_name='da.core.DaExceptionArchiveEof',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\3442\032\024Found end of archive')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=53687,
    serialized_end=53762,
)


_DAEXCEPTIONARCHIVERETRY = _descriptor.Descriptor(
    name='DaExceptionArchiveRetry',
    full_name='da.core.DaExceptionArchiveRetry',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\022DaExceptionChecked\020\3452\032\023Retry might succeed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=53764,
    serialized_end=53840,
)


_DAEXCEPTIONARCHIVEWARN = _descriptor.Descriptor(
    name='DaExceptionArchiveWarn',
    full_name='da.core.DaExceptionArchiveWarn',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\022DaExceptionChecked\020\3462\032\017Partial success')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=53842,
    serialized_end=53913,
)


_DAEXCEPTIONARCHIVEFAILED = _descriptor.Descriptor(
    name='DaExceptionArchiveFailed',
    full_name='da.core.DaExceptionArchiveFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\022DaExceptionChecked\020\3472\032\035Operation cannot be completed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=53915,
    serialized_end=54002,
)


_DAEXCEPTIONARCHIVEFATAL = _descriptor.Descriptor(
    name='DaExceptionArchiveFatal',
    full_name='da.core.DaExceptionArchiveFatal',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?O\022M\n\022DaExceptionChecked\020\3502\0324Operation failed and no more operations are possible')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=54004,
    serialized_end=54113,
)


_DAEXCEPTIONEXPORTTOOVFFAILED = _descriptor.Descriptor(
    name='DaExceptionExportToOvfFailed',
    full_name='da.core.DaExceptionExportToOvfFailed',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\024DaExceptionUnchecked\020\3103\032\024Export to ovf failed')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=54115,
    serialized_end=54199,
)


_DAEXCEPTIONINVALIDSITEOP = _descriptor.Descriptor(
    name='DaExceptionInvalidSiteOp',
    full_name='da.core.DaExceptionInvalidSiteOp',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?M\022K\n\024DaExceptionUnchecked\020\3509\0320Invalid operation issued on a given replica site')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=54201,
    serialized_end=54309,
)


_DAEXCEPTIONSRMHEALTHCRITICAL = _descriptor.Descriptor(
    name='DaExceptionSrmHealthCritical',
    full_name='da.core.DaExceptionSrmHealthCritical',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\024DaExceptionUnchecked\020\3519\032$The health of SRM PGs or site not OK0\001')),
    is_extendable=False,
    syntax='proto2',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=54311,
    serialized_end=54413,
)

_DAEXCEPTIONBASE.fields_by_name['attributes'].message_type = IDL_dot_Protos_dot_Extensions_dot_KeyValueTypes__pb2._KEYVALUE
DESCRIPTOR.message_types_by_name['DaExceptionBase'] = _DAEXCEPTIONBASE
DESCRIPTOR.message_types_by_name['DaExceptionChecked'] = _DAEXCEPTIONCHECKED
DESCRIPTOR.message_types_by_name['DaExceptionUnchecked'] = _DAEXCEPTIONUNCHECKED
DESCRIPTOR.message_types_by_name['DaExceptionLocalOnly'] = _DAEXCEPTIONLOCALONLY
DESCRIPTOR.message_types_by_name['DaExceptionNotFound'] = _DAEXCEPTIONNOTFOUND
DESCRIPTOR.message_types_by_name['DaExceptionObjectNotFound'] = _DAEXCEPTIONOBJECTNOTFOUND
DESCRIPTOR.message_types_by_name['DaExceptionInterrupted'] = _DAEXCEPTIONINTERRUPTED
DESCRIPTOR.message_types_by_name['DaExceptionIo'] = _DAEXCEPTIONIO
DESCRIPTOR.message_types_by_name['DaExceptionWouldBlock'] = _DAEXCEPTIONWOULDBLOCK
DESCRIPTOR.message_types_by_name['DaExceptionOutOfMemory'] = _DAEXCEPTIONOUTOFMEMORY
DESCRIPTOR.message_types_by_name['DaExceptionBusy'] = _DAEXCEPTIONBUSY
DESCRIPTOR.message_types_by_name['DaExceptionAlreadyExists'] = _DAEXCEPTIONALREADYEXISTS
DESCRIPTOR.message_types_by_name['DaExceptionInvalidArgument'] = _DAEXCEPTIONINVALIDARGUMENT
DESCRIPTOR.message_types_by_name['DaExceptionNoSpace'] = _DAEXCEPTIONNOSPACE
DESCRIPTOR.message_types_by_name['DaExceptionUnderflow'] = _DAEXCEPTIONUNDERFLOW
DESCRIPTOR.message_types_by_name['DaExceptionOverflow'] = _DAEXCEPTIONOVERFLOW
DESCRIPTOR.message_types_by_name['DaExceptionAddressInUse'] = _DAEXCEPTIONADDRESSINUSE
DESCRIPTOR.message_types_by_name['DaExceptionAddressNotAvailable'] = _DAEXCEPTIONADDRESSNOTAVAILABLE
DESCRIPTOR.message_types_by_name['DaExceptionConnectionDown'] = _DAEXCEPTIONCONNECTIONDOWN
DESCRIPTOR.message_types_by_name['DaExceptionTooManyConnections'] = _DAEXCEPTIONTOOMANYCONNECTIONS
DESCRIPTOR.message_types_by_name['DaExceptionConnectFailed'] = _DAEXCEPTIONCONNECTFAILED
DESCRIPTOR.message_types_by_name['DaExceptionTimeout'] = _DAEXCEPTIONTIMEOUT
DESCRIPTOR.message_types_by_name['DaExceptionInternal'] = _DAEXCEPTIONINTERNAL
DESCRIPTOR.message_types_by_name['DaExceptionCorruption'] = _DAEXCEPTIONCORRUPTION
DESCRIPTOR.message_types_by_name['DaExceptionFileOpenFailure'] = _DAEXCEPTIONFILEOPENFAILURE
DESCRIPTOR.message_types_by_name['DaExceptionTooManyPinned'] = _DAEXCEPTIONTOOMANYPINNED
DESCRIPTOR.message_types_by_name['DaExceptionFailure'] = _DAEXCEPTIONFAILURE
DESCRIPTOR.message_types_by_name['DaExceptionInvalidOperation'] = _DAEXCEPTIONINVALIDOPERATION
DESCRIPTOR.message_types_by_name['DaExceptionArgumentOutOfRange'] = _DAEXCEPTIONARGUMENTOUTOFRANGE
DESCRIPTOR.message_types_by_name['DaExceptionTryAgain'] = _DAEXCEPTIONTRYAGAIN
DESCRIPTOR.message_types_by_name['DaExceptionVersionUnsupported'] = _DAEXCEPTIONVERSIONUNSUPPORTED
DESCRIPTOR.message_types_by_name['DaExceptionIhdrMismatch'] = _DAEXCEPTIONIHDRMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionHostRpcFailure'] = _DAEXCEPTIONHOSTRPCFAILURE
DESCRIPTOR.message_types_by_name['DaExceptionShuttingDown'] = _DAEXCEPTIONSHUTTINGDOWN
DESCRIPTOR.message_types_by_name['DaExceptionUnexpectedError'] = _DAEXCEPTIONUNEXPECTEDERROR
DESCRIPTOR.message_types_by_name['DaExceptionFPMismatch'] = _DAEXCEPTIONFPMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionBindToInterfaceFailed'] = _DAEXCEPTIONBINDTOINTERFACEFAILED
DESCRIPTOR.message_types_by_name['DaExceptionNameTooLong'] = _DAEXCEPTIONNAMETOOLONG
DESCRIPTOR.message_types_by_name['DaExceptionIterDone'] = _DAEXCEPTIONITERDONE
DESCRIPTOR.message_types_by_name['DaExceptionNoIndirectFn'] = _DAEXCEPTIONNOINDIRECTFN
DESCRIPTOR.message_types_by_name['DaExceptionOpCanceled'] = _DAEXCEPTIONOPCANCELED
DESCRIPTOR.message_types_by_name['DaExceptionOperationUnsupported'] = _DAEXCEPTIONOPERATIONUNSUPPORTED
DESCRIPTOR.message_types_by_name['DaExceptionSendWouldBlock'] = _DAEXCEPTIONSENDWOULDBLOCK
DESCRIPTOR.message_types_by_name['DaExceptionRecvWouldBlock'] = _DAEXCEPTIONRECVWOULDBLOCK
DESCRIPTOR.message_types_by_name['DaExceptionCompressFailure'] = _DAEXCEPTIONCOMPRESSFAILURE
DESCRIPTOR.message_types_by_name['DaExceptionUncompressFailure'] = _DAEXCEPTIONUNCOMPRESSFAILURE
DESCRIPTOR.message_types_by_name['DaExceptionRegistryNodeExists'] = _DAEXCEPTIONREGISTRYNODEEXISTS
DESCRIPTOR.message_types_by_name['DaExceptionRegistryNoNode'] = _DAEXCEPTIONREGISTRYNONODE
DESCRIPTOR.message_types_by_name['DaExceptionRegistryConnectionLoss'] = _DAEXCEPTIONREGISTRYCONNECTIONLOSS
DESCRIPTOR.message_types_by_name['DaExceptionRegistrySessionExpired'] = _DAEXCEPTIONREGISTRYSESSIONEXPIRED
DESCRIPTOR.message_types_by_name['DaExceptionRegistryConnectionTimeout'] = _DAEXCEPTIONREGISTRYCONNECTIONTIMEOUT
DESCRIPTOR.message_types_by_name['DaExceptionRegistryOperationTimeout'] = _DAEXCEPTIONREGISTRYOPERATIONTIMEOUT
DESCRIPTOR.message_types_by_name['DaExceptionRegistryBadVersion'] = _DAEXCEPTIONREGISTRYBADVERSION
DESCRIPTOR.message_types_by_name['DaExceptionRegistryEmptyNode'] = _DAEXCEPTIONREGISTRYEMPTYNODE
DESCRIPTOR.message_types_by_name['DaExceptionRegistryIpMismatch'] = _DAEXCEPTIONREGISTRYIPMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionRegistryDvxidMismatch'] = _DAEXCEPTIONREGISTRYDVXIDMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionRpcClientPanic'] = _DAEXCEPTIONRPCCLIENTPANIC
DESCRIPTOR.message_types_by_name['DaExceptionRpcDecodeFailed'] = _DAEXCEPTIONRPCDECODEFAILED
DESCRIPTOR.message_types_by_name['DaExceptionRpcServiceNotHere'] = _DAEXCEPTIONRPCSERVICENOTHERE
DESCRIPTOR.message_types_by_name['DaExceptionRpcServiceUnknown'] = _DAEXCEPTIONRPCSERVICEUNKNOWN
DESCRIPTOR.message_types_by_name['DaExceptionRpcMethodUnknown'] = _DAEXCEPTIONRPCMETHODUNKNOWN
DESCRIPTOR.message_types_by_name['DaExceptionRpcAsyncResponse'] = _DAEXCEPTIONRPCASYNCRESPONSE
DESCRIPTOR.message_types_by_name['DaExceptionRpcQueueFull'] = _DAEXCEPTIONRPCQUEUEFULL
DESCRIPTOR.message_types_by_name['DaExceptionRpcRequestFenced'] = _DAEXCEPTIONRPCREQUESTFENCED
DESCRIPTOR.message_types_by_name['DaExceptionRpcInvalidHandshake'] = _DAEXCEPTIONRPCINVALIDHANDSHAKE
DESCRIPTOR.message_types_by_name['DaExceptionRpcVersionMismatch'] = _DAEXCEPTIONRPCVERSIONMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionRpcProtocolUnsupported'] = _DAEXCEPTIONRPCPROTOCOLUNSUPPORTED
DESCRIPTOR.message_types_by_name['DaExceptionRpcTransportUnsupported'] = _DAEXCEPTIONRPCTRANSPORTUNSUPPORTED
DESCRIPTOR.message_types_by_name['DaExceptionRpcRequestRejected'] = _DAEXCEPTIONRPCREQUESTREJECTED
DESCRIPTOR.message_types_by_name['DaExceptionRpcClientRetry'] = _DAEXCEPTIONRPCCLIENTRETRY
DESCRIPTOR.message_types_by_name['DaExceptionRpcClientChecksumRetry'] = _DAEXCEPTIONRPCCLIENTCHECKSUMRETRY
DESCRIPTOR.message_types_by_name['DaExceptionRpcTopologyMismatch'] = _DAEXCEPTIONRPCTOPOLOGYMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionRpcTimeout'] = _DAEXCEPTIONRPCTIMEOUT
DESCRIPTOR.message_types_by_name['DaExceptionRpcDvxIdMismatch'] = _DAEXCEPTIONRPCDVXIDMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionIoOpen'] = _DAEXCEPTIONIOOPEN
DESCRIPTOR.message_types_by_name['DaExceptionIoClose'] = _DAEXCEPTIONIOCLOSE
DESCRIPTOR.message_types_by_name['DaExceptionIoCreateIoctxt'] = _DAEXCEPTIONIOCREATEIOCTXT
DESCRIPTOR.message_types_by_name['DaExceptionIoDestroyIoctxt'] = _DAEXCEPTIONIODESTROYIOCTXT
DESCRIPTOR.message_types_by_name['DaExceptionIoCreateIocb'] = _DAEXCEPTIONIOCREATEIOCB
DESCRIPTOR.message_types_by_name['DaExceptionIoSubmit'] = _DAEXCEPTIONIOSUBMIT
DESCRIPTOR.message_types_by_name['DaExceptionIoWaitForCompletion'] = _DAEXCEPTIONIOWAITFORCOMPLETION
DESCRIPTOR.message_types_by_name['DaExceptionIoNoResources'] = _DAEXCEPTIONIONORESOURCES
DESCRIPTOR.message_types_by_name['DaExceptionIoEmptyQueue'] = _DAEXCEPTIONIOEMPTYQUEUE
DESCRIPTOR.message_types_by_name['DaExceptionIoIncomplete'] = _DAEXCEPTIONIOINCOMPLETE
DESCRIPTOR.message_types_by_name['DaExceptionIoTimeout'] = _DAEXCEPTIONIOTIMEOUT
DESCRIPTOR.message_types_by_name['DaExceptionIoCreateCtrlBlk'] = _DAEXCEPTIONIOCREATECTRLBLK
DESCRIPTOR.message_types_by_name['DaExceptionIoDevice'] = _DAEXCEPTIONIODEVICE
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreNotFound'] = _DAEXCEPTIONCHUNKSTORENOTFOUND
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreCollision'] = _DAEXCEPTIONCHUNKSTORECOLLISION
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreIterationComplete'] = _DAEXCEPTIONCHUNKSTOREITERATIONCOMPLETE
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreNullChunk'] = _DAEXCEPTIONCHUNKSTORENULLCHUNK
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreIndexFull'] = _DAEXCEPTIONCHUNKSTOREINDEXFULL
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreOutOfSpace'] = _DAEXCEPTIONCHUNKSTOREOUTOFSPACE
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreChunkTooLarge'] = _DAEXCEPTIONCHUNKSTORECHUNKTOOLARGE
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreInvalidOffset'] = _DAEXCEPTIONCHUNKSTOREINVALIDOFFSET
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreCorruption'] = _DAEXCEPTIONCHUNKSTORECORRUPTION
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreInvalidDevice'] = _DAEXCEPTIONCHUNKSTOREINVALIDDEVICE
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreInvalidChksumType'] = _DAEXCEPTIONCHUNKSTOREINVALIDCHKSUMTYPE
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreChunkBusy'] = _DAEXCEPTIONCHUNKSTORECHUNKBUSY
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreInvalidKey'] = _DAEXCEPTIONCHUNKSTOREINVALIDKEY
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreForeignDevice'] = _DAEXCEPTIONCHUNKSTOREFOREIGNDEVICE
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreCrashed'] = _DAEXCEPTIONCHUNKSTORECRASHED
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreSuffixTooLong'] = _DAEXCEPTIONCHUNKSTORESUFFIXTOOLONG
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreRetryWrite'] = _DAEXCEPTIONCHUNKSTORERETRYWRITE
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreEnableSyntheticChunks'] = _DAEXCEPTIONCHUNKSTOREENABLESYNTHETICCHUNKS
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreUnmanaged'] = _DAEXCEPTIONCHUNKSTOREUNMANAGED
DESCRIPTOR.message_types_by_name['DaExceptionChunkstoreChunkRepairing'] = _DAEXCEPTIONCHUNKSTORECHUNKREPAIRING
DESCRIPTOR.message_types_by_name['DaExceptionFstoreNoFreeSpace'] = _DAEXCEPTIONFSTORENOFREESPACE
DESCRIPTOR.message_types_by_name['DaExceptionFstoreVebSealed'] = _DAEXCEPTIONFSTOREVEBSEALED
DESCRIPTOR.message_types_by_name['DaExceptionFstoreVebUnsealed'] = _DAEXCEPTIONFSTOREVEBUNSEALED
DESCRIPTOR.message_types_by_name['DaExceptionFstoreInvalidVeb'] = _DAEXCEPTIONFSTOREINVALIDVEB
DESCRIPTOR.message_types_by_name['DaExceptionFstoreInvalidArguments'] = _DAEXCEPTIONFSTOREINVALIDARGUMENTS
DESCRIPTOR.message_types_by_name['DaExceptionFstoreNoResources'] = _DAEXCEPTIONFSTORENORESOURCES
DESCRIPTOR.message_types_by_name['DaExceptionFstoreWriteFailed'] = _DAEXCEPTIONFSTOREWRITEFAILED
DESCRIPTOR.message_types_by_name['DaExceptionStoragePoolDown'] = _DAEXCEPTIONSTORAGEPOOLDOWN
DESCRIPTOR.message_types_by_name['DaExceptionStoragePoolOutOfSpace'] = _DAEXCEPTIONSTORAGEPOOLOUTOFSPACE
DESCRIPTOR.message_types_by_name['DaExceptionStorageStripeNotFound'] = _DAEXCEPTIONSTORAGESTRIPENOTFOUND
DESCRIPTOR.message_types_by_name['DaExceptionStorageStripeCorrupt'] = _DAEXCEPTIONSTORAGESTRIPECORRUPT
DESCRIPTOR.message_types_by_name['DaExceptionStorageStripeRebuildJobFailure'] = _DAEXCEPTIONSTORAGESTRIPEREBUILDJOBFAILURE
DESCRIPTOR.message_types_by_name['DaExceptionStorageStripeSetNotFound'] = _DAEXCEPTIONSTORAGESTRIPESETNOTFOUND
DESCRIPTOR.message_types_by_name['DaExceptionStorageStripeScrubJobFailure'] = _DAEXCEPTIONSTORAGESTRIPESCRUBJOBFAILURE
DESCRIPTOR.message_types_by_name['DaExceptionStoragePoolDriveBusy'] = _DAEXCEPTIONSTORAGEPOOLDRIVEBUSY
DESCRIPTOR.message_types_by_name['DaExceptionStorageStripeReconstMoreNeeded'] = _DAEXCEPTIONSTORAGESTRIPERECONSTMORENEEDED
DESCRIPTOR.message_types_by_name['DaExceptionTooFewDrives'] = _DAEXCEPTIONTOOFEWDRIVES
DESCRIPTOR.message_types_by_name['DaExceptionSpareCapacityExceeded'] = _DAEXCEPTIONSPARECAPACITYEXCEEDED
DESCRIPTOR.message_types_by_name['DaExceptionStoragePoolNotOK'] = _DAEXCEPTIONSTORAGEPOOLNOTOK
DESCRIPTOR.message_types_by_name['DaExceptionVdiskRdonlySnapshot'] = _DAEXCEPTIONVDISKRDONLYSNAPSHOT
DESCRIPTOR.message_types_by_name['DaExceptionVdiskMaxOpenSessions'] = _DAEXCEPTIONVDISKMAXOPENSESSIONS
DESCRIPTOR.message_types_by_name['DaExceptionVdiskInvalidArgs'] = _DAEXCEPTIONVDISKINVALIDARGS
DESCRIPTOR.message_types_by_name['DaExceptionVdiskSnapidMismatch'] = _DAEXCEPTIONVDISKSNAPIDMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionVdiskBlockKeyMismatch'] = _DAEXCEPTIONVDISKBLOCKKEYMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionVdiskBlockOffsetMismatch'] = _DAEXCEPTIONVDISKBLOCKOFFSETMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionVdiskXmapChecksumMismatch'] = _DAEXCEPTIONVDISKXMAPCHECKSUMMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionVdiskClumprefChecksumMismatch'] = _DAEXCEPTIONVDISKCLUMPREFCHECKSUMMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionVdiskMaxOpenedExceeded'] = _DAEXCEPTIONVDISKMAXOPENEDEXCEEDED
DESCRIPTOR.message_types_by_name['DaExceptionVdiskLeaseTokenAlreadyExists'] = _DAEXCEPTIONVDISKLEASETOKENALREADYEXISTS
DESCRIPTOR.message_types_by_name['DaExceptionLeaseMismatch'] = _DAEXCEPTIONLEASEMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionVdiskCpTimeout'] = _DAEXCEPTIONVDISKCPTIMEOUT
DESCRIPTOR.message_types_by_name['DaExceptionVdiskRepackFailed'] = _DAEXCEPTIONVDISKREPACKFAILED
DESCRIPTOR.message_types_by_name['DaExceptionVdiskRecipeStale'] = _DAEXCEPTIONVDISKRECIPESTALE
DESCRIPTOR.message_types_by_name['DaExceptionVdiskRecipeNotFound'] = _DAEXCEPTIONVDISKRECIPENOTFOUND
DESCRIPTOR.message_types_by_name['DaExceptionVdiskStaleServerUuid'] = _DAEXCEPTIONVDISKSTALESERVERUUID
DESCRIPTOR.message_types_by_name['DaExceptionVdiskNoWriteLease'] = _DAEXCEPTIONVDISKNOWRITELEASE
DESCRIPTOR.message_types_by_name['DaExceptionVdiskDumpMissingFpFound'] = _DAEXCEPTIONVDISKDUMPMISSINGFPFOUND
DESCRIPTOR.message_types_by_name['DaExceptionVdiskJobCanceled'] = _DAEXCEPTIONVDISKJOBCANCELED
DESCRIPTOR.message_types_by_name['DaExceptionVdiskHasWriteLease'] = _DAEXCEPTIONVDISKHASWRITELEASE
DESCRIPTOR.message_types_by_name['DaExceptionVdiskReplChecksumMismatch'] = _DAEXCEPTIONVDISKREPLCHECKSUMMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionVdiskSetLiveInvalidArg'] = _DAEXCEPTIONVDISKSETLIVEINVALIDARG
DESCRIPTOR.message_types_by_name['DaExceptionFilePerm'] = _DAEXCEPTIONFILEPERM
DESCRIPTOR.message_types_by_name['DaExceptionFileNoent'] = _DAEXCEPTIONFILENOENT
DESCRIPTOR.message_types_by_name['DaExceptionFileIo'] = _DAEXCEPTIONFILEIO
DESCRIPTOR.message_types_by_name['DaExceptionFileNxio'] = _DAEXCEPTIONFILENXIO
DESCRIPTOR.message_types_by_name['DaExceptionFileAcces'] = _DAEXCEPTIONFILEACCES
DESCRIPTOR.message_types_by_name['DaExceptionFileExist'] = _DAEXCEPTIONFILEEXIST
DESCRIPTOR.message_types_by_name['DaExceptionFileXdev'] = _DAEXCEPTIONFILEXDEV
DESCRIPTOR.message_types_by_name['DaExceptionFileNodev'] = _DAEXCEPTIONFILENODEV
DESCRIPTOR.message_types_by_name['DaExceptionFileNotdir'] = _DAEXCEPTIONFILENOTDIR
DESCRIPTOR.message_types_by_name['DaExceptionFileIsdir'] = _DAEXCEPTIONFILEISDIR
DESCRIPTOR.message_types_by_name['DaExceptionFileInval'] = _DAEXCEPTIONFILEINVAL
DESCRIPTOR.message_types_by_name['DaExceptionFileFbig'] = _DAEXCEPTIONFILEFBIG
DESCRIPTOR.message_types_by_name['DaExceptionFileRofs'] = _DAEXCEPTIONFILEROFS
DESCRIPTOR.message_types_by_name['DaExceptionFileMlink'] = _DAEXCEPTIONFILEMLINK
DESCRIPTOR.message_types_by_name['DaExceptionFileNametoolong'] = _DAEXCEPTIONFILENAMETOOLONG
DESCRIPTOR.message_types_by_name['DaExceptionFileNotempty'] = _DAEXCEPTIONFILENOTEMPTY
DESCRIPTOR.message_types_by_name['DaExceptionFileDquot'] = _DAEXCEPTIONFILEDQUOT
DESCRIPTOR.message_types_by_name['DaExceptionFileStale'] = _DAEXCEPTIONFILESTALE
DESCRIPTOR.message_types_by_name['DaExceptionFileRemote'] = _DAEXCEPTIONFILEREMOTE
DESCRIPTOR.message_types_by_name['DaExceptionFileBadhandle'] = _DAEXCEPTIONFILEBADHANDLE
DESCRIPTOR.message_types_by_name['DaExceptionFileNotSync'] = _DAEXCEPTIONFILENOTSYNC
DESCRIPTOR.message_types_by_name['DaExceptionFileBadCookie'] = _DAEXCEPTIONFILEBADCOOKIE
DESCRIPTOR.message_types_by_name['DaExceptionFileNotsupp'] = _DAEXCEPTIONFILENOTSUPP
DESCRIPTOR.message_types_by_name['DaExceptionFileToosmall'] = _DAEXCEPTIONFILETOOSMALL
DESCRIPTOR.message_types_by_name['DaExceptionFileServerfault'] = _DAEXCEPTIONFILESERVERFAULT
DESCRIPTOR.message_types_by_name['DaExceptionFileBadtype'] = _DAEXCEPTIONFILEBADTYPE
DESCRIPTOR.message_types_by_name['DaExceptionFileJukebox'] = _DAEXCEPTIONFILEJUKEBOX
DESCRIPTOR.message_types_by_name['DaExceptionFileFprintnotfound'] = _DAEXCEPTIONFILEFPRINTNOTFOUND
DESCRIPTOR.message_types_by_name['DaExceptionFileAborted'] = _DAEXCEPTIONFILEABORTED
DESCRIPTOR.message_types_by_name['DaExceptionFileBadDatastoreId'] = _DAEXCEPTIONFILEBADDATASTOREID
DESCRIPTOR.message_types_by_name['DaExceptionFileStaleData'] = _DAEXCEPTIONFILESTALEDATA
DESCRIPTOR.message_types_by_name['DaExceptionFileFrozen'] = _DAEXCEPTIONFILEFROZEN
DESCRIPTOR.message_types_by_name['DaExceptionFileBadSnode'] = _DAEXCEPTIONFILEBADSNODE
DESCRIPTOR.message_types_by_name['DaExceptionFileNamespaceBadState'] = _DAEXCEPTIONFILENAMESPACEBADSTATE
DESCRIPTOR.message_types_by_name['DaExceptionFileWrongFmgrHandler'] = _DAEXCEPTIONFILEWRONGFMGRHANDLER
DESCRIPTOR.message_types_by_name['DaExceptionFileRange'] = _DAEXCEPTIONFILERANGE
DESCRIPTOR.message_types_by_name['DaExceptionFileIntSystemCall'] = _DAEXCEPTIONFILEINTSYSTEMCALL
DESCRIPTOR.message_types_by_name['DaExceptionFileBrokenPipe'] = _DAEXCEPTIONFILEBROKENPIPE
DESCRIPTOR.message_types_by_name['DaExceptionFileWrongFormat'] = _DAEXCEPTIONFILEWRONGFORMAT
DESCRIPTOR.message_types_by_name['DaExceptionFileTooManySnaps'] = _DAEXCEPTIONFILETOOMANYSNAPS
DESCRIPTOR.message_types_by_name['DaExceptionFileStaleSession'] = _DAEXCEPTIONFILESTALESESSION
DESCRIPTOR.message_types_by_name['DaExceptionFileExpiredSession'] = _DAEXCEPTIONFILEEXPIREDSESSION
DESCRIPTOR.message_types_by_name['DaExceptionFileNameIsNull'] = _DAEXCEPTIONFILENAMEISNULL
DESCRIPTOR.message_types_by_name['DaExceptionFileNameIsEmpty'] = _DAEXCEPTIONFILENAMEISEMPTY
DESCRIPTOR.message_types_by_name['DaExceptionFileNameHasIllegalChars'] = _DAEXCEPTIONFILENAMEHASILLEGALCHARS
DESCRIPTOR.message_types_by_name['DaExceptionDatastoreDisabled'] = _DAEXCEPTIONDATASTOREDISABLED
DESCRIPTOR.message_types_by_name['DaExceptionMaxDatastoresCreated'] = _DAEXCEPTIONMAXDATASTORESCREATED
DESCRIPTOR.message_types_by_name['DaExceptionDatastoreNotFound'] = _DAEXCEPTIONDATASTORENOTFOUND
DESCRIPTOR.message_types_by_name['DaExceptionDatastoreMaxExports'] = _DAEXCEPTIONDATASTOREMAXEXPORTS
DESCRIPTOR.message_types_by_name['DaExceptionDatastoreBusy'] = _DAEXCEPTIONDATASTOREBUSY
DESCRIPTOR.message_types_by_name['DaExceptionRcacheNoResources'] = _DAEXCEPTIONRCACHENORESOURCES
DESCRIPTOR.message_types_by_name['DaExceptionRcacheRescueAborted'] = _DAEXCEPTIONRCACHERESCUEABORTED
DESCRIPTOR.message_types_by_name['DaExceptionRcacheInvalHandle'] = _DAEXCEPTIONRCACHEINVALHANDLE
DESCRIPTOR.message_types_by_name['DaExceptionRcacheRemoteClumpMiss'] = _DAEXCEPTIONRCACHEREMOTECLUMPMISS
DESCRIPTOR.message_types_by_name['DaExceptionGfpindexNeedRecovery'] = _DAEXCEPTIONGFPINDEXNEEDRECOVERY
DESCRIPTOR.message_types_by_name['DaExceptionGfpindexInsertOldContainerid'] = _DAEXCEPTIONGFPINDEXINSERTOLDCONTAINERID
DESCRIPTOR.message_types_by_name['DaExceptionGfpindexInsertSpanContainer'] = _DAEXCEPTIONGFPINDEXINSERTSPANCONTAINER
DESCRIPTOR.message_types_by_name['DaExceptionGfpindexStillRunning'] = _DAEXCEPTIONGFPINDEXSTILLRUNNING
DESCRIPTOR.message_types_by_name['DaExceptionGfpindexOutOfRange'] = _DAEXCEPTIONGFPINDEXOUTOFRANGE
DESCRIPTOR.message_types_by_name['DaExceptionGfpindexInMigrationRange'] = _DAEXCEPTIONGFPINDEXINMIGRATIONRANGE
DESCRIPTOR.message_types_by_name['DaExceptionGfpindexStaleHandle'] = _DAEXCEPTIONGFPINDEXSTALEHANDLE
DESCRIPTOR.message_types_by_name['DaExceptionLeasemgrRetry'] = _DAEXCEPTIONLEASEMGRRETRY
DESCRIPTOR.message_types_by_name['DaExceptionLeasePendingRevoke'] = _DAEXCEPTIONLEASEPENDINGREVOKE
DESCRIPTOR.message_types_by_name['DaExceptionFmgrObjectReadOnly'] = _DAEXCEPTIONFMGROBJECTREADONLY
DESCRIPTOR.message_types_by_name['DaExceptionFmgrFileClosing'] = _DAEXCEPTIONFMGRFILECLOSING
DESCRIPTOR.message_types_by_name['DaExceptionFmgrObjectNotFile'] = _DAEXCEPTIONFMGROBJECTNOTFILE
DESCRIPTOR.message_types_by_name['DaExceptionFmgrFileNotOpen'] = _DAEXCEPTIONFMGRFILENOTOPEN
DESCRIPTOR.message_types_by_name['DaExceptionFmgrDuplicateCpRequest'] = _DAEXCEPTIONFMGRDUPLICATECPREQUEST
DESCRIPTOR.message_types_by_name['DaExceptionStressLeaseMismatch'] = _DAEXCEPTIONSTRESSLEASEMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionFileStateMismatch'] = _DAEXCEPTIONFILESTATEMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionLeaseRevoke'] = _DAEXCEPTIONLEASEREVOKE
DESCRIPTOR.message_types_by_name['DaExceptionLeaseUpgradeNeeded'] = _DAEXCEPTIONLEASEUPGRADENEEDED
DESCRIPTOR.message_types_by_name['DaExceptionLeaseTimeExpired'] = _DAEXCEPTIONLEASETIMEEXPIRED
DESCRIPTOR.message_types_by_name['DaExceptionLeaseReacquireForCP'] = _DAEXCEPTIONLEASEREACQUIREFORCP
DESCRIPTOR.message_types_by_name['DaExceptionFmgrStreamNeedsFlush'] = _DAEXCEPTIONFMGRSTREAMNEEDSFLUSH
DESCRIPTOR.message_types_by_name['DaExceptionFmgrWaitForXmapStability'] = _DAEXCEPTIONFMGRWAITFORXMAPSTABILITY
DESCRIPTOR.message_types_by_name['DaExceptionFmgrStaleIO'] = _DAEXCEPTIONFMGRSTALEIO
DESCRIPTOR.message_types_by_name['DaExceptionFmgrOlderSyncForSr'] = _DAEXCEPTIONFMGROLDERSYNCFORSR
DESCRIPTOR.message_types_by_name['DaExceptionFmgrFileNeedsCloseAfterCP'] = _DAEXCEPTIONFMGRFILENEEDSCLOSEAFTERCP
DESCRIPTOR.message_types_by_name['DaExceptionFileHasLimboCmds'] = _DAEXCEPTIONFILEHASLIMBOCMDS
DESCRIPTOR.message_types_by_name['DaExceptionFmgrNoFlsResources'] = _DAEXCEPTIONFMGRNOFLSRESOURCES
DESCRIPTOR.message_types_by_name['DaExceptionFmgrNoFlsHost'] = _DAEXCEPTIONFMGRNOFLSHOST
DESCRIPTOR.message_types_by_name['DaExceptionFmgrCannotServeFlsReqs'] = _DAEXCEPTIONFMGRCANNOTSERVEFLSREQS
DESCRIPTOR.message_types_by_name['DaExceptionNvlogWriteNeedSnapFirst'] = _DAEXCEPTIONNVLOGWRITENEEDSNAPFIRST
DESCRIPTOR.message_types_by_name['DaExceptionFileAcquireLease'] = _DAEXCEPTIONFILEACQUIRELEASE
DESCRIPTOR.message_types_by_name['DaExceptionPlatform'] = _DAEXCEPTIONPLATFORM
DESCRIPTOR.message_types_by_name['DaExceptionPlatformRunTime'] = _DAEXCEPTIONPLATFORMRUNTIME
DESCRIPTOR.message_types_by_name['DaExceptionPlatformRPCTimeout'] = _DAEXCEPTIONPLATFORMRPCTIMEOUT
DESCRIPTOR.message_types_by_name['DaExceptionPlatformShutdownRequest'] = _DAEXCEPTIONPLATFORMSHUTDOWNREQUEST
DESCRIPTOR.message_types_by_name['DaExceptionPlatformReinitRequest'] = _DAEXCEPTIONPLATFORMREINITREQUEST
DESCRIPTOR.message_types_by_name['DaExceptionPlatformBeaconRequest'] = _DAEXCEPTIONPLATFORMBEACONREQUEST
DESCRIPTOR.message_types_by_name['DaExceptionPlatformBatteryDischargeRequest'] = _DAEXCEPTIONPLATFORMBATTERYDISCHARGEREQUEST
DESCRIPTOR.message_types_by_name['DaExceptionPlatformCancelBatteryDischargeRequest'] = _DAEXCEPTIONPLATFORMCANCELBATTERYDISCHARGEREQUEST
DESCRIPTOR.message_types_by_name['DaExceptionPlatformDiskPowerOnRequest'] = _DAEXCEPTIONPLATFORMDISKPOWERONREQUEST
DESCRIPTOR.message_types_by_name['DaExceptionPlatformDiskPowerOffRequest'] = _DAEXCEPTIONPLATFORMDISKPOWEROFFREQUEST
DESCRIPTOR.message_types_by_name['DaExceptionDiskMgr'] = _DAEXCEPTIONDISKMGR
DESCRIPTOR.message_types_by_name['DaExceptionNotDataDrive'] = _DAEXCEPTIONNOTDATADRIVE
DESCRIPTOR.message_types_by_name['DaExceptionInvalidDriveState'] = _DAEXCEPTIONINVALIDDRIVESTATE
DESCRIPTOR.message_types_by_name['DaExceptionDriveReinit'] = _DAEXCEPTIONDRIVEREINIT
DESCRIPTOR.message_types_by_name['DaExceptionDriveNotStarted'] = _DAEXCEPTIONDRIVENOTSTARTED
DESCRIPTOR.message_types_by_name['DaExceptionForeignDrive'] = _DAEXCEPTIONFOREIGNDRIVE
DESCRIPTOR.message_types_by_name['DaExceptionUpdateDriveState'] = _DAEXCEPTIONUPDATEDRIVESTATE
DESCRIPTOR.message_types_by_name['DaExceptionDriveNotStopped'] = _DAEXCEPTIONDRIVENOTSTOPPED
DESCRIPTOR.message_types_by_name['DaExceptionDriveUnmount'] = _DAEXCEPTIONDRIVEUNMOUNT
DESCRIPTOR.message_types_by_name['DaExceptionDriveNotFound'] = _DAEXCEPTIONDRIVENOTFOUND
DESCRIPTOR.message_types_by_name['DaExceptionInvalidUsername'] = _DAEXCEPTIONINVALIDUSERNAME
DESCRIPTOR.message_types_by_name['DaExceptionAuthenticationFailure'] = _DAEXCEPTIONAUTHENTICATIONFAILURE
DESCRIPTOR.message_types_by_name['DaExceptionEmptyPassword'] = _DAEXCEPTIONEMPTYPASSWORD
DESCRIPTOR.message_types_by_name['DaExceptionInvalidEntriesInPassword'] = _DAEXCEPTIONINVALIDENTRIESINPASSWORD
DESCRIPTOR.message_types_by_name['DaExceptionClusterMgr'] = _DAEXCEPTIONCLUSTERMGR
DESCRIPTOR.message_types_by_name['DaExceptionIncompatibleModel'] = _DAEXCEPTIONINCOMPATIBLEMODEL
DESCRIPTOR.message_types_by_name['DaExceptionNodeNotStem'] = _DAEXCEPTIONNODENOTSTEM
DESCRIPTOR.message_types_by_name['DaExceptionNodeNotMaster'] = _DAEXCEPTIONNODENOTMASTER
DESCRIPTOR.message_types_by_name['DaExceptionNoDataFloatIp'] = _DAEXCEPTIONNODATAFLOATIP
DESCRIPTOR.message_types_by_name['DaExceptionNodeUnreachable'] = _DAEXCEPTIONNODEUNREACHABLE
DESCRIPTOR.message_types_by_name['DaExceptionPlatformSyncFile'] = _DAEXCEPTIONPLATFORMSYNCFILE
DESCRIPTOR.message_types_by_name['DaExceptionPlatformDiagPing'] = _DAEXCEPTIONPLATFORMDIAGPING
DESCRIPTOR.message_types_by_name['DaExceptionControllerNotActive'] = _DAEXCEPTIONCONTROLLERNOTACTIVE
DESCRIPTOR.message_types_by_name['DaExceptionNetworkConfigExists'] = _DAEXCEPTIONNETWORKCONFIGEXISTS
DESCRIPTOR.message_types_by_name['DaExceptionNoLinkOnAnyMgmtIfaces'] = _DAEXCEPTIONNOLINKONANYMGMTIFACES
DESCRIPTOR.message_types_by_name['DaExceptionNodesLimitReached'] = _DAEXCEPTIONNODESLIMITREACHED
DESCRIPTOR.message_types_by_name['DaExceptionNodeExistsInCluster'] = _DAEXCEPTIONNODEEXISTSINCLUSTER
DESCRIPTOR.message_types_by_name['DaExceptionNodeMayBeUnreachable'] = _DAEXCEPTIONNODEMAYBEUNREACHABLE
DESCRIPTOR.message_types_by_name['DaExceptionLeaseUpgradeForRepackFailed'] = _DAEXCEPTIONLEASEUPGRADEFORREPACKFAILED
DESCRIPTOR.message_types_by_name['DaExceptionServiceUnavailable'] = _DAEXCEPTIONSERVICEUNAVAILABLE
DESCRIPTOR.message_types_by_name['DaExceptionServiceUnresponsive'] = _DAEXCEPTIONSERVICEUNRESPONSIVE
DESCRIPTOR.message_types_by_name['DaExceptionvCenterRegistrationFailed'] = _DAEXCEPTIONVCENTERREGISTRATIONFAILED
DESCRIPTOR.message_types_by_name['DaExceptionvCenterUnregistrationFailed'] = _DAEXCEPTIONVCENTERUNREGISTRATIONFAILED
DESCRIPTOR.message_types_by_name['DaExceptionvCenterRegistrationExists'] = _DAEXCEPTIONVCENTERREGISTRATIONEXISTS
DESCRIPTOR.message_types_by_name['DaExceptionvCenterUnknown'] = _DAEXCEPTIONVCENTERUNKNOWN
DESCRIPTOR.message_types_by_name['DaExceptionSupportNotFound'] = _DAEXCEPTIONSUPPORTNOTFOUND
DESCRIPTOR.message_types_by_name['DaExceptionNotAuthenticated'] = _DAEXCEPTIONNOTAUTHENTICATED
DESCRIPTOR.message_types_by_name['DaExceptionMailserverConfigurationFailed'] = _DAEXCEPTIONMAILSERVERCONFIGURATIONFAILED
DESCRIPTOR.message_types_by_name['DaExceptionHostInUse'] = _DAEXCEPTIONHOSTINUSE
DESCRIPTOR.message_types_by_name['DaExceptionHostUnknown'] = _DAEXCEPTIONHOSTUNKNOWN
DESCRIPTOR.message_types_by_name['DaExceptionInvalidEventFilterCombination'] = _DAEXCEPTIONINVALIDEVENTFILTERCOMBINATION
DESCRIPTOR.message_types_by_name['DaExceptionNovCenter'] = _DAEXCEPTIONNOVCENTER
DESCRIPTOR.message_types_by_name['DaExceptionvCenterError'] = _DAEXCEPTIONVCENTERERROR
DESCRIPTOR.message_types_by_name['DaExceptionAtLeastOneArgRequired'] = _DAEXCEPTIONATLEASTONEARGREQUIRED
DESCRIPTOR.message_types_by_name['DaExceptionMutuallyExclusiveArgs'] = _DAEXCEPTIONMUTUALLYEXCLUSIVEARGS
DESCRIPTOR.message_types_by_name['DaExceptionExactlyOneArgRequired'] = _DAEXCEPTIONEXACTLYONEARGREQUIRED
DESCRIPTOR.message_types_by_name['DaExceptionSupportNotRunning'] = _DAEXCEPTIONSUPPORTNOTRUNNING
DESCRIPTOR.message_types_by_name['DaExceptionInvalidCronExpression'] = _DAEXCEPTIONINVALIDCRONEXPRESSION
DESCRIPTOR.message_types_by_name['DaExceptionInvalidIPSubnetMask'] = _DAEXCEPTIONINVALIDIPSUBNETMASK
DESCRIPTOR.message_types_by_name['DaExceptionDropToShell'] = _DAEXCEPTIONDROPTOSHELL
DESCRIPTOR.message_types_by_name['DaExceptionAllArgsRequired'] = _DAEXCEPTIONALLARGSREQUIRED
DESCRIPTOR.message_types_by_name['DaExceptionDuplicateIP'] = _DAEXCEPTIONDUPLICATEIP
DESCRIPTOR.message_types_by_name['DaExceptionCliOperationAborted'] = _DAEXCEPTIONCLIOPERATIONABORTED
DESCRIPTOR.message_types_by_name['DaExceptionRegistrationFailure'] = _DAEXCEPTIONREGISTRATIONFAILURE
DESCRIPTOR.message_types_by_name['DaExceptionvCenterConnectionFailure'] = _DAEXCEPTIONVCENTERCONNECTIONFAILURE
DESCRIPTOR.message_types_by_name['DaExceptionvCenterConnectionMalformedUrl'] = _DAEXCEPTIONVCENTERCONNECTIONMALFORMEDURL
DESCRIPTOR.message_types_by_name['DaExceptionvCenterLoginFailure'] = _DAEXCEPTIONVCENTERLOGINFAILURE
DESCRIPTOR.message_types_by_name['DaExceptionvCenterLogoutFailure'] = _DAEXCEPTIONVCENTERLOGOUTFAILURE
DESCRIPTOR.message_types_by_name['DaExceptionvCenterSSLInitialization'] = _DAEXCEPTIONVCENTERSSLINITIALIZATION
DESCRIPTOR.message_types_by_name['DaExceptionQualifyingArgumentNotFound'] = _DAEXCEPTIONQUALIFYINGARGUMENTNOTFOUND
DESCRIPTOR.message_types_by_name['DaExceptionCloudViewRegistrationFailure'] = _DAEXCEPTIONCLOUDVIEWREGISTRATIONFAILURE
DESCRIPTOR.message_types_by_name['DaExceptionClumpstoreCancelWriterRecovery'] = _DAEXCEPTIONCLUMPSTORECANCELWRITERRECOVERY
DESCRIPTOR.message_types_by_name['DaExceptionClumpstoreNotEnabled'] = _DAEXCEPTIONCLUMPSTORENOTENABLED
DESCRIPTOR.message_types_by_name['DaExceptionDaggerSubmissionsDisabled'] = _DAEXCEPTIONDAGGERSUBMISSIONSDISABLED
DESCRIPTOR.message_types_by_name['DaExceptionDaggerJobCanceled'] = _DAEXCEPTIONDAGGERJOBCANCELED
DESCRIPTOR.message_types_by_name['DaExceptionDaggerQueueFull'] = _DAEXCEPTIONDAGGERQUEUEFULL
DESCRIPTOR.message_types_by_name['DaExceptionDaggerJobRunning'] = _DAEXCEPTIONDAGGERJOBRUNNING
DESCRIPTOR.message_types_by_name['DaExceptionAutoSupportDownloadFailed'] = _DAEXCEPTIONAUTOSUPPORTDOWNLOADFAILED
DESCRIPTOR.message_types_by_name['DaExceptionAutoSupportBundleUploadFailed'] = _DAEXCEPTIONAUTOSUPPORTBUNDLEUPLOADFAILED
DESCRIPTOR.message_types_by_name['DaExceptionAutoSupportServerConnectionFailed'] = _DAEXCEPTIONAUTOSUPPORTSERVERCONNECTIONFAILED
DESCRIPTOR.message_types_by_name['DaExceptionTriggerSupportFailed'] = _DAEXCEPTIONTRIGGERSUPPORTFAILED
DESCRIPTOR.message_types_by_name['DaExceptionDebugSupportAlreadyInProgress'] = _DAEXCEPTIONDEBUGSUPPORTALREADYINPROGRESS
DESCRIPTOR.message_types_by_name['DaExceptionDebugSupportBundleCollectionFailed'] = _DAEXCEPTIONDEBUGSUPPORTBUNDLECOLLECTIONFAILED
DESCRIPTOR.message_types_by_name['DaExceptionAutoSupportDisabled'] = _DAEXCEPTIONAUTOSUPPORTDISABLED
DESCRIPTOR.message_types_by_name['DaExceptionMonitoringInterrupted'] = _DAEXCEPTIONMONITORINGINTERRUPTED
DESCRIPTOR.message_types_by_name['DaExceptionSRDisabled'] = _DAEXCEPTIONSRDISABLED
DESCRIPTOR.message_types_by_name['DaExceptionSRInProgress'] = _DAEXCEPTIONSRINPROGRESS
DESCRIPTOR.message_types_by_name['DaExceptionRepackDisabled'] = _DAEXCEPTIONREPACKDISABLED
DESCRIPTOR.message_types_by_name['DaExceptionRepackJobFailed'] = _DAEXCEPTIONREPACKJOBFAILED
DESCRIPTOR.message_types_by_name['DaExceptionMaxRepackJobsLimitReached'] = _DAEXCEPTIONMAXREPACKJOBSLIMITREACHED
DESCRIPTOR.message_types_by_name['DaExceptionOncRpcGarbageCallhdr'] = _DAEXCEPTIONONCRPCGARBAGECALLHDR
DESCRIPTOR.message_types_by_name['DaExceptionOncRpcGarbageArgs'] = _DAEXCEPTIONONCRPCGARBAGEARGS
DESCRIPTOR.message_types_by_name['DaExceptionOncRpcProgUnavail'] = _DAEXCEPTIONONCRPCPROGUNAVAIL
DESCRIPTOR.message_types_by_name['DaExceptionOncRpcProgMismatch'] = _DAEXCEPTIONONCRPCPROGMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionOncRpcProcUnavail'] = _DAEXCEPTIONONCRPCPROCUNAVAIL
DESCRIPTOR.message_types_by_name['DaExceptionOncRpcGarbageResphdr'] = _DAEXCEPTIONONCRPCGARBAGERESPHDR
DESCRIPTOR.message_types_by_name['DaExceptionOncRpcCallRejected'] = _DAEXCEPTIONONCRPCCALLREJECTED
DESCRIPTOR.message_types_by_name['DaExceptionOncRpcSystemErr'] = _DAEXCEPTIONONCRPCSYSTEMERR
DESCRIPTOR.message_types_by_name['DaExceptionPyExc'] = _DAEXCEPTIONPYEXC
DESCRIPTOR.message_types_by_name['DaExceptionSgIo'] = _DAEXCEPTIONSGIO
DESCRIPTOR.message_types_by_name['DaExceptionScsiDeviceDisconnected'] = _DAEXCEPTIONSCSIDEVICEDISCONNECTED
DESCRIPTOR.message_types_by_name['DaExceptionUnknownSgIo'] = _DAEXCEPTIONUNKNOWNSGIO
DESCRIPTOR.message_types_by_name['DaExceptionScsiResvConflict'] = _DAEXCEPTIONSCSIRESVCONFLICT
DESCRIPTOR.message_types_by_name['DaExceptionVmDoesNotExist'] = _DAEXCEPTIONVMDOESNOTEXIST
DESCRIPTOR.message_types_by_name['DaExceptionVmParsingFailure'] = _DAEXCEPTIONVMPARSINGFAILURE
DESCRIPTOR.message_types_by_name['DaExceptionVmParsingNoKv'] = _DAEXCEPTIONVMPARSINGNOKV
DESCRIPTOR.message_types_by_name['DaExceptionVmParsingBufferTooSmall'] = _DAEXCEPTIONVMPARSINGBUFFERTOOSMALL
DESCRIPTOR.message_types_by_name['DaExceptionVmFileHasOwner'] = _DAEXCEPTIONVMFILEHASOWNER
DESCRIPTOR.message_types_by_name['DaExceptionTooManyTotalVms'] = _DAEXCEPTIONTOOMANYTOTALVMS
DESCRIPTOR.message_types_by_name['DaExceptionBadDiskFile'] = _DAEXCEPTIONBADDISKFILE
DESCRIPTOR.message_types_by_name['DaExceptionUnsupportedVirtualDiskFileFormat'] = _DAEXCEPTIONUNSUPPORTEDVIRTUALDISKFILEFORMAT
DESCRIPTOR.message_types_by_name['DaExceptionControllerNotSynced'] = _DAEXCEPTIONCONTROLLERNOTSYNCED
DESCRIPTOR.message_types_by_name['DaExceptionFailoverInProgress'] = _DAEXCEPTIONFAILOVERINPROGRESS
DESCRIPTOR.message_types_by_name['DaExceptionUpgradeInProgress'] = _DAEXCEPTIONUPGRADEINPROGRESS
DESCRIPTOR.message_types_by_name['DaExceptionPeerControllerBadNetworkConnectivity'] = _DAEXCEPTIONPEERCONTROLLERBADNETWORKCONNECTIVITY
DESCRIPTOR.message_types_by_name['DaExceptionNetworkSetupAlreadyInProgress'] = _DAEXCEPTIONNETWORKSETUPALREADYINPROGRESS
DESCRIPTOR.message_types_by_name['DaExceptionNoNetworkSetupToCommit'] = _DAEXCEPTIONNONETWORKSETUPTOCOMMIT
DESCRIPTOR.message_types_by_name['DaExceptionNetworkSetupFailed'] = _DAEXCEPTIONNETWORKSETUPFAILED
DESCRIPTOR.message_types_by_name['DaExceptionNetworkSetupRequiresCommit'] = _DAEXCEPTIONNETWORKSETUPREQUIRESCOMMIT
DESCRIPTOR.message_types_by_name['DaExceptionNvramChecksumMismatch'] = _DAEXCEPTIONNVRAMCHECKSUMMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionConfEntryIsInvalid'] = _DAEXCEPTIONCONFENTRYISINVALID
DESCRIPTOR.message_types_by_name['DaExceptionConfEntryIsLocked'] = _DAEXCEPTIONCONFENTRYISLOCKED
DESCRIPTOR.message_types_by_name['DaExceptionConfEntryOutsideRange'] = _DAEXCEPTIONCONFENTRYOUTSIDERANGE
DESCRIPTOR.message_types_by_name['DaExceptionConfModuleCookieAlreadyExists'] = _DAEXCEPTIONCONFMODULECOOKIEALREADYEXISTS
DESCRIPTOR.message_types_by_name['DaExceptionConfigVersionMismatch'] = _DAEXCEPTIONCONFIGVERSIONMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionRemoteDataRetrievalVersionUnsupported'] = _DAEXCEPTIONREMOTEDATARETRIEVALVERSIONUNSUPPORTED
DESCRIPTOR.message_types_by_name['DaExceptionRemoteOperationVersionUnsupported'] = _DAEXCEPTIONREMOTEOPERATIONVERSIONUNSUPPORTED
DESCRIPTOR.message_types_by_name['DaExceptionEonRunning'] = _DAEXCEPTIONEONRUNNING
DESCRIPTOR.message_types_by_name['DaExceptionEonNotFound'] = _DAEXCEPTIONEONNOTFOUND
DESCRIPTOR.message_types_by_name['DaExceptionEonExists'] = _DAEXCEPTIONEONEXISTS
DESCRIPTOR.message_types_by_name['DaExceptionEonLocationUnknown'] = _DAEXCEPTIONEONLOCATIONUNKNOWN
DESCRIPTOR.message_types_by_name['DaExceptionEonCanceled'] = _DAEXCEPTIONEONCANCELED
DESCRIPTOR.message_types_by_name['DaExceptionEonRetried'] = _DAEXCEPTIONEONRETRIED
DESCRIPTOR.message_types_by_name['DaExceptionEonTestError'] = _DAEXCEPTIONEONTESTERROR
DESCRIPTOR.message_types_by_name['DaExceptionEonBusy'] = _DAEXCEPTIONEONBUSY
DESCRIPTOR.message_types_by_name['DaExceptionEonGenCountRejected'] = _DAEXCEPTIONEONGENCOUNTREJECTED
DESCRIPTOR.message_types_by_name['DaExceptionContainersetNotEnabled'] = _DAEXCEPTIONCONTAINERSETNOTENABLED
DESCRIPTOR.message_types_by_name['DaExceptionReplTooManyReplicaSites'] = _DAEXCEPTIONREPLTOOMANYREPLICASITES
DESCRIPTOR.message_types_by_name['DaExceptionReplInvalidReplicaSite'] = _DAEXCEPTIONREPLINVALIDREPLICASITE
DESCRIPTOR.message_types_by_name['DaExceptionReplUnpairedReplicaSite'] = _DAEXCEPTIONREPLUNPAIREDREPLICASITE
DESCRIPTOR.message_types_by_name['DaExceptionReplDisabledReplicaSite'] = _DAEXCEPTIONREPLDISABLEDREPLICASITE
DESCRIPTOR.message_types_by_name['DaExceptionReplRevokedReplicaSite'] = _DAEXCEPTIONREPLREVOKEDREPLICASITE
DESCRIPTOR.message_types_by_name['DaExceptionReplUnavailableReplicaSite'] = _DAEXCEPTIONREPLUNAVAILABLEREPLICASITE
DESCRIPTOR.message_types_by_name['DaExceptionReplLocalNameAlreadyInUse'] = _DAEXCEPTIONREPLLOCALNAMEALREADYINUSE
DESCRIPTOR.message_types_by_name['DaExceptionReplIpAddressAlreadyInUse'] = _DAEXCEPTIONREPLIPADDRESSALREADYINUSE
DESCRIPTOR.message_types_by_name['DaExceptionReplIpAddressChangeFailure'] = _DAEXCEPTIONREPLIPADDRESSCHANGEFAILURE
DESCRIPTOR.message_types_by_name['DaExceptionReplSrcFeUnavailable'] = _DAEXCEPTIONREPLSRCFEUNAVAILABLE
DESCRIPTOR.message_types_by_name['DaExceptionReplDstFeUnavailable'] = _DAEXCEPTIONREPLDSTFEUNAVAILABLE
DESCRIPTOR.message_types_by_name['DaExceptionReplRemoteScrollSvcUnavailable'] = _DAEXCEPTIONREPLREMOTESCROLLSVCUNAVAILABLE
DESCRIPTOR.message_types_by_name['DaExceptionReplRemoteScrollStopped'] = _DAEXCEPTIONREPLREMOTESCROLLSTOPPED
DESCRIPTOR.message_types_by_name['DaExceptionReplInShutdown'] = _DAEXCEPTIONREPLINSHUTDOWN
DESCRIPTOR.message_types_by_name['DaExceptionReplDstUnknownTask'] = _DAEXCEPTIONREPLDSTUNKNOWNTASK
DESCRIPTOR.message_types_by_name['DaExceptionReplDstHasSnap'] = _DAEXCEPTIONREPLDSTHASSNAP
DESCRIPTOR.message_types_by_name['DaExceptionReplRemoteScrollDropped'] = _DAEXCEPTIONREPLREMOTESCROLLDROPPED
DESCRIPTOR.message_types_by_name['DaExceptionReplNetworkCheckFailed'] = _DAEXCEPTIONREPLNETWORKCHECKFAILED
DESCRIPTOR.message_types_by_name['DaExceptionReplVersionMismatch'] = _DAEXCEPTIONREPLVERSIONMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionReplBusyReplicaSite'] = _DAEXCEPTIONREPLBUSYREPLICASITE
DESCRIPTOR.message_types_by_name['DaExceptionReplTaskUserCancel'] = _DAEXCEPTIONREPLTASKUSERCANCEL
DESCRIPTOR.message_types_by_name['DaExceptionReplSnapUnavailable'] = _DAEXCEPTIONREPLSNAPUNAVAILABLE
DESCRIPTOR.message_types_by_name['DaExceptionReplInvalidSiteAddress'] = _DAEXCEPTIONREPLINVALIDSITEADDRESS
DESCRIPTOR.message_types_by_name['DaExceptionReplRemoveReplicaSiteFailed'] = _DAEXCEPTIONREPLREMOVEREPLICASITEFAILED
DESCRIPTOR.message_types_by_name['DaExceptionReplRofs'] = _DAEXCEPTIONREPLROFS
DESCRIPTOR.message_types_by_name['DaExceptionReplRetryFromDstReplicaSite'] = _DAEXCEPTIONREPLRETRYFROMDSTREPLICASITE
DESCRIPTOR.message_types_by_name['DaExceptionReplCriticalSrcReplicaSite'] = _DAEXCEPTIONREPLCRITICALSRCREPLICASITE
DESCRIPTOR.message_types_by_name['DaExceptionReplCriticalDstReplicaSite'] = _DAEXCEPTIONREPLCRITICALDSTREPLICASITE
DESCRIPTOR.message_types_by_name['DaExceptionReplEncryptionChangeRollbackError'] = _DAEXCEPTIONREPLENCRYPTIONCHANGEROLLBACKERROR
DESCRIPTOR.message_types_by_name['DaExceptionReplTaskFailure'] = _DAEXCEPTIONREPLTASKFAILURE
DESCRIPTOR.message_types_by_name['DaExceptionReplDstNoSpace'] = _DAEXCEPTIONREPLDSTNOSPACE
DESCRIPTOR.message_types_by_name['DaExceptionReplSelfReplicationUnsupported'] = _DAEXCEPTIONREPLSELFREPLICATIONUNSUPPORTED
DESCRIPTOR.message_types_by_name['DaExceptionReplApplyDiffFailed'] = _DAEXCEPTIONREPLAPPLYDIFFFAILED
DESCRIPTOR.message_types_by_name['DaExceptionReplTaskRemoved'] = _DAEXCEPTIONREPLTASKREMOVED
DESCRIPTOR.message_types_by_name['DaExceptionReplBandwidthLimitChangeError'] = _DAEXCEPTIONREPLBANDWIDTHLIMITCHANGEERROR
DESCRIPTOR.message_types_by_name['DaExceptionReplSourceSwitchedTask'] = _DAEXCEPTIONREPLSOURCESWITCHEDTASK
DESCRIPTOR.message_types_by_name['DaExceptionReplAuthenticationFailureDstReplicaSite'] = _DAEXCEPTIONREPLAUTHENTICATIONFAILUREDSTREPLICASITE
DESCRIPTOR.message_types_by_name['DaExceptionReplDstRofs'] = _DAEXCEPTIONREPLDSTROFS
DESCRIPTOR.message_types_by_name['DaExceptionReplRegistrationFailureDstReplicaSite'] = _DAEXCEPTIONREPLREGISTRATIONFAILUREDSTREPLICASITE
DESCRIPTOR.message_types_by_name['DaExceptionReplShelveTimeout'] = _DAEXCEPTIONREPLSHELVETIMEOUT
DESCRIPTOR.message_types_by_name['DaExceptionReplSnapIncompatible'] = _DAEXCEPTIONREPLSNAPINCOMPATIBLE
DESCRIPTOR.message_types_by_name['DaExceptionReplTooManyTasks'] = _DAEXCEPTIONREPLTOOMANYTASKS
DESCRIPTOR.message_types_by_name['DaExceptionReplGenericStress'] = _DAEXCEPTIONREPLGENERICSTRESS
DESCRIPTOR.message_types_by_name['DaExceptionSnapTooManyPgs'] = _DAEXCEPTIONSNAPTOOMANYPGS
DESCRIPTOR.message_types_by_name['DaExceptionSnapTooManySnapsInPg'] = _DAEXCEPTIONSNAPTOOMANYSNAPSINPG
DESCRIPTOR.message_types_by_name['DaExceptionSnapsTooManyFilesInSnap'] = _DAEXCEPTIONSNAPSTOOMANYFILESINSNAP
DESCRIPTOR.message_types_by_name['DaExceptionSnapIsSealed'] = _DAEXCEPTIONSNAPISSEALED
DESCRIPTOR.message_types_by_name['DaExceptionSnapIsEmpty'] = _DAEXCEPTIONSNAPISEMPTY
DESCRIPTOR.message_types_by_name['DaExceptionSnapstoreRofs'] = _DAEXCEPTIONSNAPSTOREROFS
DESCRIPTOR.message_types_by_name['DaExceptionPGPolicyTooManyElems'] = _DAEXCEPTIONPGPOLICYTOOMANYELEMS
DESCRIPTOR.message_types_by_name['DaExceptionPGPolicyTooBig'] = _DAEXCEPTIONPGPOLICYTOOBIG
DESCRIPTOR.message_types_by_name['DaExceptionTooManyTasks'] = _DAEXCEPTIONTOOMANYTASKS
DESCRIPTOR.message_types_by_name['DaExceptionPGSnapFailed'] = _DAEXCEPTIONPGSNAPFAILED
DESCRIPTOR.message_types_by_name['DaExceptionTooManyACVmsInSnap'] = _DAEXCEPTIONTOOMANYACVMSINSNAP
DESCRIPTOR.message_types_by_name['DaExceptionACVMAgentNotFound'] = _DAEXCEPTIONACVMAGENTNOTFOUND
DESCRIPTOR.message_types_by_name['DaExceptionACVMAgentUnreachable'] = _DAEXCEPTIONACVMAGENTUNREACHABLE
DESCRIPTOR.message_types_by_name['DaExceptionACVMQuiesceTimeout'] = _DAEXCEPTIONACVMQUIESCETIMEOUT
DESCRIPTOR.message_types_by_name['DaExceptionACVMQuiesceError'] = _DAEXCEPTIONACVMQUIESCEERROR
DESCRIPTOR.message_types_by_name['DaExceptionPGPolicyTooManyACElems'] = _DAEXCEPTIONPGPOLICYTOOMANYACELEMS
DESCRIPTOR.message_types_by_name['DaExceptionSnapNotAppConsistent'] = _DAEXCEPTIONSNAPNOTAPPCONSISTENT
DESCRIPTOR.message_types_by_name['DaExceptionSnapNotCreatedLocally'] = _DAEXCEPTIONSNAPNOTCREATEDLOCALLY
DESCRIPTOR.message_types_by_name['DaExceptionPGPolicyScheduleNameTooLong'] = _DAEXCEPTIONPGPOLICYSCHEDULENAMETOOLONG
DESCRIPTOR.message_types_by_name['DaExceptionDatastoreNotMounted'] = _DAEXCEPTIONDATASTORENOTMOUNTED
DESCRIPTOR.message_types_by_name['DaExceptionReplaceVSSMetaFailed'] = _DAEXCEPTIONREPLACEVSSMETAFAILED
DESCRIPTOR.message_types_by_name['DaExceptionBasicdbNotOpen'] = _DAEXCEPTIONBASICDBNOTOPEN
DESCRIPTOR.message_types_by_name['DaExceptionBasicdbRequiresXid'] = _DAEXCEPTIONBASICDBREQUIRESXID
DESCRIPTOR.message_types_by_name['DaExceptionBasicdbInvalidXid'] = _DAEXCEPTIONBASICDBINVALIDXID
DESCRIPTOR.message_types_by_name['DaExceptionBasicdbRecordNotFound'] = _DAEXCEPTIONBASICDBRECORDNOTFOUND
DESCRIPTOR.message_types_by_name['DaExceptionBasicdbRecordExists'] = _DAEXCEPTIONBASICDBRECORDEXISTS
DESCRIPTOR.message_types_by_name['DaExceptionBasicdbXactionInuse'] = _DAEXCEPTIONBASICDBXACTIONINUSE
DESCRIPTOR.message_types_by_name['DaExceptionEncryptionIsDisabled'] = _DAEXCEPTIONENCRYPTIONISDISABLED
DESCRIPTOR.message_types_by_name['DaExceptionEncryptionIsEnabled'] = _DAEXCEPTIONENCRYPTIONISENABLED
DESCRIPTOR.message_types_by_name['DaExceptionEncryptionSystemIsLocked'] = _DAEXCEPTIONENCRYPTIONSYSTEMISLOCKED
DESCRIPTOR.message_types_by_name['DaExceptionEncryptionSystemIsUnlocked'] = _DAEXCEPTIONENCRYPTIONSYSTEMISUNLOCKED
DESCRIPTOR.message_types_by_name['DaExceptionEncryptionSetStartupModeFailedToDeleteOldKey'] = _DAEXCEPTIONENCRYPTIONSETSTARTUPMODEFAILEDTODELETEOLDKEY
DESCRIPTOR.message_types_by_name['DaExceptionEncryptionSetStartupModeFailedToSaveNewKey'] = _DAEXCEPTIONENCRYPTIONSETSTARTUPMODEFAILEDTOSAVENEWKEY
DESCRIPTOR.message_types_by_name['DaExceptionEncryptionPasswordMismatch'] = _DAEXCEPTIONENCRYPTIONPASSWORDMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionEncryptionPasswordNotCompliant'] = _DAEXCEPTIONENCRYPTIONPASSWORDNOTCOMPLIANT
DESCRIPTOR.message_types_by_name['DaExceptionEncryptionPasswordTooShort'] = _DAEXCEPTIONENCRYPTIONPASSWORDTOOSHORT
DESCRIPTOR.message_types_by_name['DaExceptionEncryptionPasswordIllegalSpaces'] = _DAEXCEPTIONENCRYPTIONPASSWORDILLEGALSPACES
DESCRIPTOR.message_types_by_name['DaExceptionEncryptionEnabledStartupModeLocked'] = _DAEXCEPTIONENCRYPTIONENABLEDSTARTUPMODELOCKED
DESCRIPTOR.message_types_by_name['DaExceptionEncryptionSetPasswordSuccessStartupLocked'] = _DAEXCEPTIONENCRYPTIONSETPASSWORDSUCCESSSTARTUPLOCKED
DESCRIPTOR.message_types_by_name['DaExceptionEncryptionSwitchToFipsFailed'] = _DAEXCEPTIONENCRYPTIONSWITCHTOFIPSFAILED
DESCRIPTOR.message_types_by_name['DaExceptionEncryptionSwitchFromFipsFailed'] = _DAEXCEPTIONENCRYPTIONSWITCHFROMFIPSFAILED
DESCRIPTOR.message_types_by_name['DaExceptionEncryptionInFipsApprovedMode'] = _DAEXCEPTIONENCRYPTIONINFIPSAPPROVEDMODE
DESCRIPTOR.message_types_by_name['DaExceptionEncryptionInFipsValidatedMode'] = _DAEXCEPTIONENCRYPTIONINFIPSVALIDATEDMODE
DESCRIPTOR.message_types_by_name['DaExceptionRemoteScrollNotFound'] = _DAEXCEPTIONREMOTESCROLLNOTFOUND
DESCRIPTOR.message_types_by_name['DaExceptionRemoteScrollVersionMismatch'] = _DAEXCEPTIONREMOTESCROLLVERSIONMISMATCH
DESCRIPTOR.message_types_by_name['DaExceptionVmIdNotUnique'] = _DAEXCEPTIONVMIDNOTUNIQUE
DESCRIPTOR.message_types_by_name['DaExceptionVmxPathConflict'] = _DAEXCEPTIONVMXPATHCONFLICT
DESCRIPTOR.message_types_by_name['DaExceptionVmIsPoweredOn'] = _DAEXCEPTIONVMISPOWEREDON
DESCRIPTOR.message_types_by_name['DaExceptionVmDirConflict'] = _DAEXCEPTIONVMDIRCONFLICT
DESCRIPTOR.message_types_by_name['DaExceptionVmConfigsUpdateFailed'] = _DAEXCEPTIONVMCONFIGSUPDATEFAILED
DESCRIPTOR.message_types_by_name['DaExceptionValidCloneNameNotFound'] = _DAEXCEPTIONVALIDCLONENAMENOTFOUND
DESCRIPTOR.message_types_by_name['DaExceptionVmExists'] = _DAEXCEPTIONVMEXISTS
DESCRIPTOR.message_types_by_name['DaExceptionFileInUse'] = _DAEXCEPTIONFILEINUSE
DESCRIPTOR.message_types_by_name['DaExceptionVmInUse'] = _DAEXCEPTIONVMINUSE
DESCRIPTOR.message_types_by_name['DaExceptionVmxFileConflict'] = _DAEXCEPTIONVMXFILECONFLICT
DESCRIPTOR.message_types_by_name['DaExceptionInvalidVirtualDisk'] = _DAEXCEPTIONINVALIDVIRTUALDISK
DESCRIPTOR.message_types_by_name['DaExceptionVmParsingError'] = _DAEXCEPTIONVMPARSINGERROR
DESCRIPTOR.message_types_by_name['DaExceptionLicenseInvalid'] = _DAEXCEPTIONLICENSEINVALID
DESCRIPTOR.message_types_by_name['DaExceptionVssError'] = _DAEXCEPTIONVSSERROR
DESCRIPTOR.message_types_by_name['DaExceptionAccessKeyInvalid'] = _DAEXCEPTIONACCESSKEYINVALID
DESCRIPTOR.message_types_by_name['DaExceptionFeatureUnavailble'] = _DAEXCEPTIONFEATUREUNAVAILBLE
DESCRIPTOR.message_types_by_name['DaExceptionSoftwareNotSetup'] = _DAEXCEPTIONSOFTWARENOTSETUP
DESCRIPTOR.message_types_by_name['DaExceptionCloudDvxIncompatible'] = _DAEXCEPTIONCLOUDDVXINCOMPATIBLE
DESCRIPTOR.message_types_by_name['DaExceptionAwsUnresponsive'] = _DAEXCEPTIONAWSUNRESPONSIVE
DESCRIPTOR.message_types_by_name['DaExceptionAwsError'] = _DAEXCEPTIONAWSERROR
DESCRIPTOR.message_types_by_name['DaExceptionCloudDvxInstanceDown'] = _DAEXCEPTIONCLOUDDVXINSTANCEDOWN
DESCRIPTOR.message_types_by_name['DaExceptionSystemAlreadyManaged'] = _DAEXCEPTIONSYSTEMALREADYMANAGED
DESCRIPTOR.message_types_by_name['DaExceptionSystemNotManaged'] = _DAEXCEPTIONSYSTEMNOTMANAGED
DESCRIPTOR.message_types_by_name['DaExceptionAccessKeyRequired'] = _DAEXCEPTIONACCESSKEYREQUIRED
DESCRIPTOR.message_types_by_name['DaExceptionCloudDvxTooManySrcSites'] = _DAEXCEPTIONCLOUDDVXTOOMANYSRCSITES
DESCRIPTOR.message_types_by_name['DaExceptionGuestFsInvalidCookie'] = _DAEXCEPTIONGUESTFSINVALIDCOOKIE
DESCRIPTOR.message_types_by_name['DaExceptionGuestFsErrParse'] = _DAEXCEPTIONGUESTFSERRPARSE
DESCRIPTOR.message_types_by_name['DaExceptionGuestFsErrOpen'] = _DAEXCEPTIONGUESTFSERROPEN
DESCRIPTOR.message_types_by_name['DaExceptionGuestFsErrReaddir'] = _DAEXCEPTIONGUESTFSERRREADDIR
DESCRIPTOR.message_types_by_name['DaExceptionGuestFsErrRead'] = _DAEXCEPTIONGUESTFSERRREAD
DESCRIPTOR.message_types_by_name['DaExceptionGuestFsErrWrite'] = _DAEXCEPTIONGUESTFSERRWRITE
DESCRIPTOR.message_types_by_name['DaExceptionGuestFsUnsupportedVolume'] = _DAEXCEPTIONGUESTFSUNSUPPORTEDVOLUME
DESCRIPTOR.message_types_by_name['DaExceptionIrrInternal'] = _DAEXCEPTIONIRRINTERNAL
DESCRIPTOR.message_types_by_name['DaExceptionIllegalPlanOperation'] = _DAEXCEPTIONILLEGALPLANOPERATION
DESCRIPTOR.message_types_by_name['DaExceptionArchiveEof'] = _DAEXCEPTIONARCHIVEEOF
DESCRIPTOR.message_types_by_name['DaExceptionArchiveRetry'] = _DAEXCEPTIONARCHIVERETRY
DESCRIPTOR.message_types_by_name['DaExceptionArchiveWarn'] = _DAEXCEPTIONARCHIVEWARN
DESCRIPTOR.message_types_by_name['DaExceptionArchiveFailed'] = _DAEXCEPTIONARCHIVEFAILED
DESCRIPTOR.message_types_by_name['DaExceptionArchiveFatal'] = _DAEXCEPTIONARCHIVEFATAL
DESCRIPTOR.message_types_by_name['DaExceptionExportToOvfFailed'] = _DAEXCEPTIONEXPORTTOOVFFAILED
DESCRIPTOR.message_types_by_name['DaExceptionInvalidSiteOp'] = _DAEXCEPTIONINVALIDSITEOP
DESCRIPTOR.message_types_by_name['DaExceptionSrmHealthCritical'] = _DAEXCEPTIONSRMHEALTHCRITICAL


class DaExceptionBase(DaException):
    DESCRIPTOR = _DAEXCEPTIONBASE
    ERROR_CODE = 1000
    BASE_CLASS = None
EXCEPTIONS_BY_ERROR_CODE[1000] = DaExceptionBase
DaExceptionBaseMessage = _reflection.GeneratedProtocolMessageType('DaExceptionBaseMessage', (_message.Message,), dict(
    DESCRIPTOR = _DAEXCEPTIONBASE,
    __module__ = 'Exception_pb2'
    # @@protoc_insertion_point(class_scope:da.core.DaExceptionBase)
    ))
_sym_db.RegisterMessage(DaExceptionBaseMessage)


class DaExceptionChecked(DaExceptionBase):
    DESCRIPTOR = _DAEXCEPTIONCHECKED
    ERROR_CODE = 1001
    BASE_CLASS = DaExceptionBase
EXCEPTIONS_BY_ERROR_CODE[1001] = DaExceptionChecked


class DaExceptionUnchecked(DaExceptionBase):
    DESCRIPTOR = _DAEXCEPTIONUNCHECKED
    ERROR_CODE = 1002
    BASE_CLASS = DaExceptionBase
EXCEPTIONS_BY_ERROR_CODE[1002] = DaExceptionUnchecked


class DaExceptionLocalOnly(DaExceptionBase):
    DESCRIPTOR = _DAEXCEPTIONLOCALONLY
    ERROR_CODE = 1003
    BASE_CLASS = DaExceptionBase
EXCEPTIONS_BY_ERROR_CODE[1003] = DaExceptionLocalOnly


class DaExceptionNotFound(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONNOTFOUND
    ERROR_CODE = 1100
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1100] = DaExceptionNotFound


class DaExceptionObjectNotFound(DaExceptionNotFound):
    DESCRIPTOR = _DAEXCEPTIONOBJECTNOTFOUND
    ERROR_CODE = 1101
    BASE_CLASS = DaExceptionNotFound
EXCEPTIONS_BY_ERROR_CODE[1101] = DaExceptionObjectNotFound


class DaExceptionInterrupted(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONINTERRUPTED
    ERROR_CODE = 1102
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1102] = DaExceptionInterrupted


class DaExceptionIo(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONIO
    ERROR_CODE = 1103
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1103] = DaExceptionIo


class DaExceptionWouldBlock(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONWOULDBLOCK
    ERROR_CODE = 1104
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1104] = DaExceptionWouldBlock


class DaExceptionOutOfMemory(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONOUTOFMEMORY
    ERROR_CODE = 1105
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1105] = DaExceptionOutOfMemory


class DaExceptionBusy(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONBUSY
    ERROR_CODE = 1106
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1106] = DaExceptionBusy


class DaExceptionAlreadyExists(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONALREADYEXISTS
    ERROR_CODE = 1107
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1107] = DaExceptionAlreadyExists


class DaExceptionInvalidArgument(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONINVALIDARGUMENT
    ERROR_CODE = 1108
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1108] = DaExceptionInvalidArgument


class DaExceptionNoSpace(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONNOSPACE
    ERROR_CODE = 1109
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1109] = DaExceptionNoSpace


class DaExceptionUnderflow(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONUNDERFLOW
    ERROR_CODE = 1110
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1110] = DaExceptionUnderflow


class DaExceptionOverflow(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONOVERFLOW
    ERROR_CODE = 1111
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1111] = DaExceptionOverflow


class DaExceptionAddressInUse(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONADDRESSINUSE
    ERROR_CODE = 1112
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1112] = DaExceptionAddressInUse


class DaExceptionAddressNotAvailable(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONADDRESSNOTAVAILABLE
    ERROR_CODE = 1113
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1113] = DaExceptionAddressNotAvailable


class DaExceptionConnectionDown(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONCONNECTIONDOWN
    ERROR_CODE = 1114
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1114] = DaExceptionConnectionDown


class DaExceptionTooManyConnections(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONTOOMANYCONNECTIONS
    ERROR_CODE = 1115
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1115] = DaExceptionTooManyConnections


class DaExceptionConnectFailed(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONCONNECTFAILED
    ERROR_CODE = 1116
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1116] = DaExceptionConnectFailed


class DaExceptionTimeout(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONTIMEOUT
    ERROR_CODE = 1117
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1117] = DaExceptionTimeout


class DaExceptionInternal(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONINTERNAL
    ERROR_CODE = 1118
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1118] = DaExceptionInternal


class DaExceptionCorruption(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCORRUPTION
    ERROR_CODE = 1119
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1119] = DaExceptionCorruption


class DaExceptionFileOpenFailure(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONFILEOPENFAILURE
    ERROR_CODE = 1120
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1120] = DaExceptionFileOpenFailure


class DaExceptionTooManyPinned(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONTOOMANYPINNED
    ERROR_CODE = 1121
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1121] = DaExceptionTooManyPinned


class DaExceptionFailure(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONFAILURE
    ERROR_CODE = 1122
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1122] = DaExceptionFailure


class DaExceptionInvalidOperation(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONINVALIDOPERATION
    ERROR_CODE = 1123
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1123] = DaExceptionInvalidOperation


class DaExceptionArgumentOutOfRange(DaExceptionInvalidArgument):
    DESCRIPTOR = _DAEXCEPTIONARGUMENTOUTOFRANGE
    ERROR_CODE = 1124
    BASE_CLASS = DaExceptionInvalidArgument
EXCEPTIONS_BY_ERROR_CODE[1124] = DaExceptionArgumentOutOfRange


class DaExceptionTryAgain(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONTRYAGAIN
    ERROR_CODE = 1125
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1125] = DaExceptionTryAgain


class DaExceptionVersionUnsupported(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVERSIONUNSUPPORTED
    ERROR_CODE = 1126
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1126] = DaExceptionVersionUnsupported


class DaExceptionIhdrMismatch(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONIHDRMISMATCH
    ERROR_CODE = 1127
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1127] = DaExceptionIhdrMismatch


class DaExceptionHostRpcFailure(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONHOSTRPCFAILURE
    ERROR_CODE = 1128
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1128] = DaExceptionHostRpcFailure


class DaExceptionShuttingDown(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONSHUTTINGDOWN
    ERROR_CODE = 1129
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1129] = DaExceptionShuttingDown


class DaExceptionUnexpectedError(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONUNEXPECTEDERROR
    ERROR_CODE = 1130
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1130] = DaExceptionUnexpectedError


class DaExceptionFPMismatch(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONFPMISMATCH
    ERROR_CODE = 1131
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1131] = DaExceptionFPMismatch


class DaExceptionBindToInterfaceFailed(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONBINDTOINTERFACEFAILED
    ERROR_CODE = 1132
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1132] = DaExceptionBindToInterfaceFailed


class DaExceptionNameTooLong(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONNAMETOOLONG
    ERROR_CODE = 1133
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1133] = DaExceptionNameTooLong


class DaExceptionIterDone(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONITERDONE
    ERROR_CODE = 1134
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1134] = DaExceptionIterDone


class DaExceptionNoIndirectFn(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONNOINDIRECTFN
    ERROR_CODE = 1135
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1135] = DaExceptionNoIndirectFn


class DaExceptionOpCanceled(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONOPCANCELED
    ERROR_CODE = 1136
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1136] = DaExceptionOpCanceled


class DaExceptionOperationUnsupported(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONOPERATIONUNSUPPORTED
    ERROR_CODE = 1137
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1137] = DaExceptionOperationUnsupported


class DaExceptionSendWouldBlock(DaExceptionWouldBlock):
    DESCRIPTOR = _DAEXCEPTIONSENDWOULDBLOCK
    ERROR_CODE = 1138
    BASE_CLASS = DaExceptionWouldBlock
EXCEPTIONS_BY_ERROR_CODE[1138] = DaExceptionSendWouldBlock


class DaExceptionRecvWouldBlock(DaExceptionWouldBlock):
    DESCRIPTOR = _DAEXCEPTIONRECVWOULDBLOCK
    ERROR_CODE = 1139
    BASE_CLASS = DaExceptionWouldBlock
EXCEPTIONS_BY_ERROR_CODE[1139] = DaExceptionRecvWouldBlock


class DaExceptionCompressFailure(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCOMPRESSFAILURE
    ERROR_CODE = 1200
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1200] = DaExceptionCompressFailure


class DaExceptionUncompressFailure(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONUNCOMPRESSFAILURE
    ERROR_CODE = 1201
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1201] = DaExceptionUncompressFailure


class DaExceptionRegistryNodeExists(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREGISTRYNODEEXISTS
    ERROR_CODE = 1300
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1300] = DaExceptionRegistryNodeExists


class DaExceptionRegistryNoNode(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREGISTRYNONODE
    ERROR_CODE = 1301
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1301] = DaExceptionRegistryNoNode


class DaExceptionRegistryConnectionLoss(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREGISTRYCONNECTIONLOSS
    ERROR_CODE = 1302
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1302] = DaExceptionRegistryConnectionLoss


class DaExceptionRegistrySessionExpired(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREGISTRYSESSIONEXPIRED
    ERROR_CODE = 1303
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1303] = DaExceptionRegistrySessionExpired


class DaExceptionRegistryConnectionTimeout(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREGISTRYCONNECTIONTIMEOUT
    ERROR_CODE = 1304
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1304] = DaExceptionRegistryConnectionTimeout


class DaExceptionRegistryOperationTimeout(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREGISTRYOPERATIONTIMEOUT
    ERROR_CODE = 1305
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1305] = DaExceptionRegistryOperationTimeout


class DaExceptionRegistryBadVersion(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREGISTRYBADVERSION
    ERROR_CODE = 1306
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1306] = DaExceptionRegistryBadVersion


class DaExceptionRegistryEmptyNode(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREGISTRYEMPTYNODE
    ERROR_CODE = 1308
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1308] = DaExceptionRegistryEmptyNode


class DaExceptionRegistryIpMismatch(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREGISTRYIPMISMATCH
    ERROR_CODE = 1309
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1309] = DaExceptionRegistryIpMismatch


class DaExceptionRegistryDvxidMismatch(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREGISTRYDVXIDMISMATCH
    ERROR_CODE = 1310
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1310] = DaExceptionRegistryDvxidMismatch


class DaExceptionRpcClientPanic(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONRPCCLIENTPANIC
    ERROR_CODE = 1400
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1400] = DaExceptionRpcClientPanic


class DaExceptionRpcDecodeFailed(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONRPCDECODEFAILED
    ERROR_CODE = 1401
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1401] = DaExceptionRpcDecodeFailed


class DaExceptionRpcServiceNotHere(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONRPCSERVICENOTHERE
    ERROR_CODE = 1402
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1402] = DaExceptionRpcServiceNotHere


class DaExceptionRpcServiceUnknown(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONRPCSERVICEUNKNOWN
    ERROR_CODE = 1403
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1403] = DaExceptionRpcServiceUnknown


class DaExceptionRpcMethodUnknown(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONRPCMETHODUNKNOWN
    ERROR_CODE = 1404
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1404] = DaExceptionRpcMethodUnknown


class DaExceptionRpcAsyncResponse(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONRPCASYNCRESPONSE
    ERROR_CODE = 1405
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1405] = DaExceptionRpcAsyncResponse


class DaExceptionRpcQueueFull(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONRPCQUEUEFULL
    ERROR_CODE = 1406
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1406] = DaExceptionRpcQueueFull


class DaExceptionRpcRequestFenced(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONRPCREQUESTFENCED
    ERROR_CODE = 1407
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1407] = DaExceptionRpcRequestFenced


class DaExceptionRpcInvalidHandshake(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONRPCINVALIDHANDSHAKE
    ERROR_CODE = 1408
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1408] = DaExceptionRpcInvalidHandshake


class DaExceptionRpcVersionMismatch(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONRPCVERSIONMISMATCH
    ERROR_CODE = 1409
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1409] = DaExceptionRpcVersionMismatch


class DaExceptionRpcProtocolUnsupported(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONRPCPROTOCOLUNSUPPORTED
    ERROR_CODE = 1410
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1410] = DaExceptionRpcProtocolUnsupported


class DaExceptionRpcTransportUnsupported(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONRPCTRANSPORTUNSUPPORTED
    ERROR_CODE = 1411
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1411] = DaExceptionRpcTransportUnsupported


class DaExceptionRpcRequestRejected(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONRPCREQUESTREJECTED
    ERROR_CODE = 1412
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1412] = DaExceptionRpcRequestRejected


class DaExceptionRpcClientRetry(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONRPCCLIENTRETRY
    ERROR_CODE = 1413
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1413] = DaExceptionRpcClientRetry


class DaExceptionRpcClientChecksumRetry(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONRPCCLIENTCHECKSUMRETRY
    ERROR_CODE = 1414
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1414] = DaExceptionRpcClientChecksumRetry


class DaExceptionRpcTopologyMismatch(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONRPCTOPOLOGYMISMATCH
    ERROR_CODE = 1415
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1415] = DaExceptionRpcTopologyMismatch


class DaExceptionRpcTimeout(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONRPCTIMEOUT
    ERROR_CODE = 1416
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1416] = DaExceptionRpcTimeout


class DaExceptionRpcDvxIdMismatch(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONRPCDVXIDMISMATCH
    ERROR_CODE = 1417
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[1417] = DaExceptionRpcDvxIdMismatch


class DaExceptionIoOpen(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONIOOPEN
    ERROR_CODE = 1500
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1500] = DaExceptionIoOpen


class DaExceptionIoClose(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONIOCLOSE
    ERROR_CODE = 1501
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1501] = DaExceptionIoClose


class DaExceptionIoCreateIoctxt(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONIOCREATEIOCTXT
    ERROR_CODE = 1502
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1502] = DaExceptionIoCreateIoctxt


class DaExceptionIoDestroyIoctxt(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONIODESTROYIOCTXT
    ERROR_CODE = 1503
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1503] = DaExceptionIoDestroyIoctxt


class DaExceptionIoCreateIocb(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONIOCREATEIOCB
    ERROR_CODE = 1504
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1504] = DaExceptionIoCreateIocb


class DaExceptionIoSubmit(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONIOSUBMIT
    ERROR_CODE = 1505
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1505] = DaExceptionIoSubmit


class DaExceptionIoWaitForCompletion(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONIOWAITFORCOMPLETION
    ERROR_CODE = 1506
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1506] = DaExceptionIoWaitForCompletion


class DaExceptionIoNoResources(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONIONORESOURCES
    ERROR_CODE = 1507
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1507] = DaExceptionIoNoResources


class DaExceptionIoEmptyQueue(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONIOEMPTYQUEUE
    ERROR_CODE = 1508
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1508] = DaExceptionIoEmptyQueue


class DaExceptionIoIncomplete(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONIOINCOMPLETE
    ERROR_CODE = 1509
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1509] = DaExceptionIoIncomplete


class DaExceptionIoTimeout(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONIOTIMEOUT
    ERROR_CODE = 1510
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1510] = DaExceptionIoTimeout


class DaExceptionIoCreateCtrlBlk(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONIOCREATECTRLBLK
    ERROR_CODE = 1511
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1511] = DaExceptionIoCreateCtrlBlk


class DaExceptionIoDevice(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONIODEVICE
    ERROR_CODE = 1512
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1512] = DaExceptionIoDevice


class DaExceptionChunkstoreNotFound(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTORENOTFOUND
    ERROR_CODE = 1600
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1600] = DaExceptionChunkstoreNotFound


class DaExceptionChunkstoreCollision(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTORECOLLISION
    ERROR_CODE = 1601
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1601] = DaExceptionChunkstoreCollision


class DaExceptionChunkstoreIterationComplete(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTOREITERATIONCOMPLETE
    ERROR_CODE = 1602
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1602] = DaExceptionChunkstoreIterationComplete


class DaExceptionChunkstoreNullChunk(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTORENULLCHUNK
    ERROR_CODE = 1603
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1603] = DaExceptionChunkstoreNullChunk


class DaExceptionChunkstoreIndexFull(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTOREINDEXFULL
    ERROR_CODE = 1604
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1604] = DaExceptionChunkstoreIndexFull


class DaExceptionChunkstoreOutOfSpace(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTOREOUTOFSPACE
    ERROR_CODE = 1605
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1605] = DaExceptionChunkstoreOutOfSpace


class DaExceptionChunkstoreChunkTooLarge(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTORECHUNKTOOLARGE
    ERROR_CODE = 1606
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1606] = DaExceptionChunkstoreChunkTooLarge


class DaExceptionChunkstoreInvalidOffset(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTOREINVALIDOFFSET
    ERROR_CODE = 1607
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1607] = DaExceptionChunkstoreInvalidOffset


class DaExceptionChunkstoreCorruption(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTORECORRUPTION
    ERROR_CODE = 1608
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1608] = DaExceptionChunkstoreCorruption


class DaExceptionChunkstoreInvalidDevice(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTOREINVALIDDEVICE
    ERROR_CODE = 1609
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1609] = DaExceptionChunkstoreInvalidDevice


class DaExceptionChunkstoreInvalidChksumType(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTOREINVALIDCHKSUMTYPE
    ERROR_CODE = 1610
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1610] = DaExceptionChunkstoreInvalidChksumType


class DaExceptionChunkstoreChunkBusy(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTORECHUNKBUSY
    ERROR_CODE = 1611
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1611] = DaExceptionChunkstoreChunkBusy


class DaExceptionChunkstoreInvalidKey(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTOREINVALIDKEY
    ERROR_CODE = 1612
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1612] = DaExceptionChunkstoreInvalidKey


class DaExceptionChunkstoreForeignDevice(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTOREFOREIGNDEVICE
    ERROR_CODE = 1613
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1613] = DaExceptionChunkstoreForeignDevice


class DaExceptionChunkstoreCrashed(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTORECRASHED
    ERROR_CODE = 1614
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1614] = DaExceptionChunkstoreCrashed


class DaExceptionChunkstoreSuffixTooLong(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTORESUFFIXTOOLONG
    ERROR_CODE = 1615
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1615] = DaExceptionChunkstoreSuffixTooLong


class DaExceptionChunkstoreRetryWrite(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTORERETRYWRITE
    ERROR_CODE = 1616
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1616] = DaExceptionChunkstoreRetryWrite


class DaExceptionChunkstoreEnableSyntheticChunks(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTOREENABLESYNTHETICCHUNKS
    ERROR_CODE = 1617
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1617] = DaExceptionChunkstoreEnableSyntheticChunks


class DaExceptionChunkstoreUnmanaged(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTOREUNMANAGED
    ERROR_CODE = 1618
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1618] = DaExceptionChunkstoreUnmanaged


class DaExceptionChunkstoreChunkRepairing(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCHUNKSTORECHUNKREPAIRING
    ERROR_CODE = 1619
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1619] = DaExceptionChunkstoreChunkRepairing


class DaExceptionFstoreNoFreeSpace(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFSTORENOFREESPACE
    ERROR_CODE = 1700
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1700] = DaExceptionFstoreNoFreeSpace


class DaExceptionFstoreVebSealed(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFSTOREVEBSEALED
    ERROR_CODE = 1701
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1701] = DaExceptionFstoreVebSealed


class DaExceptionFstoreVebUnsealed(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFSTOREVEBUNSEALED
    ERROR_CODE = 1702
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1702] = DaExceptionFstoreVebUnsealed


class DaExceptionFstoreInvalidVeb(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFSTOREINVALIDVEB
    ERROR_CODE = 1703
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1703] = DaExceptionFstoreInvalidVeb


class DaExceptionFstoreInvalidArguments(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFSTOREINVALIDARGUMENTS
    ERROR_CODE = 1704
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1704] = DaExceptionFstoreInvalidArguments


class DaExceptionFstoreNoResources(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFSTORENORESOURCES
    ERROR_CODE = 1705
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1705] = DaExceptionFstoreNoResources


class DaExceptionFstoreWriteFailed(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFSTOREWRITEFAILED
    ERROR_CODE = 1706
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1706] = DaExceptionFstoreWriteFailed


class DaExceptionStoragePoolDown(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONSTORAGEPOOLDOWN
    ERROR_CODE = 1801
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1801] = DaExceptionStoragePoolDown


class DaExceptionStoragePoolOutOfSpace(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONSTORAGEPOOLOUTOFSPACE
    ERROR_CODE = 1802
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1802] = DaExceptionStoragePoolOutOfSpace


class DaExceptionStorageStripeNotFound(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONSTORAGESTRIPENOTFOUND
    ERROR_CODE = 1803
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1803] = DaExceptionStorageStripeNotFound


class DaExceptionStorageStripeCorrupt(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONSTORAGESTRIPECORRUPT
    ERROR_CODE = 1805
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1805] = DaExceptionStorageStripeCorrupt


class DaExceptionStorageStripeRebuildJobFailure(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONSTORAGESTRIPEREBUILDJOBFAILURE
    ERROR_CODE = 1806
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1806] = DaExceptionStorageStripeRebuildJobFailure


class DaExceptionStorageStripeSetNotFound(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONSTORAGESTRIPESETNOTFOUND
    ERROR_CODE = 1807
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1807] = DaExceptionStorageStripeSetNotFound


class DaExceptionStorageStripeScrubJobFailure(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONSTORAGESTRIPESCRUBJOBFAILURE
    ERROR_CODE = 1808
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1808] = DaExceptionStorageStripeScrubJobFailure


class DaExceptionStoragePoolDriveBusy(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONSTORAGEPOOLDRIVEBUSY
    ERROR_CODE = 1809
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1809] = DaExceptionStoragePoolDriveBusy


class DaExceptionStorageStripeReconstMoreNeeded(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONSTORAGESTRIPERECONSTMORENEEDED
    ERROR_CODE = 1810
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[1810] = DaExceptionStorageStripeReconstMoreNeeded


class DaExceptionTooFewDrives(DaExceptionStoragePoolDriveBusy):
    DESCRIPTOR = _DAEXCEPTIONTOOFEWDRIVES
    ERROR_CODE = 1811
    BASE_CLASS = DaExceptionStoragePoolDriveBusy
EXCEPTIONS_BY_ERROR_CODE[1811] = DaExceptionTooFewDrives


class DaExceptionSpareCapacityExceeded(DaExceptionStoragePoolDriveBusy):
    DESCRIPTOR = _DAEXCEPTIONSPARECAPACITYEXCEEDED
    ERROR_CODE = 1812
    BASE_CLASS = DaExceptionStoragePoolDriveBusy
EXCEPTIONS_BY_ERROR_CODE[1812] = DaExceptionSpareCapacityExceeded


class DaExceptionStoragePoolNotOK(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONSTORAGEPOOLNOTOK
    ERROR_CODE = 1813
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1813] = DaExceptionStoragePoolNotOK


class DaExceptionVdiskRdonlySnapshot(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKRDONLYSNAPSHOT
    ERROR_CODE = 1900
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1900] = DaExceptionVdiskRdonlySnapshot


class DaExceptionVdiskMaxOpenSessions(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKMAXOPENSESSIONS
    ERROR_CODE = 1901
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1901] = DaExceptionVdiskMaxOpenSessions


class DaExceptionVdiskInvalidArgs(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKINVALIDARGS
    ERROR_CODE = 1902
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1902] = DaExceptionVdiskInvalidArgs


class DaExceptionVdiskSnapidMismatch(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKSNAPIDMISMATCH
    ERROR_CODE = 1903
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1903] = DaExceptionVdiskSnapidMismatch


class DaExceptionVdiskBlockKeyMismatch(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKBLOCKKEYMISMATCH
    ERROR_CODE = 1904
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1904] = DaExceptionVdiskBlockKeyMismatch


class DaExceptionVdiskBlockOffsetMismatch(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKBLOCKOFFSETMISMATCH
    ERROR_CODE = 1905
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1905] = DaExceptionVdiskBlockOffsetMismatch


class DaExceptionVdiskXmapChecksumMismatch(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKXMAPCHECKSUMMISMATCH
    ERROR_CODE = 1906
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1906] = DaExceptionVdiskXmapChecksumMismatch


class DaExceptionVdiskClumprefChecksumMismatch(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKCLUMPREFCHECKSUMMISMATCH
    ERROR_CODE = 1907
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1907] = DaExceptionVdiskClumprefChecksumMismatch


class DaExceptionVdiskMaxOpenedExceeded(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKMAXOPENEDEXCEEDED
    ERROR_CODE = 1908
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1908] = DaExceptionVdiskMaxOpenedExceeded


class DaExceptionVdiskLeaseTokenAlreadyExists(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKLEASETOKENALREADYEXISTS
    ERROR_CODE = 1909
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1909] = DaExceptionVdiskLeaseTokenAlreadyExists


class DaExceptionLeaseMismatch(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONLEASEMISMATCH
    ERROR_CODE = 1910
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1910] = DaExceptionLeaseMismatch


class DaExceptionVdiskCpTimeout(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKCPTIMEOUT
    ERROR_CODE = 1911
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1911] = DaExceptionVdiskCpTimeout


class DaExceptionVdiskRepackFailed(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKREPACKFAILED
    ERROR_CODE = 1912
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1912] = DaExceptionVdiskRepackFailed


class DaExceptionVdiskRecipeStale(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKRECIPESTALE
    ERROR_CODE = 1913
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1913] = DaExceptionVdiskRecipeStale


class DaExceptionVdiskRecipeNotFound(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKRECIPENOTFOUND
    ERROR_CODE = 1914
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1914] = DaExceptionVdiskRecipeNotFound


class DaExceptionVdiskStaleServerUuid(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKSTALESERVERUUID
    ERROR_CODE = 1915
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1915] = DaExceptionVdiskStaleServerUuid


class DaExceptionVdiskNoWriteLease(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKNOWRITELEASE
    ERROR_CODE = 1916
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1916] = DaExceptionVdiskNoWriteLease


class DaExceptionVdiskDumpMissingFpFound(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKDUMPMISSINGFPFOUND
    ERROR_CODE = 1917
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1917] = DaExceptionVdiskDumpMissingFpFound


class DaExceptionVdiskJobCanceled(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKJOBCANCELED
    ERROR_CODE = 1918
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1918] = DaExceptionVdiskJobCanceled


class DaExceptionVdiskHasWriteLease(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKHASWRITELEASE
    ERROR_CODE = 1919
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1919] = DaExceptionVdiskHasWriteLease


class DaExceptionVdiskReplChecksumMismatch(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKREPLCHECKSUMMISMATCH
    ERROR_CODE = 1920
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1920] = DaExceptionVdiskReplChecksumMismatch


class DaExceptionVdiskSetLiveInvalidArg(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVDISKSETLIVEINVALIDARG
    ERROR_CODE = 1921
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[1921] = DaExceptionVdiskSetLiveInvalidArg


class DaExceptionFilePerm(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEPERM
    ERROR_CODE = 2000
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2000] = DaExceptionFilePerm


class DaExceptionFileNoent(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILENOENT
    ERROR_CODE = 2001
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2001] = DaExceptionFileNoent


class DaExceptionFileIo(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEIO
    ERROR_CODE = 2002
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2002] = DaExceptionFileIo


class DaExceptionFileNxio(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILENXIO
    ERROR_CODE = 2003
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2003] = DaExceptionFileNxio


class DaExceptionFileAcces(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEACCES
    ERROR_CODE = 2004
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2004] = DaExceptionFileAcces


class DaExceptionFileExist(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEEXIST
    ERROR_CODE = 2005
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2005] = DaExceptionFileExist


class DaExceptionFileXdev(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEXDEV
    ERROR_CODE = 2006
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2006] = DaExceptionFileXdev


class DaExceptionFileNodev(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILENODEV
    ERROR_CODE = 2007
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2007] = DaExceptionFileNodev


class DaExceptionFileNotdir(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILENOTDIR
    ERROR_CODE = 2008
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2008] = DaExceptionFileNotdir


class DaExceptionFileIsdir(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEISDIR
    ERROR_CODE = 2009
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2009] = DaExceptionFileIsdir


class DaExceptionFileInval(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEINVAL
    ERROR_CODE = 2010
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2010] = DaExceptionFileInval


class DaExceptionFileFbig(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEFBIG
    ERROR_CODE = 2011
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2011] = DaExceptionFileFbig


class DaExceptionFileRofs(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONFILEROFS
    ERROR_CODE = 2013
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2013] = DaExceptionFileRofs


class DaExceptionFileMlink(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEMLINK
    ERROR_CODE = 2014
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2014] = DaExceptionFileMlink


class DaExceptionFileNametoolong(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILENAMETOOLONG
    ERROR_CODE = 2015
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2015] = DaExceptionFileNametoolong


class DaExceptionFileNotempty(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILENOTEMPTY
    ERROR_CODE = 2016
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2016] = DaExceptionFileNotempty


class DaExceptionFileDquot(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEDQUOT
    ERROR_CODE = 2017
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2017] = DaExceptionFileDquot


class DaExceptionFileStale(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONFILESTALE
    ERROR_CODE = 2018
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2018] = DaExceptionFileStale


class DaExceptionFileRemote(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEREMOTE
    ERROR_CODE = 2019
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2019] = DaExceptionFileRemote


class DaExceptionFileBadhandle(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEBADHANDLE
    ERROR_CODE = 2020
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2020] = DaExceptionFileBadhandle


class DaExceptionFileNotSync(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILENOTSYNC
    ERROR_CODE = 2021
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2021] = DaExceptionFileNotSync


class DaExceptionFileBadCookie(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEBADCOOKIE
    ERROR_CODE = 2022
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2022] = DaExceptionFileBadCookie


class DaExceptionFileNotsupp(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILENOTSUPP
    ERROR_CODE = 2023
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2023] = DaExceptionFileNotsupp


class DaExceptionFileToosmall(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILETOOSMALL
    ERROR_CODE = 2024
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2024] = DaExceptionFileToosmall


class DaExceptionFileServerfault(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILESERVERFAULT
    ERROR_CODE = 2025
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2025] = DaExceptionFileServerfault


class DaExceptionFileBadtype(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEBADTYPE
    ERROR_CODE = 2026
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2026] = DaExceptionFileBadtype


class DaExceptionFileJukebox(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEJUKEBOX
    ERROR_CODE = 2027
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2027] = DaExceptionFileJukebox


class DaExceptionFileFprintnotfound(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEFPRINTNOTFOUND
    ERROR_CODE = 2028
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2028] = DaExceptionFileFprintnotfound


class DaExceptionFileAborted(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEABORTED
    ERROR_CODE = 2029
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2029] = DaExceptionFileAborted


class DaExceptionFileBadDatastoreId(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEBADDATASTOREID
    ERROR_CODE = 2030
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2030] = DaExceptionFileBadDatastoreId


class DaExceptionFileStaleData(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILESTALEDATA
    ERROR_CODE = 2031
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2031] = DaExceptionFileStaleData


class DaExceptionFileFrozen(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEFROZEN
    ERROR_CODE = 2032
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2032] = DaExceptionFileFrozen


class DaExceptionFileBadSnode(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEBADSNODE
    ERROR_CODE = 2033
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2033] = DaExceptionFileBadSnode


class DaExceptionFileNamespaceBadState(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILENAMESPACEBADSTATE
    ERROR_CODE = 2034
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2034] = DaExceptionFileNamespaceBadState


class DaExceptionFileWrongFmgrHandler(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEWRONGFMGRHANDLER
    ERROR_CODE = 2035
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2035] = DaExceptionFileWrongFmgrHandler


class DaExceptionFileRange(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILERANGE
    ERROR_CODE = 2036
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2036] = DaExceptionFileRange


class DaExceptionFileIntSystemCall(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEINTSYSTEMCALL
    ERROR_CODE = 2037
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2037] = DaExceptionFileIntSystemCall


class DaExceptionFileBrokenPipe(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEBROKENPIPE
    ERROR_CODE = 2038
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2038] = DaExceptionFileBrokenPipe


class DaExceptionFileWrongFormat(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEWRONGFORMAT
    ERROR_CODE = 2039
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2039] = DaExceptionFileWrongFormat


class DaExceptionFileTooManySnaps(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILETOOMANYSNAPS
    ERROR_CODE = 2040
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2040] = DaExceptionFileTooManySnaps


class DaExceptionFileStaleSession(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILESTALESESSION
    ERROR_CODE = 2041
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2041] = DaExceptionFileStaleSession


class DaExceptionFileExpiredSession(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEEXPIREDSESSION
    ERROR_CODE = 2042
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2042] = DaExceptionFileExpiredSession


class DaExceptionFileNameIsNull(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONFILENAMEISNULL
    ERROR_CODE = 2043
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2043] = DaExceptionFileNameIsNull


class DaExceptionFileNameIsEmpty(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONFILENAMEISEMPTY
    ERROR_CODE = 2044
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2044] = DaExceptionFileNameIsEmpty


class DaExceptionFileNameHasIllegalChars(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONFILENAMEHASILLEGALCHARS
    ERROR_CODE = 2045
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2045] = DaExceptionFileNameHasIllegalChars


class DaExceptionDatastoreDisabled(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONDATASTOREDISABLED
    ERROR_CODE = 2046
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2046] = DaExceptionDatastoreDisabled


class DaExceptionMaxDatastoresCreated(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONMAXDATASTORESCREATED
    ERROR_CODE = 2047
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2047] = DaExceptionMaxDatastoresCreated


class DaExceptionDatastoreNotFound(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONDATASTORENOTFOUND
    ERROR_CODE = 2048
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2048] = DaExceptionDatastoreNotFound


class DaExceptionDatastoreMaxExports(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONDATASTOREMAXEXPORTS
    ERROR_CODE = 2049
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2049] = DaExceptionDatastoreMaxExports


class DaExceptionDatastoreBusy(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONDATASTOREBUSY
    ERROR_CODE = 2050
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2050] = DaExceptionDatastoreBusy


class DaExceptionRcacheNoResources(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONRCACHENORESOURCES
    ERROR_CODE = 2100
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2100] = DaExceptionRcacheNoResources


class DaExceptionRcacheRescueAborted(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONRCACHERESCUEABORTED
    ERROR_CODE = 2101
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2101] = DaExceptionRcacheRescueAborted


class DaExceptionRcacheInvalHandle(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONRCACHEINVALHANDLE
    ERROR_CODE = 2102
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2102] = DaExceptionRcacheInvalHandle


class DaExceptionRcacheRemoteClumpMiss(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONRCACHEREMOTECLUMPMISS
    ERROR_CODE = 2103
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2103] = DaExceptionRcacheRemoteClumpMiss


class DaExceptionGfpindexNeedRecovery(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONGFPINDEXNEEDRECOVERY
    ERROR_CODE = 2200
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2200] = DaExceptionGfpindexNeedRecovery


class DaExceptionGfpindexInsertOldContainerid(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONGFPINDEXINSERTOLDCONTAINERID
    ERROR_CODE = 2201
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2201] = DaExceptionGfpindexInsertOldContainerid


class DaExceptionGfpindexInsertSpanContainer(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONGFPINDEXINSERTSPANCONTAINER
    ERROR_CODE = 2202
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2202] = DaExceptionGfpindexInsertSpanContainer


class DaExceptionGfpindexStillRunning(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONGFPINDEXSTILLRUNNING
    ERROR_CODE = 2203
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2203] = DaExceptionGfpindexStillRunning


class DaExceptionGfpindexOutOfRange(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONGFPINDEXOUTOFRANGE
    ERROR_CODE = 2204
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2204] = DaExceptionGfpindexOutOfRange


class DaExceptionGfpindexInMigrationRange(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONGFPINDEXINMIGRATIONRANGE
    ERROR_CODE = 2205
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[2205] = DaExceptionGfpindexInMigrationRange


class DaExceptionGfpindexStaleHandle(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONGFPINDEXSTALEHANDLE
    ERROR_CODE = 2206
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2206] = DaExceptionGfpindexStaleHandle


class DaExceptionLeasemgrRetry(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONLEASEMGRRETRY
    ERROR_CODE = 2300
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2300] = DaExceptionLeasemgrRetry


class DaExceptionLeasePendingRevoke(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONLEASEPENDINGREVOKE
    ERROR_CODE = 2301
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2301] = DaExceptionLeasePendingRevoke


class DaExceptionFmgrObjectReadOnly(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFMGROBJECTREADONLY
    ERROR_CODE = 2400
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2400] = DaExceptionFmgrObjectReadOnly


class DaExceptionFmgrFileClosing(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONFMGRFILECLOSING
    ERROR_CODE = 2402
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[2402] = DaExceptionFmgrFileClosing


class DaExceptionFmgrObjectNotFile(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFMGROBJECTNOTFILE
    ERROR_CODE = 2403
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2403] = DaExceptionFmgrObjectNotFile


class DaExceptionFmgrFileNotOpen(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFMGRFILENOTOPEN
    ERROR_CODE = 2405
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2405] = DaExceptionFmgrFileNotOpen


class DaExceptionFmgrDuplicateCpRequest(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFMGRDUPLICATECPREQUEST
    ERROR_CODE = 2406
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2406] = DaExceptionFmgrDuplicateCpRequest


class DaExceptionStressLeaseMismatch(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONSTRESSLEASEMISMATCH
    ERROR_CODE = 2407
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[2407] = DaExceptionStressLeaseMismatch


class DaExceptionFileStateMismatch(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONFILESTATEMISMATCH
    ERROR_CODE = 2408
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[2408] = DaExceptionFileStateMismatch


class DaExceptionLeaseRevoke(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONLEASEREVOKE
    ERROR_CODE = 2409
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[2409] = DaExceptionLeaseRevoke


class DaExceptionLeaseUpgradeNeeded(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONLEASEUPGRADENEEDED
    ERROR_CODE = 2410
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[2410] = DaExceptionLeaseUpgradeNeeded


class DaExceptionLeaseTimeExpired(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONLEASETIMEEXPIRED
    ERROR_CODE = 2411
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[2411] = DaExceptionLeaseTimeExpired


class DaExceptionLeaseReacquireForCP(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONLEASEREACQUIREFORCP
    ERROR_CODE = 2413
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[2413] = DaExceptionLeaseReacquireForCP


class DaExceptionFmgrStreamNeedsFlush(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONFMGRSTREAMNEEDSFLUSH
    ERROR_CODE = 2414
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[2414] = DaExceptionFmgrStreamNeedsFlush


class DaExceptionFmgrWaitForXmapStability(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONFMGRWAITFORXMAPSTABILITY
    ERROR_CODE = 2415
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[2415] = DaExceptionFmgrWaitForXmapStability


class DaExceptionFmgrStaleIO(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFMGRSTALEIO
    ERROR_CODE = 2416
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2416] = DaExceptionFmgrStaleIO


class DaExceptionFmgrOlderSyncForSr(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONFMGROLDERSYNCFORSR
    ERROR_CODE = 2417
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[2417] = DaExceptionFmgrOlderSyncForSr


class DaExceptionFmgrFileNeedsCloseAfterCP(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONFMGRFILENEEDSCLOSEAFTERCP
    ERROR_CODE = 2418
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[2418] = DaExceptionFmgrFileNeedsCloseAfterCP


class DaExceptionFileHasLimboCmds(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONFILEHASLIMBOCMDS
    ERROR_CODE = 2419
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[2419] = DaExceptionFileHasLimboCmds


class DaExceptionFmgrNoFlsResources(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFMGRNOFLSRESOURCES
    ERROR_CODE = 2420
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2420] = DaExceptionFmgrNoFlsResources


class DaExceptionFmgrNoFlsHost(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONFMGRNOFLSHOST
    ERROR_CODE = 2421
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[2421] = DaExceptionFmgrNoFlsHost


class DaExceptionFmgrCannotServeFlsReqs(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFMGRCANNOTSERVEFLSREQS
    ERROR_CODE = 2422
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2422] = DaExceptionFmgrCannotServeFlsReqs


class DaExceptionNvlogWriteNeedSnapFirst(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONNVLOGWRITENEEDSNAPFIRST
    ERROR_CODE = 2423
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2423] = DaExceptionNvlogWriteNeedSnapFirst


class DaExceptionFileAcquireLease(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFILEACQUIRELEASE
    ERROR_CODE = 2424
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2424] = DaExceptionFileAcquireLease


class DaExceptionPlatform(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONPLATFORM
    ERROR_CODE = 2600
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2600] = DaExceptionPlatform


class DaExceptionPlatformRunTime(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONPLATFORMRUNTIME
    ERROR_CODE = 2601
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2601] = DaExceptionPlatformRunTime


class DaExceptionPlatformRPCTimeout(DaExceptionPlatformRunTime):
    DESCRIPTOR = _DAEXCEPTIONPLATFORMRPCTIMEOUT
    ERROR_CODE = 2602
    BASE_CLASS = DaExceptionPlatformRunTime
EXCEPTIONS_BY_ERROR_CODE[2602] = DaExceptionPlatformRPCTimeout


class DaExceptionPlatformShutdownRequest(DaExceptionPlatformRunTime):
    DESCRIPTOR = _DAEXCEPTIONPLATFORMSHUTDOWNREQUEST
    ERROR_CODE = 2603
    BASE_CLASS = DaExceptionPlatformRunTime
EXCEPTIONS_BY_ERROR_CODE[2603] = DaExceptionPlatformShutdownRequest


class DaExceptionPlatformReinitRequest(DaExceptionPlatformRunTime):
    DESCRIPTOR = _DAEXCEPTIONPLATFORMREINITREQUEST
    ERROR_CODE = 2604
    BASE_CLASS = DaExceptionPlatformRunTime
EXCEPTIONS_BY_ERROR_CODE[2604] = DaExceptionPlatformReinitRequest


class DaExceptionPlatformBeaconRequest(DaExceptionPlatformRunTime):
    DESCRIPTOR = _DAEXCEPTIONPLATFORMBEACONREQUEST
    ERROR_CODE = 2605
    BASE_CLASS = DaExceptionPlatformRunTime
EXCEPTIONS_BY_ERROR_CODE[2605] = DaExceptionPlatformBeaconRequest


class DaExceptionPlatformBatteryDischargeRequest(DaExceptionPlatformRunTime):
    DESCRIPTOR = _DAEXCEPTIONPLATFORMBATTERYDISCHARGEREQUEST
    ERROR_CODE = 2606
    BASE_CLASS = DaExceptionPlatformRunTime
EXCEPTIONS_BY_ERROR_CODE[2606] = DaExceptionPlatformBatteryDischargeRequest


class DaExceptionPlatformCancelBatteryDischargeRequest(DaExceptionPlatformRunTime):
    DESCRIPTOR = _DAEXCEPTIONPLATFORMCANCELBATTERYDISCHARGEREQUEST
    ERROR_CODE = 2607
    BASE_CLASS = DaExceptionPlatformRunTime
EXCEPTIONS_BY_ERROR_CODE[2607] = DaExceptionPlatformCancelBatteryDischargeRequest


class DaExceptionPlatformDiskPowerOnRequest(DaExceptionPlatformRunTime):
    DESCRIPTOR = _DAEXCEPTIONPLATFORMDISKPOWERONREQUEST
    ERROR_CODE = 2608
    BASE_CLASS = DaExceptionPlatformRunTime
EXCEPTIONS_BY_ERROR_CODE[2608] = DaExceptionPlatformDiskPowerOnRequest


class DaExceptionPlatformDiskPowerOffRequest(DaExceptionPlatformRunTime):
    DESCRIPTOR = _DAEXCEPTIONPLATFORMDISKPOWEROFFREQUEST
    ERROR_CODE = 2609
    BASE_CLASS = DaExceptionPlatformRunTime
EXCEPTIONS_BY_ERROR_CODE[2609] = DaExceptionPlatformDiskPowerOffRequest


class DaExceptionDiskMgr(DaExceptionPlatformRunTime):
    DESCRIPTOR = _DAEXCEPTIONDISKMGR
    ERROR_CODE = 2610
    BASE_CLASS = DaExceptionPlatformRunTime
EXCEPTIONS_BY_ERROR_CODE[2610] = DaExceptionDiskMgr


class DaExceptionNotDataDrive(DaExceptionDiskMgr):
    DESCRIPTOR = _DAEXCEPTIONNOTDATADRIVE
    ERROR_CODE = 2611
    BASE_CLASS = DaExceptionDiskMgr
EXCEPTIONS_BY_ERROR_CODE[2611] = DaExceptionNotDataDrive


class DaExceptionInvalidDriveState(DaExceptionDiskMgr):
    DESCRIPTOR = _DAEXCEPTIONINVALIDDRIVESTATE
    ERROR_CODE = 2612
    BASE_CLASS = DaExceptionDiskMgr
EXCEPTIONS_BY_ERROR_CODE[2612] = DaExceptionInvalidDriveState


class DaExceptionDriveReinit(DaExceptionDiskMgr):
    DESCRIPTOR = _DAEXCEPTIONDRIVEREINIT
    ERROR_CODE = 2613
    BASE_CLASS = DaExceptionDiskMgr
EXCEPTIONS_BY_ERROR_CODE[2613] = DaExceptionDriveReinit


class DaExceptionDriveNotStarted(DaExceptionDiskMgr):
    DESCRIPTOR = _DAEXCEPTIONDRIVENOTSTARTED
    ERROR_CODE = 2614
    BASE_CLASS = DaExceptionDiskMgr
EXCEPTIONS_BY_ERROR_CODE[2614] = DaExceptionDriveNotStarted


class DaExceptionForeignDrive(DaExceptionDiskMgr):
    DESCRIPTOR = _DAEXCEPTIONFOREIGNDRIVE
    ERROR_CODE = 2615
    BASE_CLASS = DaExceptionDiskMgr
EXCEPTIONS_BY_ERROR_CODE[2615] = DaExceptionForeignDrive


class DaExceptionUpdateDriveState(DaExceptionDiskMgr):
    DESCRIPTOR = _DAEXCEPTIONUPDATEDRIVESTATE
    ERROR_CODE = 2616
    BASE_CLASS = DaExceptionDiskMgr
EXCEPTIONS_BY_ERROR_CODE[2616] = DaExceptionUpdateDriveState


class DaExceptionDriveNotStopped(DaExceptionDiskMgr):
    DESCRIPTOR = _DAEXCEPTIONDRIVENOTSTOPPED
    ERROR_CODE = 2617
    BASE_CLASS = DaExceptionDiskMgr
EXCEPTIONS_BY_ERROR_CODE[2617] = DaExceptionDriveNotStopped


class DaExceptionDriveUnmount(DaExceptionDiskMgr):
    DESCRIPTOR = _DAEXCEPTIONDRIVEUNMOUNT
    ERROR_CODE = 2618
    BASE_CLASS = DaExceptionDiskMgr
EXCEPTIONS_BY_ERROR_CODE[2618] = DaExceptionDriveUnmount


class DaExceptionDriveNotFound(DaExceptionDiskMgr):
    DESCRIPTOR = _DAEXCEPTIONDRIVENOTFOUND
    ERROR_CODE = 2619
    BASE_CLASS = DaExceptionDiskMgr
EXCEPTIONS_BY_ERROR_CODE[2619] = DaExceptionDriveNotFound


class DaExceptionInvalidUsername(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONINVALIDUSERNAME
    ERROR_CODE = 2630
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2630] = DaExceptionInvalidUsername


class DaExceptionAuthenticationFailure(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONAUTHENTICATIONFAILURE
    ERROR_CODE = 2631
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2631] = DaExceptionAuthenticationFailure


class DaExceptionEmptyPassword(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONEMPTYPASSWORD
    ERROR_CODE = 2632
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2632] = DaExceptionEmptyPassword


class DaExceptionInvalidEntriesInPassword(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONINVALIDENTRIESINPASSWORD
    ERROR_CODE = 2633
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2633] = DaExceptionInvalidEntriesInPassword


class DaExceptionClusterMgr(DaExceptionPlatformRunTime):
    DESCRIPTOR = _DAEXCEPTIONCLUSTERMGR
    ERROR_CODE = 2640
    BASE_CLASS = DaExceptionPlatformRunTime
EXCEPTIONS_BY_ERROR_CODE[2640] = DaExceptionClusterMgr


class DaExceptionIncompatibleModel(DaExceptionClusterMgr):
    DESCRIPTOR = _DAEXCEPTIONINCOMPATIBLEMODEL
    ERROR_CODE = 2641
    BASE_CLASS = DaExceptionClusterMgr
EXCEPTIONS_BY_ERROR_CODE[2641] = DaExceptionIncompatibleModel


class DaExceptionNodeNotStem(DaExceptionClusterMgr):
    DESCRIPTOR = _DAEXCEPTIONNODENOTSTEM
    ERROR_CODE = 2642
    BASE_CLASS = DaExceptionClusterMgr
EXCEPTIONS_BY_ERROR_CODE[2642] = DaExceptionNodeNotStem


class DaExceptionNodeNotMaster(DaExceptionClusterMgr):
    DESCRIPTOR = _DAEXCEPTIONNODENOTMASTER
    ERROR_CODE = 2643
    BASE_CLASS = DaExceptionClusterMgr
EXCEPTIONS_BY_ERROR_CODE[2643] = DaExceptionNodeNotMaster


class DaExceptionNoDataFloatIp(DaExceptionClusterMgr):
    DESCRIPTOR = _DAEXCEPTIONNODATAFLOATIP
    ERROR_CODE = 2644
    BASE_CLASS = DaExceptionClusterMgr
EXCEPTIONS_BY_ERROR_CODE[2644] = DaExceptionNoDataFloatIp


class DaExceptionNodeUnreachable(DaExceptionClusterMgr):
    DESCRIPTOR = _DAEXCEPTIONNODEUNREACHABLE
    ERROR_CODE = 2645
    BASE_CLASS = DaExceptionClusterMgr
EXCEPTIONS_BY_ERROR_CODE[2645] = DaExceptionNodeUnreachable


class DaExceptionPlatformSyncFile(DaExceptionPlatform):
    DESCRIPTOR = _DAEXCEPTIONPLATFORMSYNCFILE
    ERROR_CODE = 2646
    BASE_CLASS = DaExceptionPlatform
EXCEPTIONS_BY_ERROR_CODE[2646] = DaExceptionPlatformSyncFile


class DaExceptionPlatformDiagPing(DaExceptionPlatform):
    DESCRIPTOR = _DAEXCEPTIONPLATFORMDIAGPING
    ERROR_CODE = 2647
    BASE_CLASS = DaExceptionPlatform
EXCEPTIONS_BY_ERROR_CODE[2647] = DaExceptionPlatformDiagPing


class DaExceptionControllerNotActive(DaExceptionPlatform):
    DESCRIPTOR = _DAEXCEPTIONCONTROLLERNOTACTIVE
    ERROR_CODE = 2648
    BASE_CLASS = DaExceptionPlatform
EXCEPTIONS_BY_ERROR_CODE[2648] = DaExceptionControllerNotActive


class DaExceptionNetworkConfigExists(DaExceptionPlatform):
    DESCRIPTOR = _DAEXCEPTIONNETWORKCONFIGEXISTS
    ERROR_CODE = 2649
    BASE_CLASS = DaExceptionPlatform
EXCEPTIONS_BY_ERROR_CODE[2649] = DaExceptionNetworkConfigExists


class DaExceptionNoLinkOnAnyMgmtIfaces(DaExceptionPlatform):
    DESCRIPTOR = _DAEXCEPTIONNOLINKONANYMGMTIFACES
    ERROR_CODE = 2650
    BASE_CLASS = DaExceptionPlatform
EXCEPTIONS_BY_ERROR_CODE[2650] = DaExceptionNoLinkOnAnyMgmtIfaces


class DaExceptionNodesLimitReached(DaExceptionClusterMgr):
    DESCRIPTOR = _DAEXCEPTIONNODESLIMITREACHED
    ERROR_CODE = 2651
    BASE_CLASS = DaExceptionClusterMgr
EXCEPTIONS_BY_ERROR_CODE[2651] = DaExceptionNodesLimitReached


class DaExceptionNodeExistsInCluster(DaExceptionClusterMgr):
    DESCRIPTOR = _DAEXCEPTIONNODEEXISTSINCLUSTER
    ERROR_CODE = 2652
    BASE_CLASS = DaExceptionClusterMgr
EXCEPTIONS_BY_ERROR_CODE[2652] = DaExceptionNodeExistsInCluster


class DaExceptionNodeMayBeUnreachable(DaExceptionClusterMgr):
    DESCRIPTOR = _DAEXCEPTIONNODEMAYBEUNREACHABLE
    ERROR_CODE = 2653
    BASE_CLASS = DaExceptionClusterMgr
EXCEPTIONS_BY_ERROR_CODE[2653] = DaExceptionNodeMayBeUnreachable


class DaExceptionLeaseUpgradeForRepackFailed(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONLEASEUPGRADEFORREPACKFAILED
    ERROR_CODE = 2700
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2700] = DaExceptionLeaseUpgradeForRepackFailed


class DaExceptionServiceUnavailable(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONSERVICEUNAVAILABLE
    ERROR_CODE = 2800
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2800] = DaExceptionServiceUnavailable


class DaExceptionServiceUnresponsive(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONSERVICEUNRESPONSIVE
    ERROR_CODE = 2801
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2801] = DaExceptionServiceUnresponsive


class DaExceptionvCenterRegistrationFailed(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONVCENTERREGISTRATIONFAILED
    ERROR_CODE = 2802
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2802] = DaExceptionvCenterRegistrationFailed


class DaExceptionvCenterUnregistrationFailed(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONVCENTERUNREGISTRATIONFAILED
    ERROR_CODE = 2803
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2803] = DaExceptionvCenterUnregistrationFailed


class DaExceptionvCenterRegistrationExists(DaExceptionAlreadyExists):
    DESCRIPTOR = _DAEXCEPTIONVCENTERREGISTRATIONEXISTS
    ERROR_CODE = 2804
    BASE_CLASS = DaExceptionAlreadyExists
EXCEPTIONS_BY_ERROR_CODE[2804] = DaExceptionvCenterRegistrationExists


class DaExceptionvCenterUnknown(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONVCENTERUNKNOWN
    ERROR_CODE = 2805
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2805] = DaExceptionvCenterUnknown


class DaExceptionSupportNotFound(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONSUPPORTNOTFOUND
    ERROR_CODE = 2806
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2806] = DaExceptionSupportNotFound


class DaExceptionNotAuthenticated(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONNOTAUTHENTICATED
    ERROR_CODE = 2807
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2807] = DaExceptionNotAuthenticated


class DaExceptionMailserverConfigurationFailed(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONMAILSERVERCONFIGURATIONFAILED
    ERROR_CODE = 2808
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2808] = DaExceptionMailserverConfigurationFailed


class DaExceptionHostInUse(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONHOSTINUSE
    ERROR_CODE = 2809
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2809] = DaExceptionHostInUse


class DaExceptionHostUnknown(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONHOSTUNKNOWN
    ERROR_CODE = 2810
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2810] = DaExceptionHostUnknown


class DaExceptionInvalidEventFilterCombination(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONINVALIDEVENTFILTERCOMBINATION
    ERROR_CODE = 2811
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2811] = DaExceptionInvalidEventFilterCombination


class DaExceptionNovCenter(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONNOVCENTER
    ERROR_CODE = 2812
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2812] = DaExceptionNovCenter


class DaExceptionvCenterError(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONVCENTERERROR
    ERROR_CODE = 2813
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2813] = DaExceptionvCenterError


class DaExceptionAtLeastOneArgRequired(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONATLEASTONEARGREQUIRED
    ERROR_CODE = 2814
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2814] = DaExceptionAtLeastOneArgRequired


class DaExceptionMutuallyExclusiveArgs(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONMUTUALLYEXCLUSIVEARGS
    ERROR_CODE = 2815
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2815] = DaExceptionMutuallyExclusiveArgs


class DaExceptionExactlyOneArgRequired(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONEXACTLYONEARGREQUIRED
    ERROR_CODE = 2816
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2816] = DaExceptionExactlyOneArgRequired


class DaExceptionSupportNotRunning(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONSUPPORTNOTRUNNING
    ERROR_CODE = 2817
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2817] = DaExceptionSupportNotRunning


class DaExceptionInvalidCronExpression(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONINVALIDCRONEXPRESSION
    ERROR_CODE = 2818
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2818] = DaExceptionInvalidCronExpression


class DaExceptionInvalidIPSubnetMask(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONINVALIDIPSUBNETMASK
    ERROR_CODE = 2819
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2819] = DaExceptionInvalidIPSubnetMask


class DaExceptionDropToShell(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONDROPTOSHELL
    ERROR_CODE = 2820
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2820] = DaExceptionDropToShell


class DaExceptionAllArgsRequired(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONALLARGSREQUIRED
    ERROR_CODE = 2821
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2821] = DaExceptionAllArgsRequired


class DaExceptionDuplicateIP(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONDUPLICATEIP
    ERROR_CODE = 2822
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2822] = DaExceptionDuplicateIP


class DaExceptionCliOperationAborted(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONCLIOPERATIONABORTED
    ERROR_CODE = 2823
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2823] = DaExceptionCliOperationAborted


class DaExceptionRegistrationFailure(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONREGISTRATIONFAILURE
    ERROR_CODE = 2824
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2824] = DaExceptionRegistrationFailure


class DaExceptionvCenterConnectionFailure(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONVCENTERCONNECTIONFAILURE
    ERROR_CODE = 2825
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2825] = DaExceptionvCenterConnectionFailure


class DaExceptionvCenterConnectionMalformedUrl(DaExceptionvCenterConnectionFailure):
    DESCRIPTOR = _DAEXCEPTIONVCENTERCONNECTIONMALFORMEDURL
    ERROR_CODE = 2826
    BASE_CLASS = DaExceptionvCenterConnectionFailure
EXCEPTIONS_BY_ERROR_CODE[2826] = DaExceptionvCenterConnectionMalformedUrl


class DaExceptionvCenterLoginFailure(DaExceptionvCenterConnectionFailure):
    DESCRIPTOR = _DAEXCEPTIONVCENTERLOGINFAILURE
    ERROR_CODE = 2827
    BASE_CLASS = DaExceptionvCenterConnectionFailure
EXCEPTIONS_BY_ERROR_CODE[2827] = DaExceptionvCenterLoginFailure


class DaExceptionvCenterLogoutFailure(DaExceptionvCenterConnectionFailure):
    DESCRIPTOR = _DAEXCEPTIONVCENTERLOGOUTFAILURE
    ERROR_CODE = 2828
    BASE_CLASS = DaExceptionvCenterConnectionFailure
EXCEPTIONS_BY_ERROR_CODE[2828] = DaExceptionvCenterLogoutFailure


class DaExceptionvCenterSSLInitialization(DaExceptionvCenterConnectionFailure):
    DESCRIPTOR = _DAEXCEPTIONVCENTERSSLINITIALIZATION
    ERROR_CODE = 2829
    BASE_CLASS = DaExceptionvCenterConnectionFailure
EXCEPTIONS_BY_ERROR_CODE[2829] = DaExceptionvCenterSSLInitialization


class DaExceptionQualifyingArgumentNotFound(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONQUALIFYINGARGUMENTNOTFOUND
    ERROR_CODE = 2830
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2830] = DaExceptionQualifyingArgumentNotFound


class DaExceptionCloudViewRegistrationFailure(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONCLOUDVIEWREGISTRATIONFAILURE
    ERROR_CODE = 2831
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[2831] = DaExceptionCloudViewRegistrationFailure


class DaExceptionClumpstoreCancelWriterRecovery(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCLUMPSTORECANCELWRITERRECOVERY
    ERROR_CODE = 2900
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2900] = DaExceptionClumpstoreCancelWriterRecovery


class DaExceptionClumpstoreNotEnabled(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCLUMPSTORENOTENABLED
    ERROR_CODE = 2901
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[2901] = DaExceptionClumpstoreNotEnabled


class DaExceptionDaggerSubmissionsDisabled(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONDAGGERSUBMISSIONSDISABLED
    ERROR_CODE = 3000
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3000] = DaExceptionDaggerSubmissionsDisabled


class DaExceptionDaggerJobCanceled(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONDAGGERJOBCANCELED
    ERROR_CODE = 3001
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[3001] = DaExceptionDaggerJobCanceled


class DaExceptionDaggerQueueFull(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONDAGGERQUEUEFULL
    ERROR_CODE = 3002
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3002] = DaExceptionDaggerQueueFull


class DaExceptionDaggerJobRunning(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONDAGGERJOBRUNNING
    ERROR_CODE = 3003
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3003] = DaExceptionDaggerJobRunning


class DaExceptionAutoSupportDownloadFailed(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONAUTOSUPPORTDOWNLOADFAILED
    ERROR_CODE = 3100
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[3100] = DaExceptionAutoSupportDownloadFailed


class DaExceptionAutoSupportBundleUploadFailed(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONAUTOSUPPORTBUNDLEUPLOADFAILED
    ERROR_CODE = 3101
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[3101] = DaExceptionAutoSupportBundleUploadFailed


class DaExceptionAutoSupportServerConnectionFailed(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONAUTOSUPPORTSERVERCONNECTIONFAILED
    ERROR_CODE = 3102
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[3102] = DaExceptionAutoSupportServerConnectionFailed


class DaExceptionTriggerSupportFailed(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONTRIGGERSUPPORTFAILED
    ERROR_CODE = 3103
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3103] = DaExceptionTriggerSupportFailed


class DaExceptionDebugSupportAlreadyInProgress(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONDEBUGSUPPORTALREADYINPROGRESS
    ERROR_CODE = 3104
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[3104] = DaExceptionDebugSupportAlreadyInProgress


class DaExceptionDebugSupportBundleCollectionFailed(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONDEBUGSUPPORTBUNDLECOLLECTIONFAILED
    ERROR_CODE = 3105
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3105] = DaExceptionDebugSupportBundleCollectionFailed


class DaExceptionAutoSupportDisabled(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONAUTOSUPPORTDISABLED
    ERROR_CODE = 3106
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[3106] = DaExceptionAutoSupportDisabled


class DaExceptionMonitoringInterrupted(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONMONITORINGINTERRUPTED
    ERROR_CODE = 3107
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[3107] = DaExceptionMonitoringInterrupted


class DaExceptionSRDisabled(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONSRDISABLED
    ERROR_CODE = 3200
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3200] = DaExceptionSRDisabled


class DaExceptionSRInProgress(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONSRINPROGRESS
    ERROR_CODE = 3201
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3201] = DaExceptionSRInProgress


class DaExceptionRepackDisabled(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPACKDISABLED
    ERROR_CODE = 3300
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3300] = DaExceptionRepackDisabled


class DaExceptionRepackJobFailed(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPACKJOBFAILED
    ERROR_CODE = 3301
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3301] = DaExceptionRepackJobFailed


class DaExceptionMaxRepackJobsLimitReached(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONMAXREPACKJOBSLIMITREACHED
    ERROR_CODE = 3302
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3302] = DaExceptionMaxRepackJobsLimitReached


class DaExceptionOncRpcGarbageCallhdr(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONONCRPCGARBAGECALLHDR
    ERROR_CODE = 3500
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[3500] = DaExceptionOncRpcGarbageCallhdr


class DaExceptionOncRpcGarbageArgs(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONONCRPCGARBAGEARGS
    ERROR_CODE = 3501
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[3501] = DaExceptionOncRpcGarbageArgs


class DaExceptionOncRpcProgUnavail(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONONCRPCPROGUNAVAIL
    ERROR_CODE = 3502
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[3502] = DaExceptionOncRpcProgUnavail


class DaExceptionOncRpcProgMismatch(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONONCRPCPROGMISMATCH
    ERROR_CODE = 3503
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[3503] = DaExceptionOncRpcProgMismatch


class DaExceptionOncRpcProcUnavail(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONONCRPCPROCUNAVAIL
    ERROR_CODE = 3504
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[3504] = DaExceptionOncRpcProcUnavail


class DaExceptionOncRpcGarbageResphdr(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONONCRPCGARBAGERESPHDR
    ERROR_CODE = 3505
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[3505] = DaExceptionOncRpcGarbageResphdr


class DaExceptionOncRpcCallRejected(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONONCRPCCALLREJECTED
    ERROR_CODE = 3506
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[3506] = DaExceptionOncRpcCallRejected


class DaExceptionOncRpcSystemErr(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONONCRPCSYSTEMERR
    ERROR_CODE = 3507
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[3507] = DaExceptionOncRpcSystemErr


class DaExceptionPyExc(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONPYEXC
    ERROR_CODE = 3600
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[3600] = DaExceptionPyExc


class DaExceptionSgIo(DaExceptionIo):
    DESCRIPTOR = _DAEXCEPTIONSGIO
    ERROR_CODE = 3700
    BASE_CLASS = DaExceptionIo
EXCEPTIONS_BY_ERROR_CODE[3700] = DaExceptionSgIo


class DaExceptionScsiDeviceDisconnected(DaExceptionSgIo):
    DESCRIPTOR = _DAEXCEPTIONSCSIDEVICEDISCONNECTED
    ERROR_CODE = 3701
    BASE_CLASS = DaExceptionSgIo
EXCEPTIONS_BY_ERROR_CODE[3701] = DaExceptionScsiDeviceDisconnected


class DaExceptionUnknownSgIo(DaExceptionSgIo):
    DESCRIPTOR = _DAEXCEPTIONUNKNOWNSGIO
    ERROR_CODE = 3702
    BASE_CLASS = DaExceptionSgIo
EXCEPTIONS_BY_ERROR_CODE[3702] = DaExceptionUnknownSgIo


class DaExceptionScsiResvConflict(DaExceptionSgIo):
    DESCRIPTOR = _DAEXCEPTIONSCSIRESVCONFLICT
    ERROR_CODE = 3703
    BASE_CLASS = DaExceptionSgIo
EXCEPTIONS_BY_ERROR_CODE[3703] = DaExceptionScsiResvConflict


class DaExceptionVmDoesNotExist(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVMDOESNOTEXIST
    ERROR_CODE = 3800
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3800] = DaExceptionVmDoesNotExist


class DaExceptionVmParsingFailure(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVMPARSINGFAILURE
    ERROR_CODE = 3801
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3801] = DaExceptionVmParsingFailure


class DaExceptionVmParsingNoKv(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVMPARSINGNOKV
    ERROR_CODE = 3802
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3802] = DaExceptionVmParsingNoKv


class DaExceptionVmParsingBufferTooSmall(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVMPARSINGBUFFERTOOSMALL
    ERROR_CODE = 3803
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3803] = DaExceptionVmParsingBufferTooSmall


class DaExceptionVmFileHasOwner(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONVMFILEHASOWNER
    ERROR_CODE = 3804
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3804] = DaExceptionVmFileHasOwner


class DaExceptionTooManyTotalVms(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONTOOMANYTOTALVMS
    ERROR_CODE = 3805
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[3805] = DaExceptionTooManyTotalVms


class DaExceptionBadDiskFile(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONBADDISKFILE
    ERROR_CODE = 3806
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3806] = DaExceptionBadDiskFile


class DaExceptionUnsupportedVirtualDiskFileFormat(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONUNSUPPORTEDVIRTUALDISKFILEFORMAT
    ERROR_CODE = 3807
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3807] = DaExceptionUnsupportedVirtualDiskFileFormat


class DaExceptionControllerNotSynced(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCONTROLLERNOTSYNCED
    ERROR_CODE = 3900
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3900] = DaExceptionControllerNotSynced


class DaExceptionFailoverInProgress(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONFAILOVERINPROGRESS
    ERROR_CODE = 3901
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3901] = DaExceptionFailoverInProgress


class DaExceptionUpgradeInProgress(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONUPGRADEINPROGRESS
    ERROR_CODE = 3902
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3902] = DaExceptionUpgradeInProgress


class DaExceptionPeerControllerBadNetworkConnectivity(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONPEERCONTROLLERBADNETWORKCONNECTIVITY
    ERROR_CODE = 3903
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[3903] = DaExceptionPeerControllerBadNetworkConnectivity


class DaExceptionNetworkSetupAlreadyInProgress(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONNETWORKSETUPALREADYINPROGRESS
    ERROR_CODE = 4100
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[4100] = DaExceptionNetworkSetupAlreadyInProgress


class DaExceptionNoNetworkSetupToCommit(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONNONETWORKSETUPTOCOMMIT
    ERROR_CODE = 4101
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[4101] = DaExceptionNoNetworkSetupToCommit


class DaExceptionNetworkSetupFailed(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONNETWORKSETUPFAILED
    ERROR_CODE = 4102
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[4102] = DaExceptionNetworkSetupFailed


class DaExceptionNetworkSetupRequiresCommit(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONNETWORKSETUPREQUIRESCOMMIT
    ERROR_CODE = 4103
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[4103] = DaExceptionNetworkSetupRequiresCommit


class DaExceptionNvramChecksumMismatch(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONNVRAMCHECKSUMMISMATCH
    ERROR_CODE = 4200
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[4200] = DaExceptionNvramChecksumMismatch


class DaExceptionConfEntryIsInvalid(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONCONFENTRYISINVALID
    ERROR_CODE = 4300
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[4300] = DaExceptionConfEntryIsInvalid


class DaExceptionConfEntryIsLocked(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONCONFENTRYISLOCKED
    ERROR_CODE = 4301
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[4301] = DaExceptionConfEntryIsLocked


class DaExceptionConfEntryOutsideRange(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONCONFENTRYOUTSIDERANGE
    ERROR_CODE = 4302
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[4302] = DaExceptionConfEntryOutsideRange


class DaExceptionConfModuleCookieAlreadyExists(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONCONFMODULECOOKIEALREADYEXISTS
    ERROR_CODE = 4303
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[4303] = DaExceptionConfModuleCookieAlreadyExists


class DaExceptionConfigVersionMismatch(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONCONFIGVERSIONMISMATCH
    ERROR_CODE = 5000
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5000] = DaExceptionConfigVersionMismatch


class DaExceptionRemoteDataRetrievalVersionUnsupported(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONREMOTEDATARETRIEVALVERSIONUNSUPPORTED
    ERROR_CODE = 5001
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5001] = DaExceptionRemoteDataRetrievalVersionUnsupported


class DaExceptionRemoteOperationVersionUnsupported(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONREMOTEOPERATIONVERSIONUNSUPPORTED
    ERROR_CODE = 5002
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5002] = DaExceptionRemoteOperationVersionUnsupported


class DaExceptionEonRunning(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONEONRUNNING
    ERROR_CODE = 5100
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5100] = DaExceptionEonRunning


class DaExceptionEonNotFound(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONEONNOTFOUND
    ERROR_CODE = 5101
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5101] = DaExceptionEonNotFound


class DaExceptionEonExists(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONEONEXISTS
    ERROR_CODE = 5102
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5102] = DaExceptionEonExists


class DaExceptionEonLocationUnknown(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONEONLOCATIONUNKNOWN
    ERROR_CODE = 5103
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[5103] = DaExceptionEonLocationUnknown


class DaExceptionEonCanceled(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONEONCANCELED
    ERROR_CODE = 5104
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5104] = DaExceptionEonCanceled


class DaExceptionEonRetried(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONEONRETRIED
    ERROR_CODE = 5105
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[5105] = DaExceptionEonRetried


class DaExceptionEonTestError(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONEONTESTERROR
    ERROR_CODE = 5106
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5106] = DaExceptionEonTestError


class DaExceptionEonBusy(DaExceptionLocalOnly):
    DESCRIPTOR = _DAEXCEPTIONEONBUSY
    ERROR_CODE = 5107
    BASE_CLASS = DaExceptionLocalOnly
EXCEPTIONS_BY_ERROR_CODE[5107] = DaExceptionEonBusy


class DaExceptionEonGenCountRejected(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONEONGENCOUNTREJECTED
    ERROR_CODE = 5108
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5108] = DaExceptionEonGenCountRejected


class DaExceptionContainersetNotEnabled(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONCONTAINERSETNOTENABLED
    ERROR_CODE = 5200
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5200] = DaExceptionContainersetNotEnabled


class DaExceptionReplTooManyReplicaSites(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLTOOMANYREPLICASITES
    ERROR_CODE = 5300
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5300] = DaExceptionReplTooManyReplicaSites


class DaExceptionReplInvalidReplicaSite(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLINVALIDREPLICASITE
    ERROR_CODE = 5301
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5301] = DaExceptionReplInvalidReplicaSite


class DaExceptionReplUnpairedReplicaSite(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLUNPAIREDREPLICASITE
    ERROR_CODE = 5302
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5302] = DaExceptionReplUnpairedReplicaSite


class DaExceptionReplDisabledReplicaSite(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLDISABLEDREPLICASITE
    ERROR_CODE = 5303
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5303] = DaExceptionReplDisabledReplicaSite


class DaExceptionReplRevokedReplicaSite(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLREVOKEDREPLICASITE
    ERROR_CODE = 5304
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5304] = DaExceptionReplRevokedReplicaSite


class DaExceptionReplUnavailableReplicaSite(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLUNAVAILABLEREPLICASITE
    ERROR_CODE = 5305
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5305] = DaExceptionReplUnavailableReplicaSite


class DaExceptionReplLocalNameAlreadyInUse(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLLOCALNAMEALREADYINUSE
    ERROR_CODE = 5306
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5306] = DaExceptionReplLocalNameAlreadyInUse


class DaExceptionReplIpAddressAlreadyInUse(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLIPADDRESSALREADYINUSE
    ERROR_CODE = 5307
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5307] = DaExceptionReplIpAddressAlreadyInUse


class DaExceptionReplIpAddressChangeFailure(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLIPADDRESSCHANGEFAILURE
    ERROR_CODE = 5308
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5308] = DaExceptionReplIpAddressChangeFailure


class DaExceptionReplSrcFeUnavailable(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLSRCFEUNAVAILABLE
    ERROR_CODE = 5309
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5309] = DaExceptionReplSrcFeUnavailable


class DaExceptionReplDstFeUnavailable(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLDSTFEUNAVAILABLE
    ERROR_CODE = 5310
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5310] = DaExceptionReplDstFeUnavailable


class DaExceptionReplRemoteScrollSvcUnavailable(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLREMOTESCROLLSVCUNAVAILABLE
    ERROR_CODE = 5311
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5311] = DaExceptionReplRemoteScrollSvcUnavailable


class DaExceptionReplRemoteScrollStopped(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLREMOTESCROLLSTOPPED
    ERROR_CODE = 5312
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5312] = DaExceptionReplRemoteScrollStopped


class DaExceptionReplInShutdown(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLINSHUTDOWN
    ERROR_CODE = 5313
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5313] = DaExceptionReplInShutdown


class DaExceptionReplDstUnknownTask(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLDSTUNKNOWNTASK
    ERROR_CODE = 5314
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5314] = DaExceptionReplDstUnknownTask


class DaExceptionReplDstHasSnap(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLDSTHASSNAP
    ERROR_CODE = 5315
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5315] = DaExceptionReplDstHasSnap


class DaExceptionReplRemoteScrollDropped(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLREMOTESCROLLDROPPED
    ERROR_CODE = 5316
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5316] = DaExceptionReplRemoteScrollDropped


class DaExceptionReplNetworkCheckFailed(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLNETWORKCHECKFAILED
    ERROR_CODE = 5317
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5317] = DaExceptionReplNetworkCheckFailed


class DaExceptionReplVersionMismatch(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLVERSIONMISMATCH
    ERROR_CODE = 5318
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5318] = DaExceptionReplVersionMismatch


class DaExceptionReplBusyReplicaSite(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLBUSYREPLICASITE
    ERROR_CODE = 5319
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5319] = DaExceptionReplBusyReplicaSite


class DaExceptionReplTaskUserCancel(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLTASKUSERCANCEL
    ERROR_CODE = 5320
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5320] = DaExceptionReplTaskUserCancel


class DaExceptionReplSnapUnavailable(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLSNAPUNAVAILABLE
    ERROR_CODE = 5321
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5321] = DaExceptionReplSnapUnavailable


class DaExceptionReplInvalidSiteAddress(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLINVALIDSITEADDRESS
    ERROR_CODE = 5322
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5322] = DaExceptionReplInvalidSiteAddress


class DaExceptionReplRemoveReplicaSiteFailed(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLREMOVEREPLICASITEFAILED
    ERROR_CODE = 5323
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5323] = DaExceptionReplRemoveReplicaSiteFailed


class DaExceptionReplRofs(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONREPLROFS
    ERROR_CODE = 5324
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5324] = DaExceptionReplRofs


class DaExceptionReplRetryFromDstReplicaSite(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLRETRYFROMDSTREPLICASITE
    ERROR_CODE = 5325
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5325] = DaExceptionReplRetryFromDstReplicaSite


class DaExceptionReplCriticalSrcReplicaSite(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLCRITICALSRCREPLICASITE
    ERROR_CODE = 5326
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5326] = DaExceptionReplCriticalSrcReplicaSite


class DaExceptionReplCriticalDstReplicaSite(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLCRITICALDSTREPLICASITE
    ERROR_CODE = 5327
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5327] = DaExceptionReplCriticalDstReplicaSite


class DaExceptionReplEncryptionChangeRollbackError(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLENCRYPTIONCHANGEROLLBACKERROR
    ERROR_CODE = 5328
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5328] = DaExceptionReplEncryptionChangeRollbackError


class DaExceptionReplTaskFailure(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLTASKFAILURE
    ERROR_CODE = 5329
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5329] = DaExceptionReplTaskFailure


class DaExceptionReplDstNoSpace(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLDSTNOSPACE
    ERROR_CODE = 5330
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5330] = DaExceptionReplDstNoSpace


class DaExceptionReplSelfReplicationUnsupported(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLSELFREPLICATIONUNSUPPORTED
    ERROR_CODE = 5331
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5331] = DaExceptionReplSelfReplicationUnsupported


class DaExceptionReplApplyDiffFailed(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLAPPLYDIFFFAILED
    ERROR_CODE = 5332
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5332] = DaExceptionReplApplyDiffFailed


class DaExceptionReplTaskRemoved(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLTASKREMOVED
    ERROR_CODE = 5333
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5333] = DaExceptionReplTaskRemoved


class DaExceptionReplBandwidthLimitChangeError(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLBANDWIDTHLIMITCHANGEERROR
    ERROR_CODE = 5334
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5334] = DaExceptionReplBandwidthLimitChangeError


class DaExceptionReplSourceSwitchedTask(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLSOURCESWITCHEDTASK
    ERROR_CODE = 5336
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5336] = DaExceptionReplSourceSwitchedTask


class DaExceptionReplAuthenticationFailureDstReplicaSite(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLAUTHENTICATIONFAILUREDSTREPLICASITE
    ERROR_CODE = 5337
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5337] = DaExceptionReplAuthenticationFailureDstReplicaSite


class DaExceptionReplDstRofs(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONREPLDSTROFS
    ERROR_CODE = 5338
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5338] = DaExceptionReplDstRofs


class DaExceptionReplRegistrationFailureDstReplicaSite(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLREGISTRATIONFAILUREDSTREPLICASITE
    ERROR_CODE = 5339
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5339] = DaExceptionReplRegistrationFailureDstReplicaSite


class DaExceptionReplShelveTimeout(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLSHELVETIMEOUT
    ERROR_CODE = 5340
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5340] = DaExceptionReplShelveTimeout


class DaExceptionReplSnapIncompatible(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLSNAPINCOMPATIBLE
    ERROR_CODE = 5341
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5341] = DaExceptionReplSnapIncompatible


class DaExceptionReplTooManyTasks(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLTOOMANYTASKS
    ERROR_CODE = 5342
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5342] = DaExceptionReplTooManyTasks


class DaExceptionReplGenericStress(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREPLGENERICSTRESS
    ERROR_CODE = 5399
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5399] = DaExceptionReplGenericStress


class DaExceptionSnapTooManyPgs(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONSNAPTOOMANYPGS
    ERROR_CODE = 5400
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5400] = DaExceptionSnapTooManyPgs


class DaExceptionSnapTooManySnapsInPg(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONSNAPTOOMANYSNAPSINPG
    ERROR_CODE = 5401
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5401] = DaExceptionSnapTooManySnapsInPg


class DaExceptionSnapsTooManyFilesInSnap(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONSNAPSTOOMANYFILESINSNAP
    ERROR_CODE = 5402
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5402] = DaExceptionSnapsTooManyFilesInSnap


class DaExceptionSnapIsSealed(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONSNAPISSEALED
    ERROR_CODE = 5403
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5403] = DaExceptionSnapIsSealed


class DaExceptionSnapIsEmpty(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONSNAPISEMPTY
    ERROR_CODE = 5404
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5404] = DaExceptionSnapIsEmpty


class DaExceptionSnapstoreRofs(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONSNAPSTOREROFS
    ERROR_CODE = 5405
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5405] = DaExceptionSnapstoreRofs


class DaExceptionPGPolicyTooManyElems(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONPGPOLICYTOOMANYELEMS
    ERROR_CODE = 5406
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5406] = DaExceptionPGPolicyTooManyElems


class DaExceptionPGPolicyTooBig(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONPGPOLICYTOOBIG
    ERROR_CODE = 5407
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5407] = DaExceptionPGPolicyTooBig


class DaExceptionTooManyTasks(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONTOOMANYTASKS
    ERROR_CODE = 5408
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5408] = DaExceptionTooManyTasks


class DaExceptionPGSnapFailed(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONPGSNAPFAILED
    ERROR_CODE = 5409
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5409] = DaExceptionPGSnapFailed


class DaExceptionTooManyACVmsInSnap(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONTOOMANYACVMSINSNAP
    ERROR_CODE = 5410
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5410] = DaExceptionTooManyACVmsInSnap


class DaExceptionACVMAgentNotFound(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONACVMAGENTNOTFOUND
    ERROR_CODE = 5411
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5411] = DaExceptionACVMAgentNotFound


class DaExceptionACVMAgentUnreachable(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONACVMAGENTUNREACHABLE
    ERROR_CODE = 5412
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5412] = DaExceptionACVMAgentUnreachable


class DaExceptionACVMQuiesceTimeout(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONACVMQUIESCETIMEOUT
    ERROR_CODE = 5413
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5413] = DaExceptionACVMQuiesceTimeout


class DaExceptionACVMQuiesceError(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONACVMQUIESCEERROR
    ERROR_CODE = 5414
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5414] = DaExceptionACVMQuiesceError


class DaExceptionPGPolicyTooManyACElems(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONPGPOLICYTOOMANYACELEMS
    ERROR_CODE = 5415
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5415] = DaExceptionPGPolicyTooManyACElems


class DaExceptionSnapNotAppConsistent(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONSNAPNOTAPPCONSISTENT
    ERROR_CODE = 5416
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5416] = DaExceptionSnapNotAppConsistent


class DaExceptionSnapNotCreatedLocally(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONSNAPNOTCREATEDLOCALLY
    ERROR_CODE = 5417
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5417] = DaExceptionSnapNotCreatedLocally


class DaExceptionPGPolicyScheduleNameTooLong(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONPGPOLICYSCHEDULENAMETOOLONG
    ERROR_CODE = 5418
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5418] = DaExceptionPGPolicyScheduleNameTooLong


class DaExceptionDatastoreNotMounted(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONDATASTORENOTMOUNTED
    ERROR_CODE = 5419
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5419] = DaExceptionDatastoreNotMounted


class DaExceptionReplaceVSSMetaFailed(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONREPLACEVSSMETAFAILED
    ERROR_CODE = 5420
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5420] = DaExceptionReplaceVSSMetaFailed


class DaExceptionBasicdbNotOpen(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONBASICDBNOTOPEN
    ERROR_CODE = 5500
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5500] = DaExceptionBasicdbNotOpen


class DaExceptionBasicdbRequiresXid(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONBASICDBREQUIRESXID
    ERROR_CODE = 5501
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5501] = DaExceptionBasicdbRequiresXid


class DaExceptionBasicdbInvalidXid(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONBASICDBINVALIDXID
    ERROR_CODE = 5502
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5502] = DaExceptionBasicdbInvalidXid


class DaExceptionBasicdbRecordNotFound(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONBASICDBRECORDNOTFOUND
    ERROR_CODE = 5503
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5503] = DaExceptionBasicdbRecordNotFound


class DaExceptionBasicdbRecordExists(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONBASICDBRECORDEXISTS
    ERROR_CODE = 5504
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5504] = DaExceptionBasicdbRecordExists


class DaExceptionBasicdbXactionInuse(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONBASICDBXACTIONINUSE
    ERROR_CODE = 5505
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5505] = DaExceptionBasicdbXactionInuse


class DaExceptionEncryptionIsDisabled(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONENCRYPTIONISDISABLED
    ERROR_CODE = 5600
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5600] = DaExceptionEncryptionIsDisabled


class DaExceptionEncryptionIsEnabled(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONENCRYPTIONISENABLED
    ERROR_CODE = 5601
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5601] = DaExceptionEncryptionIsEnabled


class DaExceptionEncryptionSystemIsLocked(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONENCRYPTIONSYSTEMISLOCKED
    ERROR_CODE = 5602
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5602] = DaExceptionEncryptionSystemIsLocked


class DaExceptionEncryptionSystemIsUnlocked(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONENCRYPTIONSYSTEMISUNLOCKED
    ERROR_CODE = 5603
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5603] = DaExceptionEncryptionSystemIsUnlocked


class DaExceptionEncryptionSetStartupModeFailedToDeleteOldKey(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONENCRYPTIONSETSTARTUPMODEFAILEDTODELETEOLDKEY
    ERROR_CODE = 5604
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5604] = DaExceptionEncryptionSetStartupModeFailedToDeleteOldKey


class DaExceptionEncryptionSetStartupModeFailedToSaveNewKey(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONENCRYPTIONSETSTARTUPMODEFAILEDTOSAVENEWKEY
    ERROR_CODE = 5605
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5605] = DaExceptionEncryptionSetStartupModeFailedToSaveNewKey


class DaExceptionEncryptionPasswordMismatch(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONENCRYPTIONPASSWORDMISMATCH
    ERROR_CODE = 5606
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5606] = DaExceptionEncryptionPasswordMismatch


class DaExceptionEncryptionPasswordNotCompliant(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONENCRYPTIONPASSWORDNOTCOMPLIANT
    ERROR_CODE = 5607
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5607] = DaExceptionEncryptionPasswordNotCompliant


class DaExceptionEncryptionPasswordTooShort(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONENCRYPTIONPASSWORDTOOSHORT
    ERROR_CODE = 5608
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5608] = DaExceptionEncryptionPasswordTooShort


class DaExceptionEncryptionPasswordIllegalSpaces(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONENCRYPTIONPASSWORDILLEGALSPACES
    ERROR_CODE = 5609
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5609] = DaExceptionEncryptionPasswordIllegalSpaces


class DaExceptionEncryptionEnabledStartupModeLocked(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONENCRYPTIONENABLEDSTARTUPMODELOCKED
    ERROR_CODE = 5610
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5610] = DaExceptionEncryptionEnabledStartupModeLocked


class DaExceptionEncryptionSetPasswordSuccessStartupLocked(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONENCRYPTIONSETPASSWORDSUCCESSSTARTUPLOCKED
    ERROR_CODE = 5611
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5611] = DaExceptionEncryptionSetPasswordSuccessStartupLocked


class DaExceptionEncryptionSwitchToFipsFailed(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONENCRYPTIONSWITCHTOFIPSFAILED
    ERROR_CODE = 5612
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5612] = DaExceptionEncryptionSwitchToFipsFailed


class DaExceptionEncryptionSwitchFromFipsFailed(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONENCRYPTIONSWITCHFROMFIPSFAILED
    ERROR_CODE = 5613
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5613] = DaExceptionEncryptionSwitchFromFipsFailed


class DaExceptionEncryptionInFipsApprovedMode(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONENCRYPTIONINFIPSAPPROVEDMODE
    ERROR_CODE = 5614
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5614] = DaExceptionEncryptionInFipsApprovedMode


class DaExceptionEncryptionInFipsValidatedMode(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONENCRYPTIONINFIPSVALIDATEDMODE
    ERROR_CODE = 5615
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5615] = DaExceptionEncryptionInFipsValidatedMode


class DaExceptionRemoteScrollNotFound(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONREMOTESCROLLNOTFOUND
    ERROR_CODE = 5800
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[5800] = DaExceptionRemoteScrollNotFound


class DaExceptionRemoteScrollVersionMismatch(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONREMOTESCROLLVERSIONMISMATCH
    ERROR_CODE = 5801
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5801] = DaExceptionRemoteScrollVersionMismatch


class DaExceptionVmIdNotUnique(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONVMIDNOTUNIQUE
    ERROR_CODE = 5900
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5900] = DaExceptionVmIdNotUnique


class DaExceptionVmxPathConflict(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONVMXPATHCONFLICT
    ERROR_CODE = 5901
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5901] = DaExceptionVmxPathConflict


class DaExceptionVmIsPoweredOn(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONVMISPOWEREDON
    ERROR_CODE = 5902
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5902] = DaExceptionVmIsPoweredOn


class DaExceptionVmDirConflict(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONVMDIRCONFLICT
    ERROR_CODE = 5903
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5903] = DaExceptionVmDirConflict


class DaExceptionVmConfigsUpdateFailed(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONVMCONFIGSUPDATEFAILED
    ERROR_CODE = 5904
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5904] = DaExceptionVmConfigsUpdateFailed


class DaExceptionValidCloneNameNotFound(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONVALIDCLONENAMENOTFOUND
    ERROR_CODE = 5905
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5905] = DaExceptionValidCloneNameNotFound


class DaExceptionVmExists(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONVMEXISTS
    ERROR_CODE = 5906
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5906] = DaExceptionVmExists


class DaExceptionFileInUse(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONFILEINUSE
    ERROR_CODE = 5907
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5907] = DaExceptionFileInUse


class DaExceptionVmInUse(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONVMINUSE
    ERROR_CODE = 5908
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5908] = DaExceptionVmInUse


class DaExceptionVmxFileConflict(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONVMXFILECONFLICT
    ERROR_CODE = 5909
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5909] = DaExceptionVmxFileConflict


class DaExceptionInvalidVirtualDisk(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONINVALIDVIRTUALDISK
    ERROR_CODE = 5910
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5910] = DaExceptionInvalidVirtualDisk


class DaExceptionVmParsingError(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONVMPARSINGERROR
    ERROR_CODE = 5911
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[5911] = DaExceptionVmParsingError


class DaExceptionLicenseInvalid(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONLICENSEINVALID
    ERROR_CODE = 6000
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6000] = DaExceptionLicenseInvalid


class DaExceptionVssError(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONVSSERROR
    ERROR_CODE = 6100
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6100] = DaExceptionVssError


class DaExceptionAccessKeyInvalid(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONACCESSKEYINVALID
    ERROR_CODE = 6200
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6200] = DaExceptionAccessKeyInvalid


class DaExceptionFeatureUnavailble(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONFEATUREUNAVAILBLE
    ERROR_CODE = 6201
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6201] = DaExceptionFeatureUnavailble


class DaExceptionSoftwareNotSetup(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONSOFTWARENOTSETUP
    ERROR_CODE = 6202
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6202] = DaExceptionSoftwareNotSetup


class DaExceptionCloudDvxIncompatible(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONCLOUDDVXINCOMPATIBLE
    ERROR_CODE = 6203
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6203] = DaExceptionCloudDvxIncompatible


class DaExceptionAwsUnresponsive(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONAWSUNRESPONSIVE
    ERROR_CODE = 6205
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6205] = DaExceptionAwsUnresponsive


class DaExceptionAwsError(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONAWSERROR
    ERROR_CODE = 6206
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6206] = DaExceptionAwsError


class DaExceptionCloudDvxInstanceDown(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONCLOUDDVXINSTANCEDOWN
    ERROR_CODE = 6207
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6207] = DaExceptionCloudDvxInstanceDown


class DaExceptionSystemAlreadyManaged(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONSYSTEMALREADYMANAGED
    ERROR_CODE = 6208
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6208] = DaExceptionSystemAlreadyManaged


class DaExceptionSystemNotManaged(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONSYSTEMNOTMANAGED
    ERROR_CODE = 6209
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6209] = DaExceptionSystemNotManaged


class DaExceptionAccessKeyRequired(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONACCESSKEYREQUIRED
    ERROR_CODE = 6210
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6210] = DaExceptionAccessKeyRequired


class DaExceptionCloudDvxTooManySrcSites(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONCLOUDDVXTOOMANYSRCSITES
    ERROR_CODE = 6211
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6211] = DaExceptionCloudDvxTooManySrcSites


class DaExceptionGuestFsInvalidCookie(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONGUESTFSINVALIDCOOKIE
    ERROR_CODE = 6300
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6300] = DaExceptionGuestFsInvalidCookie


class DaExceptionGuestFsErrParse(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONGUESTFSERRPARSE
    ERROR_CODE = 6301
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6301] = DaExceptionGuestFsErrParse


class DaExceptionGuestFsErrOpen(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONGUESTFSERROPEN
    ERROR_CODE = 6302
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6302] = DaExceptionGuestFsErrOpen


class DaExceptionGuestFsErrReaddir(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONGUESTFSERRREADDIR
    ERROR_CODE = 6303
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6303] = DaExceptionGuestFsErrReaddir


class DaExceptionGuestFsErrRead(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONGUESTFSERRREAD
    ERROR_CODE = 6304
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6304] = DaExceptionGuestFsErrRead


class DaExceptionGuestFsErrWrite(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONGUESTFSERRWRITE
    ERROR_CODE = 6305
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6305] = DaExceptionGuestFsErrWrite


class DaExceptionGuestFsUnsupportedVolume(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONGUESTFSUNSUPPORTEDVOLUME
    ERROR_CODE = 6306
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6306] = DaExceptionGuestFsUnsupportedVolume


class DaExceptionIrrInternal(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONIRRINTERNAL
    ERROR_CODE = 6400
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6400] = DaExceptionIrrInternal


class DaExceptionIllegalPlanOperation(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONILLEGALPLANOPERATION
    ERROR_CODE = 6401
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6401] = DaExceptionIllegalPlanOperation


class DaExceptionArchiveEof(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONARCHIVEEOF
    ERROR_CODE = 6500
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[6500] = DaExceptionArchiveEof


class DaExceptionArchiveRetry(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONARCHIVERETRY
    ERROR_CODE = 6501
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[6501] = DaExceptionArchiveRetry


class DaExceptionArchiveWarn(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONARCHIVEWARN
    ERROR_CODE = 6502
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[6502] = DaExceptionArchiveWarn


class DaExceptionArchiveFailed(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONARCHIVEFAILED
    ERROR_CODE = 6503
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[6503] = DaExceptionArchiveFailed


class DaExceptionArchiveFatal(DaExceptionChecked):
    DESCRIPTOR = _DAEXCEPTIONARCHIVEFATAL
    ERROR_CODE = 6504
    BASE_CLASS = DaExceptionChecked
EXCEPTIONS_BY_ERROR_CODE[6504] = DaExceptionArchiveFatal


class DaExceptionExportToOvfFailed(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONEXPORTTOOVFFAILED
    ERROR_CODE = 6600
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[6600] = DaExceptionExportToOvfFailed


class DaExceptionInvalidSiteOp(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONINVALIDSITEOP
    ERROR_CODE = 7400
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[7400] = DaExceptionInvalidSiteOp


class DaExceptionSrmHealthCritical(DaExceptionUnchecked):
    DESCRIPTOR = _DAEXCEPTIONSRMHEALTHCRITICAL
    ERROR_CODE = 7401
    BASE_CLASS = DaExceptionUnchecked
EXCEPTIONS_BY_ERROR_CODE[7401] = DaExceptionSrmHealthCritical


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('B\texception'))
_DAEXCEPTIONBASE.fields_by_name['errorCodes'].has_options = True
_DAEXCEPTIONBASE.fields_by_name['errorCodes']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))
_DAEXCEPTIONBASE.has_options = True
_DAEXCEPTIONBASE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\007\022\005\n\000\020\350\007'))
_DAEXCEPTIONCHECKED.has_options = True
_DAEXCEPTIONCHECKED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?%\022#\n\017DaExceptionBase\020\351\007\032\rChecked Error'))
_DAEXCEPTIONUNCHECKED.has_options = True
_DAEXCEPTIONUNCHECKED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\'\022%\n\017DaExceptionBase\020\352\007\032\017Unchecked Error'))
_DAEXCEPTIONLOCALONLY.has_options = True
_DAEXCEPTIONLOCALONLY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?(\022&\n\017DaExceptionBase\020\353\007\032\020Local Only Error'))
_DAEXCEPTIONNOTFOUND.has_options = True
_DAEXCEPTIONNOTFOUND._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?(\022&\n\024DaExceptionUnchecked\020\314\010\032\tNot found0\001'))
_DAEXCEPTIONOBJECTNOTFOUND.has_options = True
_DAEXCEPTIONOBJECTNOTFOUND._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\023DaExceptionNotFound\020\315\010\032\035Object {notFoundId} not found(\0010\001'))
_DAEXCEPTIONINTERRUPTED.has_options = True
_DAEXCEPTIONINTERRUPTED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\024DaExceptionLocalOnly\020\316\010\032\031Operation was interrupted'))
_DAEXCEPTIONIO.has_options = True
_DAEXCEPTIONIO._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?#\022!\n\022DaExceptionChecked\020\317\010\032\010IO error'))
_DAEXCEPTIONWOULDBLOCK.has_options = True
_DAEXCEPTIONWOULDBLOCK._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\024DaExceptionLocalOnly\020\320\010\032\025Operation would block \001'))
_DAEXCEPTIONOUTOFMEMORY.has_options = True
_DAEXCEPTIONOUTOFMEMORY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\024DaExceptionLocalOnly\020\321\010\032\rOut of Memory'))
_DAEXCEPTIONBUSY.has_options = True
_DAEXCEPTIONBUSY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\024DaExceptionUnchecked\020\322\010\032\rResource busy'))
_DAEXCEPTIONALREADYEXISTS.has_options = True
_DAEXCEPTIONALREADYEXISTS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\024DaExceptionUnchecked\020\323\010\032\rObject exists0\001'))
_DAEXCEPTIONINVALIDARGUMENT.has_options = True
_DAEXCEPTIONINVALIDARGUMENT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?L\022J\n\024DaExceptionUnchecked\020\324\010\032+An invalid argument {argument} was supplied0\0018\001'))
_DAEXCEPTIONNOSPACE.has_options = True
_DAEXCEPTIONNOSPACE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\024DaExceptionUnchecked\020\325\010\032\014Out of space0\001'))
_DAEXCEPTIONUNDERFLOW.has_options = True
_DAEXCEPTIONUNDERFLOW._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\024DaExceptionUnchecked\020\326\010\032\017Value too small'))
_DAEXCEPTIONOVERFLOW.has_options = True
_DAEXCEPTIONOVERFLOW._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\024DaExceptionUnchecked\020\327\010\032\017Value too large'))
_DAEXCEPTIONADDRESSINUSE.has_options = True
_DAEXCEPTIONADDRESSINUSE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\024DaExceptionLocalOnly\020\330\010\032\026Address already in use'))
_DAEXCEPTIONADDRESSNOTAVAILABLE.has_options = True
_DAEXCEPTIONADDRESSNOTAVAILABLE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?H\022F\n\024DaExceptionLocalOnly\020\331\010\032+Non-existent interface or address not local'))
_DAEXCEPTIONCONNECTIONDOWN.has_options = True
_DAEXCEPTIONCONNECTIONDOWN._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\024DaExceptionLocalOnly\020\332\010\032\026Connection was dropped'))
_DAEXCEPTIONTOOMANYCONNECTIONS.has_options = True
_DAEXCEPTIONTOOMANYCONNECTIONS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\024DaExceptionLocalOnly\020\333\010\032\024Too many connections'))
_DAEXCEPTIONCONNECTFAILED.has_options = True
_DAEXCEPTIONCONNECTFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\024DaExceptionLocalOnly\020\334\010\032\031Connection request failed'))
_DAEXCEPTIONTIMEOUT.has_options = True
_DAEXCEPTIONTIMEOUT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\022DaExceptionChecked\020\335\010\032\023Operation timed out'))
_DAEXCEPTIONINTERNAL.has_options = True
_DAEXCEPTIONINTERNAL._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?-\022+\n\024DaExceptionUnchecked\020\336\010\032\016Internal error0\001'))
_DAEXCEPTIONCORRUPTION.has_options = True
_DAEXCEPTIONCORRUPTION._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\337\010\032\026Corruption encountered'))
_DAEXCEPTIONFILEOPENFAILURE.has_options = True
_DAEXCEPTIONFILEOPENFAILURE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\024DaExceptionLocalOnly\020\340\010\032\021File open failure'))
_DAEXCEPTIONTOOMANYPINNED.has_options = True
_DAEXCEPTIONTOOMANYPINNED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\024DaExceptionLocalOnly\020\341\010\032 Too many pinned mobs in mobcache'))
_DAEXCEPTIONFAILURE.has_options = True
_DAEXCEPTIONFAILURE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\024DaExceptionUnchecked\020\342\010\032\020Operation failed0\001'))
_DAEXCEPTIONINVALIDOPERATION.has_options = True
_DAEXCEPTIONINVALIDOPERATION._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\024DaExceptionUnchecked\020\343\010\032\021Invalid operation0\001'))
_DAEXCEPTIONARGUMENTOUTOFRANGE.has_options = True
_DAEXCEPTIONARGUMENTOUTOFRANGE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?j\022h\n\032DaExceptionInvalidArgument\020\344\010\032EValue of argument {argument} must be between min {min} and max {max}.0\001'))
_DAEXCEPTIONTRYAGAIN.has_options = True
_DAEXCEPTIONTRYAGAIN._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\345\010\032\030Resource busy, try again'))
_DAEXCEPTIONVERSIONUNSUPPORTED.has_options = True
_DAEXCEPTIONVERSIONUNSUPPORTED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\022DaExceptionChecked\020\346\010\032!Version {version} is unsupported.'))
_DAEXCEPTIONIHDRMISMATCH.has_options = True
_DAEXCEPTIONIHDRMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\024DaExceptionLocalOnly\020\347\010\032\rIHdr mismatch'))
_DAEXCEPTIONHOSTRPCFAILURE.has_options = True
_DAEXCEPTIONHOSTRPCFAILURE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222??\022=\n\024DaExceptionUnchecked\020\350\010\032\"Host {host} method {method} failed'))
_DAEXCEPTIONSHUTTINGDOWN.has_options = True
_DAEXCEPTIONSHUTTINGDOWN._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?)\022\'\n\022DaExceptionChecked\020\351\010\032\016Shutting down.'))
_DAEXCEPTIONUNEXPECTEDERROR.has_options = True
_DAEXCEPTIONUNEXPECTEDERROR._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\022DaExceptionChecked\020\352\010\032\021Unexpected error.'))
_DAEXCEPTIONFPMISMATCH.has_options = True
_DAEXCEPTIONFPMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?(\022&\n\024DaExceptionLocalOnly\020\353\010\032\013FP mismatch'))
_DAEXCEPTIONBINDTOINTERFACEFAILED.has_options = True
_DAEXCEPTIONBINDTOINTERFACEFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?B\022@\n\024DaExceptionLocalOnly\020\354\010\032%Failed to bind to a network interface'))
_DAEXCEPTIONNAMETOOLONG.has_options = True
_DAEXCEPTIONNAMETOOLONG._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?-\022+\n\024DaExceptionUnchecked\020\355\010\032\020Name is too long'))
_DAEXCEPTIONITERDONE.has_options = True
_DAEXCEPTIONITERDONE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionChecked\020\356\010\032\027Iterator is at the end. \001'))
_DAEXCEPTIONNOINDIRECTFN.has_options = True
_DAEXCEPTIONNOINDIRECTFN._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222??\022=\n\024DaExceptionLocalOnly\020\357\010\032\"No indirect function is available.'))
_DAEXCEPTIONOPCANCELED.has_options = True
_DAEXCEPTIONOPCANCELED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\024DaExceptionUnchecked\020\360\010\032\022Operation canceled'))
_DAEXCEPTIONOPERATIONUNSUPPORTED.has_options = True
_DAEXCEPTIONOPERATIONUNSUPPORTED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\024DaExceptionLocalOnly\020\361\010\032\031Operation is unsupported.'))
_DAEXCEPTIONSENDWOULDBLOCK.has_options = True
_DAEXCEPTIONSENDWOULDBLOCK._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\025DaExceptionWouldBlock\020\362\010\032\032Send operation would block \001'))
_DAEXCEPTIONRECVWOULDBLOCK.has_options = True
_DAEXCEPTIONRECVWOULDBLOCK._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\025DaExceptionWouldBlock\020\363\010\032\032Recv operation would block \001'))
_DAEXCEPTIONCOMPRESSFAILURE.has_options = True
_DAEXCEPTIONCOMPRESSFAILURE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\022DaExceptionChecked\020\260\t\032\020Compress failure'))
_DAEXCEPTIONUNCOMPRESSFAILURE.has_options = True
_DAEXCEPTIONUNCOMPRESSFAILURE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?-\022+\n\022DaExceptionChecked\020\261\t\032\022Uncompress failure'))
_DAEXCEPTIONREGISTRYNODEEXISTS.has_options = True
_DAEXCEPTIONREGISTRYNODEEXISTS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\224\n\032\024Registry node exists'))
_DAEXCEPTIONREGISTRYNONODE.has_options = True
_DAEXCEPTIONREGISTRYNONODE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\225\n\032\033Registry node doesn\'t exist'))
_DAEXCEPTIONREGISTRYCONNECTIONLOSS.has_options = True
_DAEXCEPTIONREGISTRYCONNECTIONLOSS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\226\n\032\030Registry connection loss'))
_DAEXCEPTIONREGISTRYSESSIONEXPIRED.has_options = True
_DAEXCEPTIONREGISTRYSESSIONEXPIRED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\227\n\032\030Registry session expired'))
_DAEXCEPTIONREGISTRYCONNECTIONTIMEOUT.has_options = True
_DAEXCEPTIONREGISTRYCONNECTIONTIMEOUT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\230\n\032\033Registry connection timeout'))
_DAEXCEPTIONREGISTRYOPERATIONTIMEOUT.has_options = True
_DAEXCEPTIONREGISTRYOPERATIONTIMEOUT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\022DaExceptionChecked\020\231\n\032\032Registry operation timeout'))
_DAEXCEPTIONREGISTRYBADVERSION.has_options = True
_DAEXCEPTIONREGISTRYBADVERSION._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\232\n\032\024Registry bad version'))
_DAEXCEPTIONREGISTRYEMPTYNODE.has_options = True
_DAEXCEPTIONREGISTRYEMPTYNODE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\234\n\032\026Registry node is empty \001'))
_DAEXCEPTIONREGISTRYIPMISMATCH.has_options = True
_DAEXCEPTIONREGISTRYIPMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\022DaExceptionChecked\020\235\n\032\"Failed to validate the floating ip'))
_DAEXCEPTIONREGISTRYDVXIDMISMATCH.has_options = True
_DAEXCEPTIONREGISTRYDVXIDMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\022DaExceptionChecked\020\236\n\032\035Failed to validate the dvx id'))
_DAEXCEPTIONRPCCLIENTPANIC.has_options = True
_DAEXCEPTIONRPCCLIENTPANIC._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\024DaExceptionUnchecked\020\370\n\032#Rpc server requests client to panic'))
_DAEXCEPTIONRPCDECODEFAILED.has_options = True
_DAEXCEPTIONRPCDECODEFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\024DaExceptionUnchecked\020\371\n\032\021Rpc decode failed'))
_DAEXCEPTIONRPCSERVICENOTHERE.has_options = True
_DAEXCEPTIONRPCSERVICENOTHERE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\024DaExceptionUnchecked\020\372\n\032\"Rpc service {serviceName} not here(\001'))
_DAEXCEPTIONRPCSERVICEUNKNOWN.has_options = True
_DAEXCEPTIONRPCSERVICEUNKNOWN._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\024DaExceptionLocalOnly\020\373\n\032\023Rpc service unknown'))
_DAEXCEPTIONRPCMETHODUNKNOWN.has_options = True
_DAEXCEPTIONRPCMETHODUNKNOWN._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?>\022<\n\024DaExceptionUnchecked\020\374\n\032\037Rpc method {methodName} unknown(\001'))
_DAEXCEPTIONRPCASYNCRESPONSE.has_options = True
_DAEXCEPTIONRPCASYNCRESPONSE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\024DaExceptionLocalOnly\020\375\n\032\031Rpc asynchronous response \001'))
_DAEXCEPTIONRPCQUEUEFULL.has_options = True
_DAEXCEPTIONRPCQUEUEFULL._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\024DaExceptionUnchecked\020\376\n\032\025Rpc server queue full'))
_DAEXCEPTIONRPCREQUESTFENCED.has_options = True
_DAEXCEPTIONRPCREQUESTFENCED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\024DaExceptionUnchecked\020\377\n\032\035Rpc server request fenced out'))
_DAEXCEPTIONRPCINVALIDHANDSHAKE.has_options = True
_DAEXCEPTIONRPCINVALIDHANDSHAKE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\024DaExceptionLocalOnly\020\200\013\032$Rpc connection handshake was invalid'))
_DAEXCEPTIONRPCVERSIONMISMATCH.has_options = True
_DAEXCEPTIONRPCVERSIONMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n\024DaExceptionUnchecked\020\201\013\032.Rpc to server with mismatched software version'))
_DAEXCEPTIONRPCPROTOCOLUNSUPPORTED.has_options = True
_DAEXCEPTIONRPCPROTOCOLUNSUPPORTED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\024DaExceptionLocalOnly\020\202\013\032\035Protocol type is unsupported.'))
_DAEXCEPTIONRPCTRANSPORTUNSUPPORTED.has_options = True
_DAEXCEPTIONRPCTRANSPORTUNSUPPORTED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\024DaExceptionLocalOnly\020\203\013\032\036Transport type is unsupported.'))
_DAEXCEPTIONRPCREQUESTREJECTED.has_options = True
_DAEXCEPTIONRPCREQUESTREJECTED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\024DaExceptionUnchecked\020\204\013\032$Rpc request rejected during receive.'))
_DAEXCEPTIONRPCCLIENTRETRY.has_options = True
_DAEXCEPTIONRPCCLIENTRETRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n\024DaExceptionUnchecked\020\205\013\032.Service indicates client should retry request.'))
_DAEXCEPTIONRPCCLIENTCHECKSUMRETRY.has_options = True
_DAEXCEPTIONRPCCLIENTCHECKSUMRETRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?k\022i\n\024DaExceptionUnchecked\020\206\013\032NService indicates client should retry request that failed checksum validation.'))
_DAEXCEPTIONRPCTOPOLOGYMISMATCH.has_options = True
_DAEXCEPTIONRPCTOPOLOGYMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?S\022Q\n\024DaExceptionUnchecked\020\207\013\0326Client/Server notions of topology number do not match.'))
_DAEXCEPTIONRPCTIMEOUT.has_options = True
_DAEXCEPTIONRPCTIMEOUT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\024DaExceptionLocalOnly\020\210\013\032#Rpc timeout waiting for a response.'))
_DAEXCEPTIONRPCDVXIDMISMATCH.has_options = True
_DAEXCEPTIONRPCDVXIDMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?I\022G\n\024DaExceptionUnchecked\020\211\013\032,Client/Server notions of dvxId do not match.'))
_DAEXCEPTIONIOOPEN.has_options = True
_DAEXCEPTIONIOOPEN._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\022DaExceptionChecked\020\334\013\032\017IO open failure'))
_DAEXCEPTIONIOCLOSE.has_options = True
_DAEXCEPTIONIOCLOSE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\022DaExceptionChecked\020\335\013\032\020IO close failure'))
_DAEXCEPTIONIOCREATEIOCTXT.has_options = True
_DAEXCEPTIONIOCREATEIOCTXT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionChecked\020\336\013\032\031IO context create failure'))
_DAEXCEPTIONIODESTROYIOCTXT.has_options = True
_DAEXCEPTIONIODESTROYIOCTXT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\022DaExceptionChecked\020\337\013\032\032IO context destroy failure'))
_DAEXCEPTIONIOCREATEIOCB.has_options = True
_DAEXCEPTIONIOCREATEIOCB._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?>\022<\n\022DaExceptionChecked\020\340\013\032#IO control structure create failure'))
_DAEXCEPTIONIOSUBMIT.has_options = True
_DAEXCEPTIONIOSUBMIT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\022DaExceptionChecked\020\341\013\032\021IO submit failure'))
_DAEXCEPTIONIOWAITFORCOMPLETION.has_options = True
_DAEXCEPTIONIOWAITFORCOMPLETION._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\022DaExceptionChecked\020\342\013\032\017No IO completed'))
_DAEXCEPTIONIONORESOURCES.has_options = True
_DAEXCEPTIONIONORESOURCES._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\022DaExceptionChecked\020\343\013\032\017No IO resources'))
_DAEXCEPTIONIOEMPTYQUEUE.has_options = True
_DAEXCEPTIONIOEMPTYQUEUE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?)\022\'\n\022DaExceptionChecked\020\344\013\032\016Empty IO queue'))
_DAEXCEPTIONIOINCOMPLETE.has_options = True
_DAEXCEPTIONIOINCOMPLETE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?(\022&\n\022DaExceptionChecked\020\345\013\032\rIO incomplete'))
_DAEXCEPTIONIOTIMEOUT.has_options = True
_DAEXCEPTIONIOTIMEOUT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?%\022#\n\022DaExceptionChecked\020\346\013\032\nIO timeout'))
_DAEXCEPTIONIOCREATECTRLBLK.has_options = True
_DAEXCEPTIONIOCREATECTRLBLK._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\022DaExceptionChecked\020\347\013\032!Creating IO control block failure'))
_DAEXCEPTIONIODEVICE.has_options = True
_DAEXCEPTIONIODEVICE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\022DaExceptionChecked\020\350\013\032\021IO device failure'))
_DAEXCEPTIONCHUNKSTORENOTFOUND.has_options = True
_DAEXCEPTIONCHUNKSTORENOTFOUND._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\022DaExceptionChecked\020\300\014\032\017Chunk not found'))
_DAEXCEPTIONCHUNKSTORECOLLISION.has_options = True
_DAEXCEPTIONCHUNKSTORECOLLISION._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\022DaExceptionChecked\020\301\014\032(Chunk already exists with different data'))
_DAEXCEPTIONCHUNKSTOREITERATIONCOMPLETE.has_options = True
_DAEXCEPTIONCHUNKSTOREITERATIONCOMPLETE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\302\014\032\030Chunk iteration complete'))
_DAEXCEPTIONCHUNKSTORENULLCHUNK.has_options = True
_DAEXCEPTIONCHUNKSTORENULLCHUNK._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?%\022#\n\022DaExceptionChecked\020\303\014\032\nNull chunk'))
_DAEXCEPTIONCHUNKSTOREINDEXFULL.has_options = True
_DAEXCEPTIONCHUNKSTOREINDEXFULL._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\022DaExceptionChecked\020\304\014\032\020Chunk index full'))
_DAEXCEPTIONCHUNKSTOREOUTOFSPACE.has_options = True
_DAEXCEPTIONCHUNKSTOREOUTOFSPACE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\022DaExceptionChecked\020\305\014\032\032ChunkStore is out of space'))
_DAEXCEPTIONCHUNKSTORECHUNKTOOLARGE.has_options = True
_DAEXCEPTIONCHUNKSTORECHUNKTOOLARGE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?-\022+\n\022DaExceptionChecked\020\306\014\032\022Chunk is too large'))
_DAEXCEPTIONCHUNKSTOREINVALIDOFFSET.has_options = True
_DAEXCEPTIONCHUNKSTOREINVALIDOFFSET._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\307\014\032\024Invalid chunk offset'))
_DAEXCEPTIONCHUNKSTORECORRUPTION.has_options = True
_DAEXCEPTIONCHUNKSTORECORRUPTION._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\022DaExceptionChecked\020\310\014\032\025ChunkStore corruption'))
_DAEXCEPTIONCHUNKSTOREINVALIDDEVICE.has_options = True
_DAEXCEPTIONCHUNKSTOREINVALIDDEVICE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionChecked\020\311\014\032\031Invalid ChunkStore device'))
_DAEXCEPTIONCHUNKSTOREINVALIDCHKSUMTYPE.has_options = True
_DAEXCEPTIONCHUNKSTOREINVALIDCHKSUMTYPE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\312\014\032\033Invalid chunk checksum type'))
_DAEXCEPTIONCHUNKSTORECHUNKBUSY.has_options = True
_DAEXCEPTIONCHUNKSTORECHUNKBUSY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?(\022&\n\022DaExceptionChecked\020\313\014\032\rChunk is busy'))
_DAEXCEPTIONCHUNKSTOREINVALIDKEY.has_options = True
_DAEXCEPTIONCHUNKSTOREINVALIDKEY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\022DaExceptionChecked\020\314\014\032\021Invalid chunk key'))
_DAEXCEPTIONCHUNKSTOREFOREIGNDEVICE.has_options = True
_DAEXCEPTIONCHUNKSTOREFOREIGNDEVICE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionChecked\020\315\014\032\031Foreign ChunkStore device'))
_DAEXCEPTIONCHUNKSTORECRASHED.has_options = True
_DAEXCEPTIONCHUNKSTORECRASHED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?-\022+\n\022DaExceptionChecked\020\316\014\032\022ChunkStore crashed'))
_DAEXCEPTIONCHUNKSTORESUFFIXTOOLONG.has_options = True
_DAEXCEPTIONCHUNKSTORESUFFIXTOOLONG._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?L\022J\n\022DaExceptionChecked\020\317\014\0321Unexpected suffix while deleting chunks by prefix'))
_DAEXCEPTIONCHUNKSTORERETRYWRITE.has_options = True
_DAEXCEPTIONCHUNKSTORERETRYWRITE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?W\022U\n\022DaExceptionChecked\020\320\014\032<Write verification failed and the write needs to be retried.'))
_DAEXCEPTIONCHUNKSTOREENABLESYNTHETICCHUNKS.has_options = True
_DAEXCEPTIONCHUNKSTOREENABLESYNTHETICCHUNKS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\022DaExceptionChecked\020\321\014\032\036Enable synthetic chunks first.'))
_DAEXCEPTIONCHUNKSTOREUNMANAGED.has_options = True
_DAEXCEPTIONCHUNKSTOREUNMANAGED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\022DaExceptionChecked\020\322\014\032\020No Disk Manager.'))
_DAEXCEPTIONCHUNKSTORECHUNKREPAIRING.has_options = True
_DAEXCEPTIONCHUNKSTORECHUNKREPAIRING._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\323\014\032\030Chunk is being repaired.'))
_DAEXCEPTIONFSTORENOFREESPACE.has_options = True
_DAEXCEPTIONFSTORENOFREESPACE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\022DaExceptionChecked\020\244\r\032\027FlashStore out of space'))
_DAEXCEPTIONFSTOREVEBSEALED.has_options = True
_DAEXCEPTIONFSTOREVEBSEALED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?B\022@\n\022DaExceptionChecked\020\245\r\032\'Failed to seal FlashStore VEB for write'))
_DAEXCEPTIONFSTOREVEBUNSEALED.has_options = True
_DAEXCEPTIONFSTOREVEBUNSEALED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\022DaExceptionChecked\020\246\r\032&Failed to read unsealed FlashStore VEB'))
_DAEXCEPTIONFSTOREINVALIDVEB.has_options = True
_DAEXCEPTIONFSTOREINVALIDVEB._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\247\r\032\026Invalid FlashStore VEB'))
_DAEXCEPTIONFSTOREINVALIDARGUMENTS.has_options = True
_DAEXCEPTIONFSTOREINVALIDARGUMENTS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\250\r\032\033Invalid FlashStore argument'))
_DAEXCEPTIONFSTORENORESOURCES.has_options = True
_DAEXCEPTIONFSTORENORESOURCES._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\251\r\032\033Out of FlashStore resources'))
_DAEXCEPTIONFSTOREWRITEFAILED.has_options = True
_DAEXCEPTIONFSTOREWRITEFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\022DaExceptionChecked\020\252\r\032\027FlashStore write failed'))
_DAEXCEPTIONSTORAGEPOOLDOWN.has_options = True
_DAEXCEPTIONSTORAGEPOOLDOWN._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\211\016\032\024Storage pool is down'))
_DAEXCEPTIONSTORAGEPOOLOUTOFSPACE.has_options = True
_DAEXCEPTIONSTORAGEPOOLOUTOFSPACE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?7\0225\n\022DaExceptionChecked\020\212\016\032\034Storage pool is out of space'))
_DAEXCEPTIONSTORAGESTRIPENOTFOUND.has_options = True
_DAEXCEPTIONSTORAGESTRIPENOTFOUND._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\213\016\032\030Storage stripe not found'))
_DAEXCEPTIONSTORAGESTRIPECORRUPT.has_options = True
_DAEXCEPTIONSTORAGESTRIPECORRUPT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\215\016\032\026Storage stripe corrupt'))
_DAEXCEPTIONSTORAGESTRIPEREBUILDJOBFAILURE.has_options = True
_DAEXCEPTIONSTORAGESTRIPEREBUILDJOBFAILURE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\022DaExceptionChecked\020\216\016\032\"Storage stripe rebuild job failure'))
_DAEXCEPTIONSTORAGESTRIPESETNOTFOUND.has_options = True
_DAEXCEPTIONSTORAGESTRIPESETNOTFOUND._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\217\016\032\024Stripe Set not found'))
_DAEXCEPTIONSTORAGESTRIPESCRUBJOBFAILURE.has_options = True
_DAEXCEPTIONSTORAGESTRIPESCRUBJOBFAILURE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\220\016\032 Storage stripe scrub job failure'))
_DAEXCEPTIONSTORAGEPOOLDRIVEBUSY.has_options = True
_DAEXCEPTIONSTORAGEPOOLDRIVEBUSY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?F\022D\n\022DaExceptionChecked\020\221\016\032)Cannot remove drive {diskId} at this time(\001'))
_DAEXCEPTIONSTORAGESTRIPERECONSTMORENEEDED.has_options = True
_DAEXCEPTIONSTORAGESTRIPERECONSTMORENEEDED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?L\022J\n\024DaExceptionLocalOnly\020\222\016\032-Storage stripe reconstruct, more tiles needed \001'))
_DAEXCEPTIONTOOFEWDRIVES.has_options = True
_DAEXCEPTIONTOOFEWDRIVES._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?c\022a\n\037DaExceptionStoragePoolDriveBusy\020\223\016\0329Too few drives would remain, cannot remove drive {diskId}(\001'))
_DAEXCEPTIONSPARECAPACITYEXCEEDED.has_options = True
_DAEXCEPTIONSPARECAPACITYEXCEEDED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?h\022f\n\037DaExceptionStoragePoolDriveBusy\020\224\016\032>Spare capacity would be exceeded, cannot remove drive {diskId}(\001'))
_DAEXCEPTIONSTORAGEPOOLNOTOK.has_options = True
_DAEXCEPTIONSTORAGEPOOLNOTOK._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\022DaExceptionChecked\020\225\016\032\035Storage pool status is not ok'))
_DAEXCEPTIONVDISKRDONLYSNAPSHOT.has_options = True
_DAEXCEPTIONVDISKRDONLYSNAPSHOT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\022DaExceptionChecked\020\354\016\032\035VDisk is a read-only snapshot'))
_DAEXCEPTIONVDISKMAXOPENSESSIONS.has_options = True
_DAEXCEPTIONVDISKMAXOPENSESSIONS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\022DaExceptionChecked\020\355\016\032&Maximum open session reached for VDisk'))
_DAEXCEPTIONVDISKINVALIDARGS.has_options = True
_DAEXCEPTIONVDISKINVALIDARGS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\022DaExceptionChecked\020\356\016\032\025Invalid XMap argument'))
_DAEXCEPTIONVDISKSNAPIDMISMATCH.has_options = True
_DAEXCEPTIONVDISKSNAPIDMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?G\022E\n\022DaExceptionChecked\020\357\016\032,SnapId from DMap is <= snapId from NameSpace'))
_DAEXCEPTIONVDISKBLOCKKEYMISMATCH.has_options = True
_DAEXCEPTIONVDISKBLOCKKEYMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\022DaExceptionChecked\020\360\016\032\036Dmap block value size mismatch'))
_DAEXCEPTIONVDISKBLOCKOFFSETMISMATCH.has_options = True
_DAEXCEPTIONVDISKBLOCKOFFSETMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\022DaExceptionChecked\020\361\016\032\037Dmap block value offset invalid'))
_DAEXCEPTIONVDISKXMAPCHECKSUMMISMATCH.has_options = True
_DAEXCEPTIONVDISKXMAPCHECKSUMMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\362\016\032\026XMap checksum mismatch'))
_DAEXCEPTIONVDISKCLUMPREFCHECKSUMMISMATCH.has_options = True
_DAEXCEPTIONVDISKCLUMPREFCHECKSUMMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?E\022C\n\022DaExceptionChecked\020\363\016\032*Checksums for SR enumeration did not match'))
_DAEXCEPTIONVDISKMAXOPENEDEXCEEDED.has_options = True
_DAEXCEPTIONVDISKMAXOPENEDEXCEEDED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\022DaExceptionChecked\020\364\016\032(More VDisks are open than the array size'))
_DAEXCEPTIONVDISKLEASETOKENALREADYEXISTS.has_options = True
_DAEXCEPTIONVDISKLEASETOKENALREADYEXISTS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\365\016\032 VDisk lease token already exists'))
_DAEXCEPTIONLEASEMISMATCH.has_options = True
_DAEXCEPTIONLEASEMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?7\0225\n\022DaExceptionChecked\020\366\016\032\034Lease mismatch or expiration'))
_DAEXCEPTIONVDISKCPTIMEOUT.has_options = True
_DAEXCEPTIONVDISKCPTIMEOUT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\367\016\032 CP Request to FMgr was timed-out'))
_DAEXCEPTIONVDISKREPACKFAILED.has_options = True
_DAEXCEPTIONVDISKREPACKFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\022DaExceptionChecked\020\370\016\032%VDisk repack recipe generation failed'))
_DAEXCEPTIONVDISKRECIPESTALE.has_options = True
_DAEXCEPTIONVDISKRECIPESTALE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?n\022l\n\022DaExceptionChecked\020\371\016\032SVDisk cannot return repack recipe because new snaps are created and recipe is stale'))
_DAEXCEPTIONVDISKRECIPENOTFOUND.has_options = True
_DAEXCEPTIONVDISKRECIPENOTFOUND._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\022DaExceptionChecked\020\372\016\032\037VDisk cannot find repack recipe'))
_DAEXCEPTIONVDISKSTALESERVERUUID.has_options = True
_DAEXCEPTIONVDISKSTALESERVERUUID._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?J\022H\n\022DaExceptionChecked\020\373\016\032/VDiskCtrlrServer\'s UUID in the request is stale'))
_DAEXCEPTIONVDISKNOWRITELEASE.has_options = True
_DAEXCEPTIONVDISKNOWRITELEASE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?E\022C\n\022DaExceptionChecked\020\374\016\032*VDiskCtrlrServer does not have write lease'))
_DAEXCEPTIONVDISKDUMPMISSINGFPFOUND.has_options = True
_DAEXCEPTIONVDISKDUMPMISSINGFPFOUND._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?P\022N\n\022DaExceptionChecked\020\375\016\0325VDiskDump found an FP matching a missing FP provided.'))
_DAEXCEPTIONVDISKJOBCANCELED.has_options = True
_DAEXCEPTIONVDISKJOBCANCELED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222??\022=\n\022DaExceptionChecked\020\376\016\032$VDisk library job has been canceled.'))
_DAEXCEPTIONVDISKHASWRITELEASE.has_options = True
_DAEXCEPTIONVDISKHASWRITELEASE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\022DaExceptionChecked\020\377\016\032\036VDisk has a valid write lease.'))
_DAEXCEPTIONVDISKREPLCHECKSUMMISMATCH.has_options = True
_DAEXCEPTIONVDISKREPLCHECKSUMMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\022DaExceptionChecked\020\200\017\032\"Checksum mismatch after ApplyDiff.'))
_DAEXCEPTIONVDISKSETLIVEINVALIDARG.has_options = True
_DAEXCEPTIONVDISKSETLIVEINVALIDARG._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\022DaExceptionChecked\020\201\017\032(SetLiveSnaps received invalid arguments.'))
_DAEXCEPTIONFILEPERM.has_options = True
_DAEXCEPTIONFILEPERM._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?$\022\"\n\022DaExceptionChecked\020\320\017\032\tNot owner'))
_DAEXCEPTIONFILENOENT.has_options = True
_DAEXCEPTIONFILENOENT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionChecked\020\321\017\032\031No such file or directory'))
_DAEXCEPTIONFILEIO.has_options = True
_DAEXCEPTIONFILEIO._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?$\022\"\n\022DaExceptionChecked\020\322\017\032\tI/O error'))
_DAEXCEPTIONFILENXIO.has_options = True
_DAEXCEPTIONFILENXIO._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\022DaExceptionChecked\020\323\017\032\032I/O error - no such device'))
_DAEXCEPTIONFILEACCES.has_options = True
_DAEXCEPTIONFILEACCES._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\022DaExceptionChecked\020\324\017\032\021Permission denied'))
_DAEXCEPTIONFILEEXIST.has_options = True
_DAEXCEPTIONFILEEXIST._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\022DaExceptionChecked\020\325\017\032\023File already exists'))
_DAEXCEPTIONFILEXDEV.has_options = True
_DAEXCEPTIONFILEXDEV._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionChecked\020\326\017\032\031Invalid cross device link'))
_DAEXCEPTIONFILENODEV.has_options = True
_DAEXCEPTIONFILENODEV._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?)\022\'\n\022DaExceptionChecked\020\327\017\032\016No such device'))
_DAEXCEPTIONFILENOTDIR.has_options = True
_DAEXCEPTIONFILENOTDIR._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\022DaExceptionChecked\020\330\017\032\017Not a directory'))
_DAEXCEPTIONFILEISDIR.has_options = True
_DAEXCEPTIONFILEISDIR._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?)\022\'\n\022DaExceptionChecked\020\331\017\032\016Is a directory'))
_DAEXCEPTIONFILEINVAL.has_options = True
_DAEXCEPTIONFILEINVAL._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\022DaExceptionChecked\020\332\017\032\020Invalid argument'))
_DAEXCEPTIONFILEFBIG.has_options = True
_DAEXCEPTIONFILEFBIG._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?)\022\'\n\022DaExceptionChecked\020\333\017\032\016File too large'))
_DAEXCEPTIONFILEROFS.has_options = True
_DAEXCEPTIONFILEROFS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\024DaExceptionUnchecked\020\335\017\032\024Read-only filesystem'))
_DAEXCEPTIONFILEMLINK.has_options = True
_DAEXCEPTIONFILEMLINK._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\022DaExceptionChecked\020\336\017\032\023Too many hard links'))
_DAEXCEPTIONFILENAMETOOLONG.has_options = True
_DAEXCEPTIONFILENAMETOOLONG._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\337\017\032\024Filename is too long'))
_DAEXCEPTIONFILENOTEMPTY.has_options = True
_DAEXCEPTIONFILENOTEMPTY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\340\017\032\026Directory is not empty'))
_DAEXCEPTIONFILEDQUOT.has_options = True
_DAEXCEPTIONFILEDQUOT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\022DaExceptionChecked\020\341\017\032\027Resource quota exceeded'))
_DAEXCEPTIONFILESTALE.has_options = True
_DAEXCEPTIONFILESTALE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\024DaExceptionUnchecked\020\342\017\032\022Illegal filehandle'))
_DAEXCEPTIONFILEREMOTE.has_options = True
_DAEXCEPTIONFILEREMOTE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\022DaExceptionChecked\020\343\017\032\036Filehandle is not server local'))
_DAEXCEPTIONFILEBADHANDLE.has_options = True
_DAEXCEPTIONFILEBADHANDLE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\344\017\032\026Illegal NFS filehandle'))
_DAEXCEPTIONFILENOTSYNC.has_options = True
_DAEXCEPTIONFILENOTSYNC._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\345\017\032\026Setattr update problem'))
_DAEXCEPTIONFILEBADCOOKIE.has_options = True
_DAEXCEPTIONFILEBADCOOKIE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?-\022+\n\022DaExceptionChecked\020\346\017\032\022Bad readdir cookie'))
_DAEXCEPTIONFILENOTSUPP.has_options = True
_DAEXCEPTIONFILENOTSUPP._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\022DaExceptionChecked\020\347\017\032\027Operation not supported'))
_DAEXCEPTIONFILETOOSMALL.has_options = True
_DAEXCEPTIONFILETOOSMALL._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\022DaExceptionChecked\020\350\017\032\023Buffer is too small'))
_DAEXCEPTIONFILESERVERFAULT.has_options = True
_DAEXCEPTIONFILESERVERFAULT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\351\017\032\024Unknown server error'))
_DAEXCEPTIONFILEBADTYPE.has_options = True
_DAEXCEPTIONFILEBADTYPE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\022DaExceptionChecked\020\352\017\032\020Invalid filetype'))
_DAEXCEPTIONFILEJUKEBOX.has_options = True
_DAEXCEPTIONFILEJUKEBOX._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\353\017\032\030Server operation pending'))
_DAEXCEPTIONFILEFPRINTNOTFOUND.has_options = True
_DAEXCEPTIONFILEFPRINTNOTFOUND._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\022DaExceptionChecked\020\354\017\032\025Fingerprint not found'))
_DAEXCEPTIONFILEABORTED.has_options = True
_DAEXCEPTIONFILEABORTED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\022DaExceptionChecked\020\355\017\032\021Operation aborted'))
_DAEXCEPTIONFILEBADDATASTOREID.has_options = True
_DAEXCEPTIONFILEBADDATASTOREID._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?7\0225\n\022DaExceptionChecked\020\356\017\032\034Datastore id hasn\'t been set'))
_DAEXCEPTIONFILESTALEDATA.has_options = True
_DAEXCEPTIONFILESTALEDATA._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\357\017\032 Fingerprint for data has changed'))
_DAEXCEPTIONFILEFROZEN.has_options = True
_DAEXCEPTIONFILEFROZEN._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\360\017\032\026File is already frozen'))
_DAEXCEPTIONFILEBADSNODE.has_options = True
_DAEXCEPTIONFILEBADSNODE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\022DaExceptionChecked\020\361\017\032\036Unable to get shared node info'))
_DAEXCEPTIONFILENAMESPACEBADSTATE.has_options = True
_DAEXCEPTIONFILENAMESPACEBADSTATE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\022DaExceptionChecked\020\362\017\032\037Namespace not in expected state'))
_DAEXCEPTIONFILEWRONGFMGRHANDLER.has_options = True
_DAEXCEPTIONFILEWRONGFMGRHANDLER._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\363\017\032 Wrong FMgr handle for given file'))
_DAEXCEPTIONFILERANGE.has_options = True
_DAEXCEPTIONFILERANGE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\022DaExceptionChecked\020\364\017\032\035Extended attribute is too big'))
_DAEXCEPTIONFILEINTSYSTEMCALL.has_options = True
_DAEXCEPTIONFILEINTSYSTEMCALL._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\022DaExceptionChecked\020\365\017\032\027Interrupted system call'))
_DAEXCEPTIONFILEBROKENPIPE.has_options = True
_DAEXCEPTIONFILEBROKENPIPE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?&\022$\n\022DaExceptionChecked\020\366\017\032\013Broken Pipe'))
_DAEXCEPTIONFILEWRONGFORMAT.has_options = True
_DAEXCEPTIONFILEWRONGFORMAT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\'\022%\n\022DaExceptionChecked\020\367\017\032\014Wrong format'))
_DAEXCEPTIONFILETOOMANYSNAPS.has_options = True
_DAEXCEPTIONFILETOOMANYSNAPS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\022DaExceptionChecked\020\370\017\032\027File has too many snaps'))
_DAEXCEPTIONFILESTALESESSION.has_options = True
_DAEXCEPTIONFILESTALESESSION._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?(\022&\n\022DaExceptionChecked\020\371\017\032\rStale Session'))
_DAEXCEPTIONFILEEXPIREDSESSION.has_options = True
_DAEXCEPTIONFILEEXPIREDSESSION._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\022DaExceptionChecked\020\372\017\032\017Session Expired'))
_DAEXCEPTIONFILENAMEISNULL.has_options = True
_DAEXCEPTIONFILENAMEISNULL._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\024DaExceptionUnchecked\020\373\017\032\027File/Path name is NULL.'))
_DAEXCEPTIONFILENAMEISEMPTY.has_options = True
_DAEXCEPTIONFILENAMEISEMPTY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\024DaExceptionUnchecked\020\374\017\032\030File/Path name is Empty.'))
_DAEXCEPTIONFILENAMEHASILLEGALCHARS.has_options = True
_DAEXCEPTIONFILENAMEHASILLEGALCHARS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?L\022J\n\024DaExceptionUnchecked\020\375\017\032/File/Path name has illegal characters. / .. ? *'))
_DAEXCEPTIONDATASTOREDISABLED.has_options = True
_DAEXCEPTIONDATASTOREDISABLED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\376\017\032\026Datastore is disabled.'))
_DAEXCEPTIONMAXDATASTORESCREATED.has_options = True
_DAEXCEPTIONMAXDATASTORESCREATED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\022DaExceptionChecked\020\377\017\032)Max supported datastores already created.'))
_DAEXCEPTIONDATASTORENOTFOUND.has_options = True
_DAEXCEPTIONDATASTORENOTFOUND._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\200\020\032\024Datastore not found.'))
_DAEXCEPTIONDATASTOREMAXEXPORTS.has_options = True
_DAEXCEPTIONDATASTOREMAXEXPORTS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?H\022F\n\022DaExceptionChecked\020\201\020\032-Max number of exports for datastore exceeded.'))
_DAEXCEPTIONDATASTOREBUSY.has_options = True
_DAEXCEPTIONDATASTOREBUSY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\351\001\022\346\001\n\022DaExceptionChecked\020\202\020\032\314\001Datastore is busy.\nDemote or delete the following protection groups: {protGrps}\nUsed in following srmEnabled protection groups: {srmProtGrps}\nUnmount the datastore from the following hosts: {mountedHosts}'))
_DAEXCEPTIONRCACHENORESOURCES.has_options = True
_DAEXCEPTIONRCACHENORESOURCES._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\264\020\032\033Read cache out of resources'))
_DAEXCEPTIONRCACHERESCUEABORTED.has_options = True
_DAEXCEPTIONRCACHERESCUEABORTED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionChecked\020\265\020\032\031Read cache rescue aborted'))
_DAEXCEPTIONRCACHEINVALHANDLE.has_options = True
_DAEXCEPTIONRCACHEINVALHANDLE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222??\022=\n\022DaExceptionChecked\020\266\020\032$Read cache invalid vdisk snap handle'))
_DAEXCEPTIONRCACHEREMOTECLUMPMISS.has_options = True
_DAEXCEPTIONRCACHEREMOTECLUMPMISS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\024DaExceptionUnchecked\020\267\020\032\035Missed clump in remote RCache'))
_DAEXCEPTIONGFPINDEXNEEDRECOVERY.has_options = True
_DAEXCEPTIONGFPINDEXNEEDRECOVERY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\230\021\032 Fingerprint index needs recovery'))
_DAEXCEPTIONGFPINDEXINSERTOLDCONTAINERID.has_options = True
_DAEXCEPTIONGFPINDEXINSERTOLDCONTAINERID._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\022DaExceptionChecked\020\231\021\032(Fingerprint index inserted old container'))
_DAEXCEPTIONGFPINDEXINSERTSPANCONTAINER.has_options = True
_DAEXCEPTIONGFPINDEXINSERTSPANCONTAINER._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\022DaExceptionChecked\020\232\021\032)Fingerprint index insert spans containers'))
_DAEXCEPTIONGFPINDEXSTILLRUNNING.has_options = True
_DAEXCEPTIONGFPINDEXSTILLRUNNING._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\233\021\032 Fingerprint server still running'))
_DAEXCEPTIONGFPINDEXOUTOFRANGE.has_options = True
_DAEXCEPTIONGFPINDEXOUTOFRANGE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?>\022<\n\022DaExceptionChecked\020\234\021\032#Fingerprint is out of service range'))
_DAEXCEPTIONGFPINDEXINMIGRATIONRANGE.has_options = True
_DAEXCEPTIONGFPINDEXINMIGRATIONRANGE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?>\022<\n\024DaExceptionLocalOnly\020\235\021\032!Fingerprint is in migration range'))
_DAEXCEPTIONGFPINDEXSTALEHANDLE.has_options = True
_DAEXCEPTIONGFPINDEXSTALEHANDLE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\022DaExceptionChecked\020\236\021\032\036Scroll content handle is stale'))
_DAEXCEPTIONLEASEMGRRETRY.has_options = True
_DAEXCEPTIONLEASEMGRRETRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?&\022$\n\022DaExceptionChecked\020\374\021\032\013Lease retry'))
_DAEXCEPTIONLEASEPENDINGREVOKE.has_options = True
_DAEXCEPTIONLEASEPENDINGREVOKE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\375\021\032\033Lease is pending revocation'))
_DAEXCEPTIONFMGROBJECTREADONLY.has_options = True
_DAEXCEPTIONFMGROBJECTREADONLY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\022DaExceptionChecked\020\340\022\032!Attempt to modify readonly object'))
_DAEXCEPTIONFMGRFILECLOSING.has_options = True
_DAEXCEPTIONFMGRFILECLOSING._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\024DaExceptionLocalOnly\020\342\022\032&Frontend write buffer log out of space'))
_DAEXCEPTIONFMGROBJECTNOTFILE.has_options = True
_DAEXCEPTIONFMGROBJECTNOTFILE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\343\022\032\024Object is not a file'))
_DAEXCEPTIONFMGRFILENOTOPEN.has_options = True
_DAEXCEPTIONFMGRFILENOTOPEN._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\345\022\032\033File not open on this FMgr.'))
_DAEXCEPTIONFMGRDUPLICATECPREQUEST.has_options = True
_DAEXCEPTIONFMGRDUPLICATECPREQUEST._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\022DaExceptionChecked\020\346\022\032\025Duplicate CP request.'))
_DAEXCEPTIONSTRESSLEASEMISMATCH.has_options = True
_DAEXCEPTIONSTRESSLEASEMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\024DaExceptionLocalOnly\020\347\022\032 Stress: Simulated Lease Mismatch'))
_DAEXCEPTIONFILESTATEMISMATCH.has_options = True
_DAEXCEPTIONFILESTATEMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\024DaExceptionLocalOnly\020\350\022\032$File state changed on lease reaquire'))
_DAEXCEPTIONLEASEREVOKE.has_options = True
_DAEXCEPTIONLEASEREVOKE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\024DaExceptionLocalOnly\020\351\022\032\023Lease being revoked'))
_DAEXCEPTIONLEASEUPGRADENEEDED.has_options = True
_DAEXCEPTIONLEASEUPGRADENEEDED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\024DaExceptionLocalOnly\020\352\022\032#Have a read lease, need write lease'))
_DAEXCEPTIONLEASETIMEEXPIRED.has_options = True
_DAEXCEPTIONLEASETIMEEXPIRED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\024DaExceptionLocalOnly\020\353\022\032\027Lease timecheck expired'))
_DAEXCEPTIONLEASEREACQUIREFORCP.has_options = True
_DAEXCEPTIONLEASEREACQUIREFORCP._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?I\022G\n\024DaExceptionLocalOnly\020\355\022\032,Need to reacquire lease to create precise CP'))
_DAEXCEPTIONFMGRSTREAMNEEDSFLUSH.has_options = True
_DAEXCEPTIONFMGRSTREAMNEEDSFLUSH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?s\022q\n\024DaExceptionLocalOnly\020\356\022\032VClumpStoreStream underlying the file needs to be flushed for putXMap to make progress.'))
_DAEXCEPTIONFMGRWAITFORXMAPSTABILITY.has_options = True
_DAEXCEPTIONFMGRWAITFORXMAPSTABILITY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?H\022F\n\024DaExceptionLocalOnly\020\357\022\032+Caller must wait for XMap to be stabilized.'))
_DAEXCEPTIONFMGRSTALEIO.has_options = True
_DAEXCEPTIONFMGRSTALEIO._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?$\022\"\n\022DaExceptionChecked\020\360\022\032\tStale IO.'))
_DAEXCEPTIONFMGROLDERSYNCFORSR.has_options = True
_DAEXCEPTIONFMGROLDERSYNCFORSR._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\024DaExceptionLocalOnly\020\361\022\032\033SyncForSR with older SRGen.'))
_DAEXCEPTIONFMGRFILENEEDSCLOSEAFTERCP.has_options = True
_DAEXCEPTIONFMGRFILENEEDSCLOSEAFTERCP._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?d\022b\n\024DaExceptionLocalOnly\020\362\022\032GFile needs to be closed and reopened because of CP during NVLog replay.'))
_DAEXCEPTIONFILEHASLIMBOCMDS.has_options = True
_DAEXCEPTIONFILEHASLIMBOCMDS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?i\022g\n\024DaExceptionLocalOnly\020\363\022\032LFile needs to be closed because it has limbo commands & we need a precise CP'))
_DAEXCEPTIONFMGRNOFLSRESOURCES.has_options = True
_DAEXCEPTIONFMGRNOFLSRESOURCES._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?X\022V\n\022DaExceptionChecked\020\364\022\032=No resources available for serving flash less server request.'))
_DAEXCEPTIONFMGRNOFLSHOST.has_options = True
_DAEXCEPTIONFMGRNOFLSHOST._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?T\022R\n\024DaExceptionLocalOnly\020\365\022\0327No hosts available to serve flash less client requests.'))
_DAEXCEPTIONFMGRCANNOTSERVEFLSREQS.has_options = True
_DAEXCEPTIONFMGRCANNOTSERVEFLSREQS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\022DaExceptionChecked\020\366\022\032(Cannot serve any requests from NFH hosts'))
_DAEXCEPTIONNVLOGWRITENEEDSNAPFIRST.has_options = True
_DAEXCEPTIONNVLOGWRITENEEDSNAPFIRST._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?7\0225\n\022DaExceptionChecked\020\367\022\032\032Need to take a snap first.(\001'))
_DAEXCEPTIONFILEACQUIRELEASE.has_options = True
_DAEXCEPTIONFILEACQUIRELEASE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?R\022P\n\022DaExceptionChecked\020\370\022\0327Remote host needs to acquire lease (open file locally).'))
_DAEXCEPTIONPLATFORM.has_options = True
_DAEXCEPTIONPLATFORM._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?)\022\'\n\022DaExceptionChecked\020\250\024\032\016Platform error'))
_DAEXCEPTIONPLATFORMRUNTIME.has_options = True
_DAEXCEPTIONPLATFORMRUNTIME._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\024DaExceptionUnchecked\020\251\024\032\027Platform internal error'))
_DAEXCEPTIONPLATFORMRPCTIMEOUT.has_options = True
_DAEXCEPTIONPLATFORMRPCTIMEOUT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222??\022=\n\032DaExceptionPlatformRunTime\020\252\024\032\034Platform manager RPC timeout'))
_DAEXCEPTIONPLATFORMSHUTDOWNREQUEST.has_options = True
_DAEXCEPTIONPLATFORMSHUTDOWNREQUEST._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\032DaExceptionPlatformRunTime\020\253\024\032 Platform shutdown request failed'))
_DAEXCEPTIONPLATFORMREINITREQUEST.has_options = True
_DAEXCEPTIONPLATFORMREINITREQUEST._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\032DaExceptionPlatformRunTime\020\254\024\032\036Platform reinit request failed'))
_DAEXCEPTIONPLATFORMBEACONREQUEST.has_options = True
_DAEXCEPTIONPLATFORMBEACONREQUEST._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\032DaExceptionPlatformRunTime\020\255\024\032\036Platform beacon request failed'))
_DAEXCEPTIONPLATFORMBATTERYDISCHARGEREQUEST.has_options = True
_DAEXCEPTIONPLATFORMBATTERYDISCHARGEREQUEST._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\227\001\022\224\001\n\032DaExceptionPlatformRunTime\020\256\024\032sPlatform battery discharge request failed, discharge is not allowed when there\'s any battery is already discharging'))
_DAEXCEPTIONPLATFORMCANCELBATTERYDISCHARGEREQUEST.has_options = True
_DAEXCEPTIONPLATFORMCANCELBATTERYDISCHARGEREQUEST._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\241\001\022\236\001\n\032DaExceptionPlatformRunTime\020\257\024\032}Cancel platform battery discharge request failed, you can only cancel the discharge when battery is in ready to ship status. '))
_DAEXCEPTIONPLATFORMDISKPOWERONREQUEST.has_options = True
_DAEXCEPTIONPLATFORMDISKPOWERONREQUEST._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\032DaExceptionPlatformRunTime\020\260\024\032\031Power on the disk failed.'))
_DAEXCEPTIONPLATFORMDISKPOWEROFFREQUEST.has_options = True
_DAEXCEPTIONPLATFORMDISKPOWEROFFREQUEST._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\032DaExceptionPlatformRunTime\020\261\024\032\032Power off the disk failed.'))
_DAEXCEPTIONDISKMGR.has_options = True
_DAEXCEPTIONDISKMGR._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\032DaExceptionPlatformRunTime\020\262\024\032\022Disk manager error'))
_DAEXCEPTIONNOTDATADRIVE.has_options = True
_DAEXCEPTIONNOTDATADRIVE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?)\022\'\n\022DaExceptionDiskMgr\020\263\024\032\016Not data drive'))
_DAEXCEPTIONINVALIDDRIVESTATE.has_options = True
_DAEXCEPTIONINVALIDDRIVESTATE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\022DaExceptionDiskMgr\020\264\024\032\023Invalid drive state'))
_DAEXCEPTIONDRIVEREINIT.has_options = True
_DAEXCEPTIONDRIVEREINIT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\022DaExceptionDiskMgr\020\265\024\032\023Drive reinit failed'))
_DAEXCEPTIONDRIVENOTSTARTED.has_options = True
_DAEXCEPTIONDRIVENOTSTARTED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\022DaExceptionDiskMgr\020\266\024\032\021Drive not started'))
_DAEXCEPTIONFOREIGNDRIVE.has_options = True
_DAEXCEPTIONFOREIGNDRIVE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?(\022&\n\022DaExceptionDiskMgr\020\267\024\032\rForeign drive'))
_DAEXCEPTIONUPDATEDRIVESTATE.has_options = True
_DAEXCEPTIONUPDATEDRIVESTATE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionDiskMgr\020\270\024\032\031Drive state update failed'))
_DAEXCEPTIONDRIVENOTSTOPPED.has_options = True
_DAEXCEPTIONDRIVENOTSTOPPED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?,\022*\n\022DaExceptionDiskMgr\020\271\024\032\021Drive not stopped'))
_DAEXCEPTIONDRIVEUNMOUNT.has_options = True
_DAEXCEPTIONDRIVEUNMOUNT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionDiskMgr\020\272\024\032\024Drive unmount failed'))
_DAEXCEPTIONDRIVENOTFOUND.has_options = True
_DAEXCEPTIONDRIVENOTFOUND._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\022DaExceptionDiskMgr\020\273\024\032\017Drive not found'))
_DAEXCEPTIONINVALIDUSERNAME.has_options = True
_DAEXCEPTIONINVALIDUSERNAME._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\022DaExceptionChecked\020\306\024\032#User name {username} does not exist(\001'))
_DAEXCEPTIONAUTHENTICATIONFAILURE.has_options = True
_DAEXCEPTIONAUTHENTICATIONFAILURE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\307\024\032\026Authentication failure'))
_DAEXCEPTIONEMPTYPASSWORD.has_options = True
_DAEXCEPTIONEMPTYPASSWORD._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\310\024\032\030Password cannot be empty'))
_DAEXCEPTIONINVALIDENTRIESINPASSWORD.has_options = True
_DAEXCEPTIONINVALIDENTRIESINPASSWORD._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\022DaExceptionChecked\020\311\024\032)Some invalid entries in password {valerr}'))
_DAEXCEPTIONCLUSTERMGR.has_options = True
_DAEXCEPTIONCLUSTERMGR._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\032DaExceptionPlatformRunTime\020\320\024\032\025Cluster manager error'))
_DAEXCEPTIONINCOMPATIBLEMODEL.has_options = True
_DAEXCEPTIONINCOMPATIBLEMODEL._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\025DaExceptionClusterMgr\020\321\024\032\035Model {model} is incompatible'))
_DAEXCEPTIONNODENOTSTEM.has_options = True
_DAEXCEPTIONNODENOTSTEM._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?B\022@\n\025DaExceptionClusterMgr\020\322\024\032$This node is already in a DVX system'))
_DAEXCEPTIONNODENOTMASTER.has_options = True
_DAEXCEPTIONNODENOTMASTER._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?S\022Q\n\025DaExceptionClusterMgr\020\323\024\0325Node is not in expected state, please contact support'))
_DAEXCEPTIONNODATAFLOATIP.has_options = True
_DAEXCEPTIONNODATAFLOATIP._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?T\022R\n\025DaExceptionClusterMgr\020\324\024\0326Data floating IP address is not configured on this DVX'))
_DAEXCEPTIONNODEUNREACHABLE.has_options = True
_DAEXCEPTIONNODEUNREACHABLE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\025DaExceptionClusterMgr\020\325\024\032\034Node {node} is not reachable'))
_DAEXCEPTIONPLATFORMSYNCFILE.has_options = True
_DAEXCEPTIONPLATFORMSYNCFILE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\023DaExceptionPlatform\020\326\024\032!Platform sync file request failed'))
_DAEXCEPTIONPLATFORMDIAGPING.has_options = True
_DAEXCEPTIONPLATFORMDIAGPING._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?J\022H\n\023DaExceptionPlatform\020\327\024\032.Platform network diagostic ping request failed'))
_DAEXCEPTIONCONTROLLERNOTACTIVE.has_options = True
_DAEXCEPTIONCONTROLLERNOTACTIVE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\023DaExceptionPlatform\020\330\024\032!Current controller is not Active.'))
_DAEXCEPTIONNETWORKCONFIGEXISTS.has_options = True
_DAEXCEPTIONNETWORKCONFIGEXISTS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\023DaExceptionPlatform\020\331\024\032!Network config exists for {conId}'))
_DAEXCEPTIONNOLINKONANYMGMTIFACES.has_options = True
_DAEXCEPTIONNOLINKONANYMGMTIFACES._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?a\022_\n\023DaExceptionPlatform\020\332\024\032ENo link found on any the mgmt ifaces {mifaces}, please check cables. '))
_DAEXCEPTIONNODESLIMITREACHED.has_options = True
_DAEXCEPTIONNODESLIMITREACHED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?d\022b\n\025DaExceptionClusterMgr\020\333\024\032FDVX is at the maximum ({nodesLimit}) number of supported nodes already'))
_DAEXCEPTIONNODEEXISTSINCLUSTER.has_options = True
_DAEXCEPTIONNODEEXISTSINCLUSTER._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?^\022\\\n\025DaExceptionClusterMgr\020\334\024\032@The node with serial number {serial} is already part of this DVX'))
_DAEXCEPTIONNODEMAYBEUNREACHABLE.has_options = True
_DAEXCEPTIONNODEMAYBEUNREACHABLE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\\\022Z\n\025DaExceptionClusterMgr\020\335\024\032>Node {node} is not reachable OR may be already part of the DVX'))
_DAEXCEPTIONLEASEUPGRADEFORREPACKFAILED.has_options = True
_DAEXCEPTIONLEASEUPGRADEFORREPACKFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?Z\022X\n\022DaExceptionChecked\020\214\025\032?Lease upgrade for repack failed, since other readers are active'))
_DAEXCEPTIONSERVICEUNAVAILABLE.has_options = True
_DAEXCEPTIONSERVICEUNAVAILABLE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\024DaExceptionUnchecked\020\360\025\032$Service {serviceName} is unavailable0\001'))
_DAEXCEPTIONSERVICEUNRESPONSIVE.has_options = True
_DAEXCEPTIONSERVICEUNRESPONSIVE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\024DaExceptionUnchecked\020\361\025\032%Service {serviceName} is unresponsive0\001'))
_DAEXCEPTIONVCENTERREGISTRATIONFAILED.has_options = True
_DAEXCEPTIONVCENTERREGISTRATIONFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?u\022s\n\024DaExceptionUnchecked\020\362\025\032VvCenter registration failed for the user: \'{user}\' with the following error: \'{error}\'(\001'))
_DAEXCEPTIONVCENTERUNREGISTRATIONFAILED.has_options = True
_DAEXCEPTIONVCENTERUNREGISTRATIONFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\211\002\022\206\002\n\024DaExceptionUnchecked\020\363\025\032\350\001vCenter unregister operation failed: \'{error}\'.\nIf the vCenter server is permanently unavailable or if this DVX is already unregistered from the vCenter server, use --force option to remove the registration information from the DVX.(\001'))
_DAEXCEPTIONVCENTERREGISTRATIONEXISTS.has_options = True
_DAEXCEPTIONVCENTERREGISTRATIONEXISTS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\210\001\022\205\001\n\030DaExceptionAlreadyExists\020\364\025\032fvCenter {vCenter} is currently registered. Run \'config vcenter unregister {vCenter}\' to unregister it.'))
_DAEXCEPTIONVCENTERUNKNOWN.has_options = True
_DAEXCEPTIONVCENTERUNKNOWN._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?I\022G\n\024DaExceptionUnchecked\020\365\025\032,vCenter \'{vCenter}\' is not known to this DVX'))
_DAEXCEPTIONSUPPORTNOTFOUND.has_options = True
_DAEXCEPTIONSUPPORTNOTFOUND._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\271\001\022\266\001\n\024DaExceptionUnchecked\020\366\025\032\232\001Support ID {supportId} was not found on the server. Either the support has completed or never existed.\nPlease run \'support submit\' to submit a new support'))
_DAEXCEPTIONNOTAUTHENTICATED.has_options = True
_DAEXCEPTIONNOTAUTHENTICATED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?7\0225\n\024DaExceptionUnchecked\020\367\025\032\030Client not authenticated0\001'))
_DAEXCEPTIONMAILSERVERCONFIGURATIONFAILED.has_options = True
_DAEXCEPTIONMAILSERVERCONFIGURATIONFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?T\022R\n\024DaExceptionUnchecked\020\370\025\0327Mailserver configuration test failed with error {error}'))
_DAEXCEPTIONHOSTINUSE.has_options = True
_DAEXCEPTIONHOSTINUSE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\204\001\022\201\001\n\024DaExceptionUnchecked\020\371\025\032fCannot remove the host. It is currently using the DVX. Make sure it is safe to remove and use --force.'))
_DAEXCEPTIONHOSTUNKNOWN.has_options = True
_DAEXCEPTIONHOSTUNKNOWN._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\024DaExceptionUnchecked\020\372\025\032\036Error - Unknown host \'{host}\'.'))
_DAEXCEPTIONINVALIDEVENTFILTERCOMBINATION.has_options = True
_DAEXCEPTIONINVALIDEVENTFILTERCOMBINATION._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\214\001\022\211\001\n\024DaExceptionUnchecked\020\373\025\032nThe specified filter combination is invalid. Specify only one of --severity, --event-type or --component-name.'))
_DAEXCEPTIONNOVCENTER.has_options = True
_DAEXCEPTIONNOVCENTER._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\024DaExceptionUnchecked\020\374\025\032&DVX is not registered with any vCenter'))
_DAEXCEPTIONVCENTERERROR.has_options = True
_DAEXCEPTIONVCENTERERROR._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\024DaExceptionUnchecked\020\375\025\032\037vCenter responded with an error'))
_DAEXCEPTIONATLEASTONEARGREQUIRED.has_options = True
_DAEXCEPTIONATLEASTONEARGREQUIRED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\024DaExceptionUnchecked\020\376\025\032$Specify at least one of \'{argument}\'0\001'))
_DAEXCEPTIONMUTUALLYEXCLUSIVEARGS.has_options = True
_DAEXCEPTIONMUTUALLYEXCLUSIVEARGS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?H\022F\n\024DaExceptionUnchecked\020\377\025\032)Only one of \'{argument}\' can be specified0\001'))
_DAEXCEPTIONEXACTLYONEARGREQUIRED.has_options = True
_DAEXCEPTIONEXACTLYONEARGREQUIRED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\024DaExceptionUnchecked\020\200\026\032\031Specify one of {argument}0\001'))
_DAEXCEPTIONSUPPORTNOTRUNNING.has_options = True
_DAEXCEPTIONSUPPORTNOTRUNNING._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\222\001\022\217\001\n\024DaExceptionUnchecked\020\201\026\032tThere is no currently running or recent \'support submit\' task.  Run \'support submit\' to submit a new support bundle.'))
_DAEXCEPTIONINVALIDCRONEXPRESSION.has_options = True
_DAEXCEPTIONINVALIDCRONEXPRESSION._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?E\022C\n\024DaExceptionUnchecked\020\202\026\032&Invalid cron expression \"{expression}\"(\001'))
_DAEXCEPTIONINVALIDIPSUBNETMASK.has_options = True
_DAEXCEPTIONINVALIDIPSUBNETMASK._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?}\022{\n\024DaExceptionUnchecked\020\203\026\032`{ip2} is in a different subnet than the floating IP address {ip1}. The subnet mask is {netmask}.'))
_DAEXCEPTIONDROPTOSHELL.has_options = True
_DAEXCEPTIONDROPTOSHELL._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?7\0225\n\024DaExceptionUnchecked\020\204\026\032\032Enabling root login failed'))
_DAEXCEPTIONALLARGSREQUIRED.has_options = True
_DAEXCEPTIONALLARGSREQUIRED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\\\022Z\n\024DaExceptionUnchecked\020\205\026\032?If you specify one of {argument}, you must specify all of them.'))
_DAEXCEPTIONDUPLICATEIP.has_options = True
_DAEXCEPTIONDUPLICATEIP._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?z\022x\n\024DaExceptionUnchecked\020\206\026\032]IP {ip} provided in network configuration for {port1} is already used for {port2} in this DVX'))
_DAEXCEPTIONCLIOPERATIONABORTED.has_options = True
_DAEXCEPTIONCLIOPERATIONABORTED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\024DaExceptionUnchecked\020\207\026\032\037This operation has been aborted'))
_DAEXCEPTIONREGISTRATIONFAILURE.has_options = True
_DAEXCEPTIONREGISTRATIONFAILURE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?>\022<\n\024DaExceptionUnchecked\020\210\026\032!Failed to register the extension.'))
_DAEXCEPTIONVCENTERCONNECTIONFAILURE.has_options = True
_DAEXCEPTIONVCENTERCONNECTIONFAILURE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?E\022C\n\024DaExceptionUnchecked\020\211\026\032(Failed to connect to the vCenter server.'))
_DAEXCEPTIONVCENTERCONNECTIONMALFORMEDURL.has_options = True
_DAEXCEPTIONVCENTERCONNECTIONMALFORMEDURL._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n#DaExceptionvCenterConnectionFailure\020\212\026\032\037Malformed vim SDK URL argument.'))
_DAEXCEPTIONVCENTERLOGINFAILURE.has_options = True
_DAEXCEPTIONVCENTERLOGINFAILURE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?V\022T\n#DaExceptionvCenterConnectionFailure\020\213\026\032*Failed to perform login to vCenter server.'))
_DAEXCEPTIONVCENTERLOGOUTFAILURE.has_options = True
_DAEXCEPTIONVCENTERLOGOUTFAILURE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?Y\022W\n#DaExceptionvCenterConnectionFailure\020\214\026\032-Failed to perform logout from vCenter server.'))
_DAEXCEPTIONVCENTERSSLINITIALIZATION.has_options = True
_DAEXCEPTIONVCENTERSSLINITIALIZATION._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?Z\022X\n#DaExceptionvCenterConnectionFailure\020\215\026\032.Error doing SSL handshake with vCenter server.'))
_DAEXCEPTIONQUALIFYINGARGUMENTNOTFOUND.has_options = True
_DAEXCEPTIONQUALIFYINGARGUMENTNOTFOUND._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?W\022U\n\024DaExceptionUnchecked\020\216\026\0328If you specify {argument1}, you must specify {argument2}0\001'))
_DAEXCEPTIONCLOUDVIEWREGISTRATIONFAILURE.has_options = True
_DAEXCEPTIONCLOUDVIEWREGISTRATIONFAILURE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\024DaExceptionUnchecked\020\217\026\032&Failed to register DVX with cloudview.'))
_DAEXCEPTIONCLUMPSTORECANCELWRITERRECOVERY.has_options = True
_DAEXCEPTIONCLUMPSTORECANCELWRITERRECOVERY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?>\022<\n\022DaExceptionChecked\020\324\026\032#Cancel a ClumpStore writer recovery'))
_DAEXCEPTIONCLUMPSTORENOTENABLED.has_options = True
_DAEXCEPTIONCLUMPSTORENOTENABLED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionChecked\020\325\026\032\031ClumpStore is not enabled'))
_DAEXCEPTIONDAGGERSUBMISSIONSDISABLED.has_options = True
_DAEXCEPTIONDAGGERSUBMISSIONSDISABLED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?>\022<\n\022DaExceptionChecked\020\270\027\032#Dagger job submissions are disabled'))
_DAEXCEPTIONDAGGERJOBCANCELED.has_options = True
_DAEXCEPTIONDAGGERJOBCANCELED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\024DaExceptionLocalOnly\020\271\027\032\026Dagger job is canceled'))
_DAEXCEPTIONDAGGERQUEUEFULL.has_options = True
_DAEXCEPTIONDAGGERQUEUEFULL._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?H\022F\n\022DaExceptionChecked\020\272\027\032-Exceeded the number of concurrent Dagger jobs'))
_DAEXCEPTIONDAGGERJOBRUNNING.has_options = True
_DAEXCEPTIONDAGGERJOBRUNNING._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\022DaExceptionChecked\020\273\027\032\037Attempt to retire a running job'))
_DAEXCEPTIONAUTOSUPPORTDOWNLOADFAILED.has_options = True
_DAEXCEPTIONAUTOSUPPORTDOWNLOADFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?M\022K\n\024DaExceptionUnchecked\020\234\030\032.Support bundle download failed due to {reason}(\001'))
_DAEXCEPTIONAUTOSUPPORTBUNDLEUPLOADFAILED.has_options = True
_DAEXCEPTIONAUTOSUPPORTBUNDLEUPLOADFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n\024DaExceptionUnchecked\020\235\030\032,Support bundle upload failed due to {reason}(\001'))
_DAEXCEPTIONAUTOSUPPORTSERVERCONNECTIONFAILED.has_options = True
_DAEXCEPTIONAUTOSUPPORTSERVERCONNECTIONFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?W\022U\n\024DaExceptionUnchecked\020\236\030\0328HTTP connection to support server failed due to {reason}(\001'))
_DAEXCEPTIONTRIGGERSUPPORTFAILED.has_options = True
_DAEXCEPTIONTRIGGERSUPPORTFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\022DaExceptionChecked\020\237\030\032&Trigger support failed due to {reason}(\001'))
_DAEXCEPTIONDEBUGSUPPORTALREADYINPROGRESS.has_options = True
_DAEXCEPTIONDEBUGSUPPORTALREADYINPROGRESS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?Q\022O\n\024DaExceptionUnchecked\020\240\030\0322A debug support {supportId} is already in progress(\001'))
_DAEXCEPTIONDEBUGSUPPORTBUNDLECOLLECTIONFAILED.has_options = True
_DAEXCEPTIONDEBUGSUPPORTBUNDLECOLLECTIONFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?S\022Q\n\022DaExceptionChecked\020\241\030\0326Debug support bundle collection failed due to {reason}(\001'))
_DAEXCEPTIONAUTOSUPPORTDISABLED.has_options = True
_DAEXCEPTIONAUTOSUPPORTDISABLED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\024DaExceptionUnchecked\020\242\030\032&Autosupport is disabled on this system'))
_DAEXCEPTIONMONITORINGINTERRUPTED.has_options = True
_DAEXCEPTIONMONITORINGINTERRUPTED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\024DaExceptionUnchecked\020\243\030\032\031Monitoring is interrupted'))
_DAEXCEPTIONSRDISABLED.has_options = True
_DAEXCEPTIONSRDISABLED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\022DaExceptionChecked\020\200\031\032\016SR is disabled(\001'))
_DAEXCEPTIONSRINPROGRESS.has_options = True
_DAEXCEPTIONSRINPROGRESS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\022DaExceptionChecked\020\201\031\032\rSR is running(\001'))
_DAEXCEPTIONREPACKDISABLED.has_options = True
_DAEXCEPTIONREPACKDISABLED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\022DaExceptionChecked\020\344\031\032\025RepackSvc is disabled'))
_DAEXCEPTIONREPACKJOBFAILED.has_options = True
_DAEXCEPTIONREPACKJOBFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\022DaExceptionChecked\020\345\031\032\035RepackSvc\'s dagger job failed'))
_DAEXCEPTIONMAXREPACKJOBSLIMITREACHED.has_options = True
_DAEXCEPTIONMAXREPACKJOBSLIMITREACHED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\022DaExceptionChecked\020\346\031\032&RepackSvc\'s max jobs limit is reached.'))
_DAEXCEPTIONONCRPCGARBAGECALLHDR.has_options = True
_DAEXCEPTIONONCRPCGARBAGECALLHDR._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\024DaExceptionUnchecked\020\254\033\032\022Callhdr is garbage'))
_DAEXCEPTIONONCRPCGARBAGEARGS.has_options = True
_DAEXCEPTIONONCRPCGARBAGEARGS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\024DaExceptionUnchecked\020\255\033\032\034Input argruments are garbage'))
_DAEXCEPTIONONCRPCPROGUNAVAIL.has_options = True
_DAEXCEPTIONONCRPCPROGUNAVAIL._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\024DaExceptionUnchecked\020\256\033\032\030Program is not available'))
_DAEXCEPTIONONCRPCPROGMISMATCH.has_options = True
_DAEXCEPTIONONCRPCPROGMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\024DaExceptionUnchecked\020\257\033\032 Program version is not available'))
_DAEXCEPTIONONCRPCPROCUNAVAIL.has_options = True
_DAEXCEPTIONONCRPCPROCUNAVAIL._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?7\0225\n\024DaExceptionUnchecked\020\260\033\032\032Procedure is not available'))
_DAEXCEPTIONONCRPCGARBAGERESPHDR.has_options = True
_DAEXCEPTIONONCRPCGARBAGERESPHDR._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\024DaExceptionUnchecked\020\261\033\032\022Resphdr is garbage'))
_DAEXCEPTIONONCRPCCALLREJECTED.has_options = True
_DAEXCEPTIONONCRPCCALLREJECTED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\024DaExceptionUnchecked\020\262\033\032\037Call was rejected by the server'))
_DAEXCEPTIONONCRPCSYSTEMERR.has_options = True
_DAEXCEPTIONONCRPCSYSTEMERR._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?)\022\'\n\024DaExceptionUnchecked\020\263\033\032\014System error'))
_DAEXCEPTIONPYEXC.has_options = True
_DAEXCEPTIONPYEXC._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?G\022E\n\024DaExceptionLocalOnly\020\220\034\032*A Python function set the error indicator.'))
_DAEXCEPTIONSGIO.has_options = True
_DAEXCEPTIONSGIO._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?(\022&\n\rDaExceptionIo\020\364\034\032\022SgIo returns error'))
_DAEXCEPTIONSCSIDEVICEDISCONNECTED.has_options = True
_DAEXCEPTIONSCSIDEVICEDISCONNECTED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\017DaExceptionSgIo\020\365\034\032 SgIo returns Device disconnected'))
_DAEXCEPTIONUNKNOWNSGIO.has_options = True
_DAEXCEPTIONUNKNOWNSGIO._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\017DaExceptionSgIo\020\366\034\032\032SgIo returns unknown error'))
_DAEXCEPTIONSCSIRESVCONFLICT.has_options = True
_DAEXCEPTIONSCSIRESVCONFLICT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\017DaExceptionSgIo\020\367\034\032!SgIo returns reservation conflict'))
_DAEXCEPTIONVMDOESNOTEXIST.has_options = True
_DAEXCEPTIONVMDOESNOTEXIST._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?-\022+\n\022DaExceptionChecked\020\330\035\032\022VM does not exist.'))
_DAEXCEPTIONVMPARSINGFAILURE.has_options = True
_DAEXCEPTIONVMPARSINGFAILURE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\022DaExceptionChecked\020\331\035\032)Failure in parsing VM configuration file.'))
_DAEXCEPTIONVMPARSINGNOKV.has_options = True
_DAEXCEPTIONVMPARSINGNOKV._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\332\035\032 Line does not contain key-value.'))
_DAEXCEPTIONVMPARSINGBUFFERTOOSMALL.has_options = True
_DAEXCEPTIONVMPARSINGBUFFERTOOSMALL._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\022DaExceptionChecked\020\333\035\032\035Provided buffer is too small.'))
_DAEXCEPTIONVMFILEHASOWNER.has_options = True
_DAEXCEPTIONVMFILEHASOWNER._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\022DaExceptionChecked\020\334\035\032\036File is already owned by a VM.'))
_DAEXCEPTIONTOOMANYTOTALVMS.has_options = True
_DAEXCEPTIONTOOMANYTOTALVMS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?H\022F\n\024DaExceptionUnchecked\020\335\035\032+There are too many total VMs in the system.'))
_DAEXCEPTIONBADDISKFILE.has_options = True
_DAEXCEPTIONBADDISKFILE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?R\022P\n\022DaExceptionChecked\020\336\035\0327Virtual disk file(s) have unexpected content/structure.'))
_DAEXCEPTIONUNSUPPORTEDVIRTUALDISKFILEFORMAT.has_options = True
_DAEXCEPTIONUNSUPPORTEDVIRTUALDISKFILEFORMAT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?I\022G\n\022DaExceptionChecked\020\337\035\032.The virtual disk file format is not supported.'))
_DAEXCEPTIONCONTROLLERNOTSYNCED.has_options = True
_DAEXCEPTIONCONTROLLERNOTSYNCED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\274\036\032\030Controller is not synced'))
_DAEXCEPTIONFAILOVERINPROGRESS.has_options = True
_DAEXCEPTIONFAILOVERINPROGRESS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\022DaExceptionChecked\020\275\036\032\037Failover is already in progress'))
_DAEXCEPTIONUPGRADEINPROGRESS.has_options = True
_DAEXCEPTIONUPGRADEINPROGRESS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\276\036\032\026Upgrade is in progress'))
_DAEXCEPTIONPEERCONTROLLERBADNETWORKCONNECTIVITY.has_options = True
_DAEXCEPTIONPEERCONTROLLERBADNETWORKCONNECTIVITY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?G\022E\n\022DaExceptionChecked\020\277\036\032,Peer controller has bad network connectivity'))
_DAEXCEPTIONNETWORKSETUPALREADYINPROGRESS.has_options = True
_DAEXCEPTIONNETWORKSETUPALREADYINPROGRESS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\024DaExceptionUnchecked\020\204 \032&A network setup is already in progress'))
_DAEXCEPTIONNONETWORKSETUPTOCOMMIT.has_options = True
_DAEXCEPTIONNONETWORKSETUPTOCOMMIT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\024DaExceptionUnchecked\020\205 \032#There is no network setup to commit'))
_DAEXCEPTIONNETWORKSETUPFAILED.has_options = True
_DAEXCEPTIONNETWORKSETUPFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\024DaExceptionUnchecked\020\206 \032$Network setup failed due to {reason}(\001'))
_DAEXCEPTIONNETWORKSETUPREQUIRESCOMMIT.has_options = True
_DAEXCEPTIONNETWORKSETUPREQUIRESCOMMIT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?M\022K\n\024DaExceptionUnchecked\020\207 \0320There is a pending network setup to be committed'))
_DAEXCEPTIONNVRAMCHECKSUMMISMATCH.has_options = True
_DAEXCEPTIONNVRAMCHECKSUMMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\024DaExceptionLocalOnly\020\350 \032#There is checksum mismatch in NVRam'))
_DAEXCEPTIONCONFENTRYISINVALID.has_options = True
_DAEXCEPTIONCONFENTRYISINVALID._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?c\022a\n\024DaExceptionLocalOnly\020\314!\032FThis conf entry does not exist. Please check moduleName and optionName'))
_DAEXCEPTIONCONFENTRYISLOCKED.has_options = True
_DAEXCEPTIONCONFENTRYISLOCKED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?O\022M\n\024DaExceptionLocalOnly\020\315!\0322This conf entry is locked and can not be modified.'))
_DAEXCEPTIONCONFENTRYOUTSIDERANGE.has_options = True
_DAEXCEPTIONCONFENTRYOUTSIDERANGE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\024DaExceptionLocalOnly\020\316!\032\'The conf value is outside of the range.'))
_DAEXCEPTIONCONFMODULECOOKIEALREADYEXISTS.has_options = True
_DAEXCEPTIONCONFMODULECOOKIEALREADYEXISTS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?N\022L\n\024DaExceptionLocalOnly\020\317!\0321The module cookie for this entity already exists.'))
_DAEXCEPTIONCONFIGVERSIONMISMATCH.has_options = True
_DAEXCEPTIONCONFIGVERSIONMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\024DaExceptionUnchecked\020\210\'\032\033Version numbers don\'t match'))
_DAEXCEPTIONREMOTEDATARETRIEVALVERSIONUNSUPPORTED.has_options = True
_DAEXCEPTIONREMOTEDATARETRIEVALVERSIONUNSUPPORTED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?q\022o\n\024DaExceptionUnchecked\020\211\'\032TCan only retrieve data from destination DVX systems with version {version} or higher'))
_DAEXCEPTIONREMOTEOPERATIONVERSIONUNSUPPORTED.has_options = True
_DAEXCEPTIONREMOTEOPERATIONVERSIONUNSUPPORTED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?z\022x\n\024DaExceptionUnchecked\020\212\'\032]Can only invoke remote operations on destination DVX systems with version {version} or higher'))
_DAEXCEPTIONEONRUNNING.has_options = True
_DAEXCEPTIONEONRUNNING._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\022DaExceptionChecked\020\354\'\032\025Eon is still running.'))
_DAEXCEPTIONEONNOTFOUND.has_options = True
_DAEXCEPTIONEONNOTFOUND._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?)\022\'\n\022DaExceptionChecked\020\355\'\032\016Eon not found.'))
_DAEXCEPTIONEONEXISTS.has_options = True
_DAEXCEPTIONEONEXISTS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\022DaExceptionChecked\020\356\'\032\023Eon already exists.'))
_DAEXCEPTIONEONLOCATIONUNKNOWN.has_options = True
_DAEXCEPTIONEONLOCATIONUNKNOWN._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\024DaExceptionLocalOnly\020\357\'\032\030Eon location is unknown.'))
_DAEXCEPTIONEONCANCELED.has_options = True
_DAEXCEPTIONEONCANCELED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\360\'\032\026Eon has been canceled.'))
_DAEXCEPTIONEONRETRIED.has_options = True
_DAEXCEPTIONEONRETRIED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\024DaExceptionLocalOnly\020\361\'\032\027The Eon rpc is a retry.'))
_DAEXCEPTIONEONTESTERROR.has_options = True
_DAEXCEPTIONEONTESTERROR._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\362\'\032\033An test eon-specific error.'))
_DAEXCEPTIONEONBUSY.has_options = True
_DAEXCEPTIONEONBUSY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?N\022L\n\024DaExceptionLocalOnly\020\363\'\0321Max in-flight eons have reached in the EonClient.'))
_DAEXCEPTIONEONGENCOUNTREJECTED.has_options = True
_DAEXCEPTIONEONGENCOUNTREJECTED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n\022DaExceptionChecked\020\364\'\0320Submit is rejected due to unacceptable genCount.'))
_DAEXCEPTIONCONTAINERSETNOTENABLED.has_options = True
_DAEXCEPTIONCONTAINERSETNOTENABLED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?6\0224\n\022DaExceptionChecked\020\320(\032\033ContainerSet is not enabled'))
_DAEXCEPTIONREPLTOOMANYREPLICASITES.has_options = True
_DAEXCEPTIONREPLTOOMANYREPLICASITES._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\022DaExceptionChecked\020\264)\032\027Too many replica sites.'))
_DAEXCEPTIONREPLINVALIDREPLICASITE.has_options = True
_DAEXCEPTIONREPLINVALIDREPLICASITE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\022DaExceptionChecked\020\265)\032\027Replica site is invalid'))
_DAEXCEPTIONREPLUNPAIREDREPLICASITE.has_options = True
_DAEXCEPTIONREPLUNPAIREDREPLICASITE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\022DaExceptionChecked\020\266)\032\032Replica site is not paired'))
_DAEXCEPTIONREPLDISABLEDREPLICASITE.has_options = True
_DAEXCEPTIONREPLDISABLEDREPLICASITE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\267)\032\030Replica site is disabled'))
_DAEXCEPTIONREPLREVOKEDREPLICASITE.has_options = True
_DAEXCEPTIONREPLREVOKEDREPLICASITE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?2\0220\n\022DaExceptionChecked\020\270)\032\027Replica site is revoked'))
_DAEXCEPTIONREPLUNAVAILABLEREPLICASITE.has_options = True
_DAEXCEPTIONREPLUNAVAILABLEREPLICASITE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\022DaExceptionChecked\020\271)\032\035Replica site is not available'))
_DAEXCEPTIONREPLLOCALNAMEALREADYINUSE.has_options = True
_DAEXCEPTIONREPLLOCALNAMEALREADYINUSE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?-\022+\n\022DaExceptionChecked\020\272)\032\022Illegal local name'))
_DAEXCEPTIONREPLIPADDRESSALREADYINUSE.has_options = True
_DAEXCEPTIONREPLIPADDRESSALREADYINUSE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?G\022E\n\022DaExceptionChecked\020\273)\032,IP address already in use by some other site'))
_DAEXCEPTIONREPLIPADDRESSCHANGEFAILURE.has_options = True
_DAEXCEPTIONREPLIPADDRESSCHANGEFAILURE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\022DaExceptionChecked\020\274)\032&Replica-site IP address change failure'))
_DAEXCEPTIONREPLSRCFEUNAVAILABLE.has_options = True
_DAEXCEPTIONREPLSRCFEUNAVAILABLE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\022DaExceptionChecked\020\275)\032\025Source FE unavailable'))
_DAEXCEPTIONREPLDSTFEUNAVAILABLE.has_options = True
_DAEXCEPTIONREPLDSTFEUNAVAILABLE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\022DaExceptionChecked\020\276)\032\032Destination FE unavailable'))
_DAEXCEPTIONREPLREMOTESCROLLSVCUNAVAILABLE.has_options = True
_DAEXCEPTIONREPLREMOTESCROLLSVCUNAVAILABLE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\022DaExceptionChecked\020\277)\032!Remote scroll service unavailable'))
_DAEXCEPTIONREPLREMOTESCROLLSTOPPED.has_options = True
_DAEXCEPTIONREPLREMOTESCROLLSTOPPED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\022DaExceptionChecked\020\300)\032!Remote scroll replication stopped'))
_DAEXCEPTIONREPLINSHUTDOWN.has_options = True
_DAEXCEPTIONREPLINSHUTDOWN._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222??\022=\n\022DaExceptionChecked\020\301)\032$Replication service is shutting down'))
_DAEXCEPTIONREPLDSTUNKNOWNTASK.has_options = True
_DAEXCEPTIONREPLDSTUNKNOWNTASK._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?N\022L\n\022DaExceptionChecked\020\302)\0323Replication destination doesn\'t recognize the task.'))
_DAEXCEPTIONREPLDSTHASSNAP.has_options = True
_DAEXCEPTIONREPLDSTHASSNAP._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n\022DaExceptionChecked\020\303)\0320Replication destination already has the PG snap.'))
_DAEXCEPTIONREPLREMOTESCROLLDROPPED.has_options = True
_DAEXCEPTIONREPLREMOTESCROLLDROPPED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\022DaExceptionChecked\020\304)\032&Remote scroll expired from scroll svc.'))
_DAEXCEPTIONREPLNETWORKCHECKFAILED.has_options = True
_DAEXCEPTIONREPLNETWORKCHECKFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?M\022K\n\022DaExceptionChecked\020\305)\0322Initial replication network check returned errors.'))
_DAEXCEPTIONREPLVERSIONMISMATCH.has_options = True
_DAEXCEPTIONREPLVERSIONMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?V\022T\n\022DaExceptionChecked\020\306)\032;Source and destination have incompatible software versions.'))
_DAEXCEPTIONREPLBUSYREPLICASITE.has_options = True
_DAEXCEPTIONREPLBUSYREPLICASITE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\307)\032\024Replica site is busy'))
_DAEXCEPTIONREPLTASKUSERCANCEL.has_options = True
_DAEXCEPTIONREPLTASKUSERCANCEL._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\310)\032 Replication was canceled by user'))
_DAEXCEPTIONREPLSNAPUNAVAILABLE.has_options = True
_DAEXCEPTIONREPLSNAPUNAVAILABLE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\022DaExceptionChecked\020\311)\032(Replication stopped due to missing snap.'))
_DAEXCEPTIONREPLINVALIDSITEADDRESS.has_options = True
_DAEXCEPTIONREPLINVALIDSITEADDRESS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?G\022E\n\022DaExceptionChecked\020\312)\032,Invalid network address for the replica site'))
_DAEXCEPTIONREPLREMOVEREPLICASITEFAILED.has_options = True
_DAEXCEPTIONREPLREMOVEREPLICASITEFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\265\001\022\262\001\n\022DaExceptionChecked\020\313)\032\230\001Replica site remove failed. To remove anyway, try again with --force; you might have to log in to destination DVX and revoke access from this source DVX'))
_DAEXCEPTIONREPLROFS.has_options = True
_DAEXCEPTIONREPLROFS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\024DaExceptionUnchecked\020\314)\032\036Replica site in read-only mode0\001'))
_DAEXCEPTIONREPLRETRYFROMDSTREPLICASITE.has_options = True
_DAEXCEPTIONREPLRETRYFROMDSTREPLICASITE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n\022DaExceptionChecked\020\315)\0320Task retry must be done from source replica site'))
_DAEXCEPTIONREPLCRITICALSRCREPLICASITE.has_options = True
_DAEXCEPTIONREPLCRITICALSRCREPLICASITE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?a\022_\n\022DaExceptionChecked\020\316)\032FSource replica site has a critical health status. Replication Stopped.'))
_DAEXCEPTIONREPLCRITICALDSTREPLICASITE.has_options = True
_DAEXCEPTIONREPLCRITICALDSTREPLICASITE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?f\022d\n\022DaExceptionChecked\020\317)\032KDestination replica site has a critical health status. Replication Stopped.'))
_DAEXCEPTIONREPLENCRYPTIONCHANGEROLLBACKERROR.has_options = True
_DAEXCEPTIONREPLENCRYPTIONCHANGEROLLBACKERROR._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?f\022d\n\022DaExceptionChecked\020\320)\032KEnabling or disabling encryption failed with potentially inconsistent state'))
_DAEXCEPTIONREPLTASKFAILURE.has_options = True
_DAEXCEPTIONREPLTASKFAILURE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\022DaExceptionChecked\020\321)\032\030Replication task failed.'))
_DAEXCEPTIONREPLDSTNOSPACE.has_options = True
_DAEXCEPTIONREPLDSTNOSPACE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\022DaExceptionChecked\020\322)\032(Destination replica site is out of space'))
_DAEXCEPTIONREPLSELFREPLICATIONUNSUPPORTED.has_options = True
_DAEXCEPTIONREPLSELFREPLICATIONUNSUPPORTED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?P\022N\n\022DaExceptionChecked\020\323)\0325Source and destination replica sites must be distinct'))
_DAEXCEPTIONREPLAPPLYDIFFFAILED.has_options = True
_DAEXCEPTIONREPLAPPLYDIFFFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?P\022N\n\022DaExceptionChecked\020\324)\0325Generating file snap on destination from diff failed.'))
_DAEXCEPTIONREPLTASKREMOVED.has_options = True
_DAEXCEPTIONREPLTASKREMOVED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\022DaExceptionChecked\020\325)\032%Task has been removed from Snapstore.'))
_DAEXCEPTIONREPLBANDWIDTHLIMITCHANGEERROR.has_options = True
_DAEXCEPTIONREPLBANDWIDTHLIMITCHANGEERROR._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?L\022J\n\022DaExceptionChecked\020\326)\0321Changing bandwidth limit failed. Try again later.'))
_DAEXCEPTIONREPLSOURCESWITCHEDTASK.has_options = True
_DAEXCEPTIONREPLSOURCESWITCHEDTASK._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222??\022=\n\022DaExceptionChecked\020\330)\032$Source switched to a different task.'))
_DAEXCEPTIONREPLAUTHENTICATIONFAILUREDSTREPLICASITE.has_options = True
_DAEXCEPTIONREPLAUTHENTICATIONFAILUREDSTREPLICASITE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?J\022H\n\022DaExceptionChecked\020\331)\032/Destination replica site authentication failure'))
_DAEXCEPTIONREPLDSTROFS.has_options = True
_DAEXCEPTIONREPLDSTROFS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?I\022G\n\024DaExceptionUnchecked\020\332)\032*Destination replica site in read-only mode0\001'))
_DAEXCEPTIONREPLREGISTRATIONFAILUREDSTREPLICASITE.has_options = True
_DAEXCEPTIONREPLREGISTRATIONFAILUREDSTREPLICASITE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?G\022E\n\022DaExceptionChecked\020\333)\032,Destination replica site registation failure'))
_DAEXCEPTIONREPLSHELVETIMEOUT.has_options = True
_DAEXCEPTIONREPLSHELVETIMEOUT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\022DaExceptionChecked\020\334)\032)Failed to shelve a previous task in-time.'))
_DAEXCEPTIONREPLSNAPINCOMPATIBLE.has_options = True
_DAEXCEPTIONREPLSNAPINCOMPATIBLE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n\022DaExceptionChecked\020\335)\0320Snapshot is not compatible with the destination.'))
_DAEXCEPTIONREPLTOOMANYTASKS.has_options = True
_DAEXCEPTIONREPLTOOMANYTASKS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\\\022Z\n\022DaExceptionChecked\020\336)\032AToo many replication tasks; try again later or cancel some tasks.'))
_DAEXCEPTIONREPLGENERICSTRESS.has_options = True
_DAEXCEPTIONREPLGENERICSTRESS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?;\0229\n\022DaExceptionChecked\020\227*\032 Generic stress error for testing'))
_DAEXCEPTIONSNAPTOOMANYPGS.has_options = True
_DAEXCEPTIONSNAPTOOMANYPGS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?k\022i\n\022DaExceptionChecked\020\230*\032PCannot create more protection groups. The DVX system reached the maximum number.'))
_DAEXCEPTIONSNAPTOOMANYSNAPSINPG.has_options = True
_DAEXCEPTIONSNAPTOOMANYSNAPSINPG._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\255\001\022\252\001\n\024DaExceptionUnchecked\020\231*\032\216\001The schedule frequency and retention will lead to more snapshots than the DVX system can support at a time. Reduce the frequency or retention.'))
_DAEXCEPTIONSNAPSTOOMANYFILESINSNAP.has_options = True
_DAEXCEPTIONSNAPSTOOMANYFILESINSNAP._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?7\0225\n\022DaExceptionChecked\020\232*\032\034Too many files in a snapshot'))
_DAEXCEPTIONSNAPISSEALED.has_options = True
_DAEXCEPTIONSNAPISSEALED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\022DaExceptionChecked\020\233*\032\026Snap is already sealed'))
_DAEXCEPTIONSNAPISEMPTY.has_options = True
_DAEXCEPTIONSNAPISEMPTY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\022DaExceptionChecked\020\234*\032\023Snap has no members'))
_DAEXCEPTIONSNAPSTOREROFS.has_options = True
_DAEXCEPTIONSNAPSTOREROFS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?E\022C\n\024DaExceptionUnchecked\020\235*\032&Snapstore is running in read-only mode0\001'))
_DAEXCEPTIONPGPOLICYTOOMANYELEMS.has_options = True
_DAEXCEPTIONPGPOLICYTOOMANYELEMS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?O\022M\n\024DaExceptionUnchecked\020\236*\0322PG policy has too many member or schedule elements'))
_DAEXCEPTIONPGPOLICYTOOBIG.has_options = True
_DAEXCEPTIONPGPOLICYTOOBIG._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\024DaExceptionUnchecked\020\237*\032\024PG policy is too big'))
_DAEXCEPTIONTOOMANYTASKS.has_options = True
_DAEXCEPTIONTOOMANYTASKS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?c\022a\n\024DaExceptionUnchecked\020\240*\032DCannot create more tasks. The DVX system reached the maximum number.0\001'))
_DAEXCEPTIONPGSNAPFAILED.has_options = True
_DAEXCEPTIONPGSNAPFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?G\022E\n\024DaExceptionUnchecked\020\241*\032*Failed to take a protection group snapshot'))
_DAEXCEPTIONTOOMANYACVMSINSNAP.has_options = True
_DAEXCEPTIONTOOMANYACVMSINSNAP._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\022DaExceptionChecked\020\242*\032)Too many app consistent VMs in a snapshot'))
_DAEXCEPTIONACVMAGENTNOTFOUND.has_options = True
_DAEXCEPTIONACVMAGENTNOTFOUND._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?Q\022O\n\022DaExceptionChecked\020\243*\0326Guest agent was not found for app-consistent snapshot.'))
_DAEXCEPTIONACVMAGENTUNREACHABLE.has_options = True
_DAEXCEPTIONACVMAGENTUNREACHABLE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?X\022V\n\022DaExceptionChecked\020\244*\032=Could not connect to guest agent for app-consistent snapshot.'))
_DAEXCEPTIONACVMQUIESCETIMEOUT.has_options = True
_DAEXCEPTIONACVMQUIESCETIMEOUT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\022DaExceptionChecked\020\245*\032!Quiesce to guest agent timed out.'))
_DAEXCEPTIONACVMQUIESCEERROR.has_options = True
_DAEXCEPTIONACVMQUIESCEERROR._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\022DaExceptionChecked\020\246*\032&Quiesce to guest agent returned error.'))
_DAEXCEPTIONPGPOLICYTOOMANYACELEMS.has_options = True
_DAEXCEPTIONPGPOLICYTOOMANYACELEMS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n\024DaExceptionUnchecked\020\247*\032.PG Policy has too many app consistent members.'))
_DAEXCEPTIONSNAPNOTAPPCONSISTENT.has_options = True
_DAEXCEPTIONSNAPNOTAPPCONSISTENT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?B\022@\n\024DaExceptionUnchecked\020\250*\032%VM Snap taken was not app-consistent.'))
_DAEXCEPTIONSNAPNOTCREATEDLOCALLY.has_options = True
_DAEXCEPTIONSNAPNOTCREATEDLOCALLY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\024DaExceptionUnchecked\020\251*\032$ProtGrpSnap was not created locally.'))
_DAEXCEPTIONPGPOLICYSCHEDULENAMETOOLONG.has_options = True
_DAEXCEPTIONPGPOLICYSCHEDULENAMETOOLONG._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\024DaExceptionUnchecked\020\252*\032\'Schedule name of PG policy is too long.'))
_DAEXCEPTIONDATASTORENOTMOUNTED.has_options = True
_DAEXCEPTIONDATASTORENOTMOUNTED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?K\022I\n\024DaExceptionUnchecked\020\253*\032.Datastore was not mounted on any of the hosts.'))
_DAEXCEPTIONREPLACEVSSMETAFAILED.has_options = True
_DAEXCEPTIONREPLACEVSSMETAFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?V\022T\n\024DaExceptionUnchecked\020\254*\0329Failed to replace VSS metadata on all/some of the vdisks.'))
_DAEXCEPTIONBASICDBNOTOPEN.has_options = True
_DAEXCEPTIONBASICDBNOTOPEN._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\022DaExceptionChecked\020\374*\032\032Basic Database is not open'))
_DAEXCEPTIONBASICDBREQUIRESXID.has_options = True
_DAEXCEPTIONBASICDBREQUIRESXID._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?>\022<\n\022DaExceptionChecked\020\375*\032#Operation requires a transaction id'))
_DAEXCEPTIONBASICDBINVALIDXID.has_options = True
_DAEXCEPTIONBASICDBINVALIDXID._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?4\0222\n\022DaExceptionChecked\020\376*\032\031Transaction id is invalid'))
_DAEXCEPTIONBASICDBRECORDNOTFOUND.has_options = True
_DAEXCEPTIONBASICDBRECORDNOTFOUND._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\022DaExceptionChecked\020\377*\032\020Record not found'))
_DAEXCEPTIONBASICDBRECORDEXISTS.has_options = True
_DAEXCEPTIONBASICDBRECORDEXISTS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?(\022&\n\022DaExceptionChecked\020\200+\032\rRecord exists'))
_DAEXCEPTIONBASICDBXACTIONINUSE.has_options = True
_DAEXCEPTIONBASICDBXACTIONINUSE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?i\022g\n\022DaExceptionChecked\020\201+\032NBasicDB only supports one transaction at a time and is is currenlty being used'))
_DAEXCEPTIONENCRYPTIONISDISABLED.has_options = True
_DAEXCEPTIONENCRYPTIONISDISABLED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222??\022=\n\022DaExceptionChecked\020\340+\032$Encryption is disabled on datastore.'))
_DAEXCEPTIONENCRYPTIONISENABLED.has_options = True
_DAEXCEPTIONENCRYPTIONISENABLED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?>\022<\n\022DaExceptionChecked\020\341+\032#Encryption is enabled on datastore.'))
_DAEXCEPTIONENCRYPTIONSYSTEMISLOCKED.has_options = True
_DAEXCEPTIONENCRYPTIONSYSTEMISLOCKED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?7\0225\n\022DaExceptionChecked\020\342+\032\034Encryption system is locked.'))
_DAEXCEPTIONENCRYPTIONSYSTEMISUNLOCKED.has_options = True
_DAEXCEPTIONENCRYPTIONSYSTEMISUNLOCKED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\022DaExceptionChecked\020\343+\032\036Encryption system is unlocked.'))
_DAEXCEPTIONENCRYPTIONSETSTARTUPMODEFAILEDTODELETEOLDKEY.has_options = True
_DAEXCEPTIONENCRYPTIONSETSTARTUPMODEFAILEDTODELETEOLDKEY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?m\022k\n\022DaExceptionChecked\020\344+\032RSetting startup mode to LOCKED failed to forget saved password. Retry again later.'))
_DAEXCEPTIONENCRYPTIONSETSTARTUPMODEFAILEDTOSAVENEWKEY.has_options = True
_DAEXCEPTIONENCRYPTIONSETSTARTUPMODEFAILEDTOSAVENEWKEY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?k\022i\n\022DaExceptionChecked\020\345+\032PSetting startup mode to UNLOCKED failed to save the password. Retry again later.'))
_DAEXCEPTIONENCRYPTIONPASSWORDMISMATCH.has_options = True
_DAEXCEPTIONENCRYPTIONPASSWORDMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?=\022;\n\022DaExceptionChecked\020\346+\032\"Encryption passwords do not match.'))
_DAEXCEPTIONENCRYPTIONPASSWORDNOTCOMPLIANT.has_options = True
_DAEXCEPTIONENCRYPTIONPASSWORDNOTCOMPLIANT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\332\002\022\327\002\n\022DaExceptionChecked\020\347+\032\275\002Encryption password contains invalid characters.\nThe password is a minimum of eight characters. The password can contain letters, numbers, and special characters from the ASCII 7-bit character set within the decimal character code range of 032..126. The password cannot start or end with space characters (ASCII 032).'))
_DAEXCEPTIONENCRYPTIONPASSWORDTOOSHORT.has_options = True
_DAEXCEPTIONENCRYPTIONPASSWORDTOOSHORT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\341\002\022\336\002\n\022DaExceptionChecked\020\350+\032\304\002Encryption password must be at least 8 characters long.\nThe password is a minimum of eight characters. The password can contain letters, numbers, and special characters from the ASCII 7-bit character set within the decimal character code range of 032..126. The password cannot start or end with space characters (ASCII 032).'))
_DAEXCEPTIONENCRYPTIONPASSWORDILLEGALSPACES.has_options = True
_DAEXCEPTIONENCRYPTIONPASSWORDILLEGALSPACES._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\336\002\022\333\002\n\022DaExceptionChecked\020\351+\032\301\002Encryption password cannot start or end with spaces.\nThe password is a minimum of eight characters. The password can contain letters, numbers, and special characters from the ASCII 7-bit character set within the decimal character code range of 032..126. The password cannot start or end with space characters (ASCII 032).'))
_DAEXCEPTIONENCRYPTIONENABLEDSTARTUPMODELOCKED.has_options = True
_DAEXCEPTIONENCRYPTIONENABLEDSTARTUPMODELOCKED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\271\002\022\266\002\n\022DaExceptionChecked\020\352+\032\234\002Encryption has been enabled successfully. However, an error occurred when the password was saved, so the DVX System set the startup mode to locked. When the Data Node starts in locked startup mode, you must provide the encryption password in order to access the data in the datastore.'))
_DAEXCEPTIONENCRYPTIONSETPASSWORDSUCCESSSTARTUPLOCKED.has_options = True
_DAEXCEPTIONENCRYPTIONSETPASSWORDSUCCESSSTARTUPLOCKED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?\302\002\022\277\002\n\022DaExceptionChecked\020\353+\032\245\002New encryption password has been set successfully. However, an error occurred when the password was saved, so the DVX System set the startup mode to locked. When the Data Node starts in locked startup mode, you must provide the encryption password in order to access the data in the datastore.'))
_DAEXCEPTIONENCRYPTIONSWITCHTOFIPSFAILED.has_options = True
_DAEXCEPTIONENCRYPTIONSWITCHTOFIPSFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?S\022Q\n\022DaExceptionChecked\020\354+\0328Failed to enable FIPS 140-2 validated mode of operation.'))
_DAEXCEPTIONENCRYPTIONSWITCHFROMFIPSFAILED.has_options = True
_DAEXCEPTIONENCRYPTIONSWITCHFROMFIPSFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?T\022R\n\022DaExceptionChecked\020\355+\0329Failed to disable FIPS 140-2 validated mode of operation.'))
_DAEXCEPTIONENCRYPTIONINFIPSAPPROVEDMODE.has_options = True
_DAEXCEPTIONENCRYPTIONINFIPSAPPROVEDMODE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?P\022N\n\022DaExceptionChecked\020\356+\0325DVX already in FIPS 140-2 approved mode of operation.'))
_DAEXCEPTIONENCRYPTIONINFIPSVALIDATEDMODE.has_options = True
_DAEXCEPTIONENCRYPTIONINFIPSVALIDATEDMODE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?R\022P\n\022DaExceptionChecked\020\357+\0327DVX  already in FIPS 140-2 validated mode of operation.'))
_DAEXCEPTIONREMOTESCROLLNOTFOUND.has_options = True
_DAEXCEPTIONREMOTESCROLLNOTFOUND._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\022DaExceptionChecked\020\250-\032\032RemoteScroll is not found.'))
_DAEXCEPTIONREMOTESCROLLVERSIONMISMATCH.has_options = True
_DAEXCEPTIONREMOTESCROLLVERSIONMISMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?V\022T\n\024DaExceptionUnchecked\020\251-\0329RemoteScroll RPC has version that server doesn\'t support.'))
_DAEXCEPTIONVMIDNOTUNIQUE.has_options = True
_DAEXCEPTIONVMIDNOTUNIQUE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?H\022F\n\024DaExceptionUnchecked\020\214.\032)Multiple VMs found to have the same VmId.0\001'))
_DAEXCEPTIONVMXPATHCONFLICT.has_options = True
_DAEXCEPTIONVMXPATHCONFLICT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\024DaExceptionUnchecked\020\215.\032\035VMX FilePath not as expected.0\001'))
_DAEXCEPTIONVMISPOWEREDON.has_options = True
_DAEXCEPTIONVMISPOWEREDON._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\024DaExceptionUnchecked\020\216.\032\037Expecting VM to be Powered Off.'))
_DAEXCEPTIONVMDIRCONFLICT.has_options = True
_DAEXCEPTIONVMDIRCONFLICT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\024DaExceptionUnchecked\020\217.\032\022VM Path not empty.'))
_DAEXCEPTIONVMCONFIGSUPDATEFAILED.has_options = True
_DAEXCEPTIONVMCONFIGSUPDATEFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\024DaExceptionUnchecked\020\220.\032\035Error while cloning VM files.'))
_DAEXCEPTIONVALIDCLONENAMENOTFOUND.has_options = True
_DAEXCEPTIONVALIDCLONENAMENOTFOUND._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?T\022R\n\024DaExceptionUnchecked\020\221.\0325Exceeded maximum attempts to find a valid Clone Name.0\001'))
_DAEXCEPTIONVMEXISTS.has_options = True
_DAEXCEPTIONVMEXISTS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?U\022S\n\024DaExceptionUnchecked\020\222.\0326Cannot clone VM. There is already a VM with that name.0\001'))
_DAEXCEPTIONFILEINUSE.has_options = True
_DAEXCEPTIONFILEINUSE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\024DaExceptionUnchecked\020\223.\032#Cannot restore. File lock detected.'))
_DAEXCEPTIONVMINUSE.has_options = True
_DAEXCEPTIONVMINUSE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?J\022H\n\024DaExceptionUnchecked\020\224.\032+Cannot restore. Lock detected in VM Folder.0\001'))
_DAEXCEPTIONVMXFILECONFLICT.has_options = True
_DAEXCEPTIONVMXFILECONFLICT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?@\022>\n\024DaExceptionUnchecked\020\225.\032#Destination already has a Vmx File.'))
_DAEXCEPTIONINVALIDVIRTUALDISK.has_options = True
_DAEXCEPTIONINVALIDVIRTUALDISK._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?H\022F\n\024DaExceptionUnchecked\020\226.\032+Input is not a valid virtual disk artifact.'))
_DAEXCEPTIONVMPARSINGERROR.has_options = True
_DAEXCEPTIONVMPARSINGERROR._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?T\022R\n\024DaExceptionUnchecked\020\227.\0325Unable to determine a VM. Could be a parsing failure.0\001'))
_DAEXCEPTIONLICENSEINVALID.has_options = True
_DAEXCEPTIONLICENSEINVALID._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\024DaExceptionUnchecked\020\360.\032\023License is invalid.'))
_DAEXCEPTIONVSSERROR.has_options = True
_DAEXCEPTIONVSSERROR._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?&\022$\n\024DaExceptionUnchecked\020\324/\032\tVSS error'))
_DAEXCEPTIONACCESSKEYINVALID.has_options = True
_DAEXCEPTIONACCESSKEYINVALID._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\024DaExceptionUnchecked\020\2700\032$Access key is invalid: {errorDetail}'))
_DAEXCEPTIONFEATUREUNAVAILBLE.has_options = True
_DAEXCEPTIONFEATUREUNAVAILBLE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?z\022x\n\024DaExceptionUnchecked\020\2710\032]Cloud DVX feature is not available from your AWS account.  Please check with Datrium support.'))
_DAEXCEPTIONSOFTWARENOTSETUP.has_options = True
_DAEXCEPTIONSOFTWARENOTSETUP._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?D\022B\n\024DaExceptionUnchecked\020\2720\032\'Cloud DVX software has not been set up.'))
_DAEXCEPTIONCLOUDDVXINCOMPATIBLE.has_options = True
_DAEXCEPTIONCLOUDDVXINCOMPATIBLE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?P\022N\n\024DaExceptionUnchecked\020\2730\0323Cloud DVX version is incompatible with source site.'))
_DAEXCEPTIONAWSUNRESPONSIVE.has_options = True
_DAEXCEPTIONAWSUNRESPONSIVE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?X\022V\n\024DaExceptionUnchecked\020\2750\032;AWS services are unresponsive or unreachable: {errorDetail}'))
_DAEXCEPTIONAWSERROR.has_options = True
_DAEXCEPTIONAWSERROR._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?A\022?\n\024DaExceptionUnchecked\020\2760\032$AWS returned an error: {errorDetail}'))
_DAEXCEPTIONCLOUDDVXINSTANCEDOWN.has_options = True
_DAEXCEPTIONCLOUDDVXINSTANCEDOWN._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?:\0228\n\024DaExceptionUnchecked\020\2770\032\035Cloud DVX instance is not up.'))
_DAEXCEPTIONSYSTEMALREADYMANAGED.has_options = True
_DAEXCEPTIONSYSTEMALREADYMANAGED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\024DaExceptionUnchecked\020\3000\032\034This DVX is already managed.'))
_DAEXCEPTIONSYSTEMNOTMANAGED.has_options = True
_DAEXCEPTIONSYSTEMNOTMANAGED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?5\0223\n\024DaExceptionUnchecked\020\3010\032\030This DVX is not managed.'))
_DAEXCEPTIONACCESSKEYREQUIRED.has_options = True
_DAEXCEPTIONACCESSKEYREQUIRED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?3\0221\n\024DaExceptionUnchecked\020\3020\032\026Access key is required'))
_DAEXCEPTIONCLOUDDVXTOOMANYSRCSITES.has_options = True
_DAEXCEPTIONCLOUDDVXTOOMANYSRCSITES._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?L\022J\n\024DaExceptionUnchecked\020\3030\032/Too many on-prem systems paired with Cloud DVX.'))
_DAEXCEPTIONGUESTFSINVALIDCOOKIE.has_options = True
_DAEXCEPTIONGUESTFSINVALIDCOOKIE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?+\022)\n\024DaExceptionUnchecked\020\2341\032\016Invalid cookie'))
_DAEXCEPTIONGUESTFSERRPARSE.has_options = True
_DAEXCEPTIONGUESTFSERRPARSE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222??\022=\n\024DaExceptionUnchecked\020\2351\032\"Parsing error in guest file system'))
_DAEXCEPTIONGUESTFSERROPEN.has_options = True
_DAEXCEPTIONGUESTFSERROPEN._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\024DaExceptionUnchecked\020\2361\032\034Error while opening a device'))
_DAEXCEPTIONGUESTFSERRREADDIR.has_options = True
_DAEXCEPTIONGUESTFSERRREADDIR._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?<\022:\n\024DaExceptionUnchecked\020\2371\032\037Error while reading a directory'))
_DAEXCEPTIONGUESTFSERRREAD.has_options = True
_DAEXCEPTIONGUESTFSERRREAD._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\024DaExceptionUnchecked\020\2401\032\023Error while reading'))
_DAEXCEPTIONGUESTFSERRWRITE.has_options = True
_DAEXCEPTIONGUESTFSERRWRITE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?0\022.\n\024DaExceptionUnchecked\020\2411\032\023Error while writing'))
_DAEXCEPTIONGUESTFSUNSUPPORTEDVOLUME.has_options = True
_DAEXCEPTIONGUESTFSUNSUPPORTEDVOLUME._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?G\022E\n\024DaExceptionUnchecked\020\2421\032*Operation performed on unsupported volume.'))
_DAEXCEPTIONIRRINTERNAL.has_options = True
_DAEXCEPTIONIRRINTERNAL._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?9\0227\n\024DaExceptionUnchecked\020\2002\032\032IRR generic run time error8\001'))
_DAEXCEPTIONILLEGALPLANOPERATION.has_options = True
_DAEXCEPTIONILLEGALPLANOPERATION._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?F\022D\n\024DaExceptionUnchecked\020\2012\032\'Illegal operation in current plan state8\001'))
_DAEXCEPTIONARCHIVEEOF.has_options = True
_DAEXCEPTIONARCHIVEEOF._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?/\022-\n\022DaExceptionChecked\020\3442\032\024Found end of archive'))
_DAEXCEPTIONARCHIVERETRY.has_options = True
_DAEXCEPTIONARCHIVERETRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?.\022,\n\022DaExceptionChecked\020\3452\032\023Retry might succeed'))
_DAEXCEPTIONARCHIVEWARN.has_options = True
_DAEXCEPTIONARCHIVEWARN._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?*\022(\n\022DaExceptionChecked\020\3462\032\017Partial success'))
_DAEXCEPTIONARCHIVEFAILED.has_options = True
_DAEXCEPTIONARCHIVEFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?8\0226\n\022DaExceptionChecked\020\3472\032\035Operation cannot be completed'))
_DAEXCEPTIONARCHIVEFATAL.has_options = True
_DAEXCEPTIONARCHIVEFATAL._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?O\022M\n\022DaExceptionChecked\020\3502\0324Operation failed and no more operations are possible'))
_DAEXCEPTIONEXPORTTOOVFFAILED.has_options = True
_DAEXCEPTIONEXPORTTOOVFFAILED._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?1\022/\n\024DaExceptionUnchecked\020\3103\032\024Export to ovf failed'))
_DAEXCEPTIONINVALIDSITEOP.has_options = True
_DAEXCEPTIONINVALIDSITEOP._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?M\022K\n\024DaExceptionUnchecked\020\3509\0320Invalid operation issued on a given replica site'))
_DAEXCEPTIONSRMHEALTHCRITICAL.has_options = True
_DAEXCEPTIONSRMHEALTHCRITICAL._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\222?C\022A\n\024DaExceptionUnchecked\020\3519\032$The health of SRM PGs or site not OK0\001'))
# @@protoc_insertion_point(module_scope)
